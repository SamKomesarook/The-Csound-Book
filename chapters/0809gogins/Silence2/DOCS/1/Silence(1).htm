<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN"><html>	<head>		<meta http-equiv="Content-Type" content="text/html;CHARSET=iso-8859-1">		<meta name="GENERATOR" content="Visual Page 1.1a for Windows">		<title>Silence, a system for making music on computers by means of software alone.</title>	</head>	<body text="#000000" bgcolor="#FFFFBB" link="#0000EE" vlink="#551A8B" alink="#FF0000">		<center>			<p>			<table border="4" cellpadding="16" cellspacing="4" bgcolor="#FFFF80">				<tr>					<td>						<p align="CENTER"><img src="staff.gif" width="316" height="247" align="RIGHT" border="0"></td>					<td>						<h1 align="CENTER">S I L E N C E / <i>Version 2.3.1</i></h1>						<p align="CENTER">Vineyard Productions<br>						150 West 95th Street<br>						Apartment 4-D<br>						New York NY 10025<br>						Telephone: (212) 222-4079<br>						<a href="Silence.html">http://www.pipeline.com/~gogins</a><br>						Email <a href="mailto:gogins@nyc.pipeline.com">gogins@nyc.pipeline.com</a></p>						<h3 align="CENTER">25 May 1997</td>				</tr>				<tr>					<td>						<h3 align="CENTER"><a href="#Welcome">Welcome<br>						</a><a href="#WhatIs">What is WCsound?<br>						</a><a href="#Software">Software License<br>						</a><a href="#Installation">Download and Installation<br>						</a><a href="http://www.pipeline.com/~gogins/Silence_v2.1/Biblio.htm"><font size="4"><b>Bibliography</b></font></a></td>					<td>						<h3 align="CENTER">Copyright (C) 1997 by Michael Gogins.<br>						All rights reserved.</td>				</tr>			</table>			</p>		</center>		<p>&nbsp;		<hr align="CENTER">		</p>		<h2><a name="Welcome"></a>Welcome</h2>		<p>Welcome to Silence, a system for making music on computers by means of software alone.</p>		<p>Silence is especially designed to support algorithmic composition and synthesis. I made it for my own very specific purposes, but I will be happy if you also find it useful. Silence consists of a number of components designed to work with each other, with <a href="http://www.leeds.ac.uk/music/Man/c_front.html">Csound</a>, with standard MIDI sequencers and soundfile editors, and with programming languages.</p>		<p>The basic idea is that you write whatever software you want or need to make notes, which are just six numbers each, and you put them into Silence. Silence then takes care of making the notes into music, either as MIDI sequences or as soundfiles (using Csound).</p>		<p>I have thrown in a <a href="http://www.pipeline.com/~gogins/Silence_v2.1/Biblio.htm">bibliography </a>of the books I used to make this system, also a page of <a href="http://www.pipeline.com/~gogins/Silence_v2.1/bookmark.htm">links </a>to sites I find useful in this field.</p>		<p>		<table border="1" cellpadding="4" bgcolor="#FFFF80">			<caption></caption>			<dt><b><font size="+1">Proprietary Executable Files in This Distribution</font></b></CAPTION>			<tr>				<td bgcolor="#FFFF80"><a href="#WhatIs"><b>WCsound.dll</b></a></td>				<td>A Visual C++ 5.0 ActiveX object providing a graphical user interface, score manager, and Midi sequence translator for Csound.</td>			</tr>			<tr align="LEFT" valign="TOP">				<td><a href="#WhatIs"><b>WCsound.exe</b></a></td>				<td bgcolor="#FFFF80">A Visual C++ 5.0 standalone program that runs Wcsound.dll from the command line; useful for translating Midi sequences to and from Csound scores.</td>			</tr>			<tr>				<td><b>Grifs.exe</b></td>				<td>A Visual C++ 5.0 program that makes soundfiles using recurrent iterated function systems and the Gabor transform.</td>			</tr>			<tr>				<td><b>Rifs.exe</b></td>				<td>A Visual Basic 4.0 program that makes soundfiles using recurrent iterated function systems and Csound. NOTE: Requires the Visual Basic 4.0 32-bit runtime (VB40032.dll).</td>			</tr>			<tr>				<td><a href="http://www.pipeline.com/~gogins/Silence_v2.1/LinMus.htm"><b>LinMus.exe</b></a></td>				<td>A Visual C++ 5.0 program that generates scores using Lindenmayer systems; uses WCsound.dll to manage the scores.</td>			</tr>			<tr>				<td><a href="http://www.pipeline.com/~gogins/Silence_v2.1/ScrnMuse.htm"><b>ScrnMuse.exe</b></a></td>				<td>A Visual C++ 5.0 program that translates screen shots of images from the Windows clipboard into WCsound scores, Csound scores, or Midi files; useful for translating fractals from Fractint into music; uses WCsound.dll to manage the scores. Also translates screen shots into Csound heterodyne filter analysis (ads) files; by then using Csound's <tt>adsyn </tt>instrument with the .ads file, you can turn the fractal image directly into a sound.</td>			</tr>			<tr>				<td><a href="http://www.pipeline.com/~gogins/Silence_v2.1/StrnMuse.htm"><b>StrnMuse.exe</b></a></td>				<td>A Visual C++ 5.0 program that generates Csound scores or Midi sequences using chaotic dynamical systems, as well as ordinary differential equations, and some other dynamical systems. The program is based on ideas and code described in <a href="http://sprott.physics.wisc.edu/sprott.htm">Julien C. Sprott's</a> book, <a href="http://sprott.physics.wisc.edu/sa.htm"><i><b>Strange Attractors: Creating Patterns in Chaos</b></i></a></td>			</tr>			<tr>				<td><b>MCsound.dll</b></td>				<td>A Visual C++ 5.0 MathLink program enabling WCsound.dll to serve as a Mathematica add-in. I sometimes use Mathematica for algorithmic composition and mathematical manipulation of scores.</td>			</tr>		</table>		<table border="1" cellpadding="4" bgcolor="#FFFF80">			<caption><font size="4"><b>&nbsp;<br>				<br>				Non-Proprietary Executable Files in This Distribution</b></font></caption>			<tr>				<td><a href="#WhatIs"><b>Csound.exe</b></a></td>				<td>A freely available software sound synthesis system that I have optimized for Win32 and extended with plugin opcodes.</td>			</tr>			<tr>				<td><b>stk.opcodes</b></td>				<td>A public domain Win32 shared libary implementing <a href="http://www.cs.princeton.edu/~prc/">Perry R. Cook's Synthesis Toolkit 95</a> as plugin opcodes for Csound.exe.</td>			</tr>		</table>		<h2>		<hr align="CENTER">		<a name="Software"></a>Software License</h2>		<p>Silence is copyright (C) 1996 by Michael Gogins, all rights reserved.</p>		<p>This software is not freeware.</p>		<p>You are permitted and encouraged to redistribute these files in the form of Silence.zip without charge or limit. You are not permitted to redistribute only a part of the proprietary executable files, or to modify the proprietary executable files and redistribute them.</p>		<p>There is no charge for purely private use of Silence. However, if you use any of the proprietary executable files listed above to make music for other people, or to create software for other people, you must purchase a software license by sending a check for $60 to the address above, payable to&nbsp;Michael Gogins.</p>		<p>All music files (including Midi files, WCsound score (.osc) files, and Csound score (.sco) files) in this distribution are copyright by Michael Gogins. You are not permitted to play these files in public, or to perform the music in them in public, without written permission in advance by him.</p>		<p>Note that Csound.exe and stk.opcodes are included in this distribution, but are not subject to this license. They have their own licenses under the terms of which they are freely available to use or modify for the purposes of education and research. Csound is copyrighted by MIT. The Csound copyright notice may be found in <a href="http://www.pipeline.com/~gogins/Silence_v2.1/Csound.txt">Csound.txt</a>. Stk.opcodes is based on code and algorithms in the Synthesis Toolkit 95 by <a href="http://www.cs.princeton.edu/~prc/">Perry R. Cook</a>, with the exception of my implementation of his instruments as Csound opcodes, and the Synthesis Toolkit notice may be found in <a href="http://www.pipeline.com/~gogins/Silence_v2.1/STK.txt">STK.txt</a>; Mr. Cook's header files with his notes on patent issues may be found in the Rawwaves subdirectory of this distribution.</p>		<p>In other words, you can get my version of Csound.exe from this distribution and use it as much as you like all by itself or with stk.opcodes without owing me anything. However, if you use WCSound or any of the other proprietary files listed above to make music for the public, you owe me something.</p>		<h2>		<hr align="CENTER">		<a name="Installation"></a>Download and Installation</h2>		<h3>New Features and Bug Fixes</h3>		<h4>The Latest Changes for Version 2.3.1</h4>		<p>The MIDI file import routine quit working, but has been fixed. The routine for reading old-style binary &quot;.osc&quot; files quit working, but has been fixed.		<h4>Changes for Version 2.3</h4>		<p>Silence notes are now independently createable ActiveX objects (class name &quot;WCSOUND.CNote&quot;), and can be added to, set in, or gotten from Silence scores as objects. They contain the full mathematical functionality of both a dense matrix class, and the basic operations of atonal set theory, including T (transposition or modular sum), M (permutation or modular product), I (modular inversion), and PrimeForm (moving pitch-classes to fit into any Forte-named prime form at a given pitch-class transposition). The latter can be used to produce any scale, mode, or chord form. Furthermore, these serial operations can be applied not only to pitch, but to any of the 6 dimensions of the Silence note space, and with any modulus, not only 12.</p>		<p>Among the matrix operations is dot product. You can redimension a CNote object to be a 7 x 7 matrix. If the bottom row is all 0 except for the rightmost element which is 1, this is a homogeneous matrix operator that can be used to transform normal CNote objects or even entire scores.</p>		<p>At the present time, CNotes have only an IDispatch interface, which has relatively slow performance. In the future, all of Silence will be re-implemented in the form of IUnknown or vtable interfaces, which are very high-performance. This will not affect the class names, class IDs, or file formats in the Silence system.</p>		<p>The LinMus program now implements the atonal set theory operations for pitch-classes. In the near future, these will be extended to the other dimensions of note space as well.</p>		<p>The Silence build of Csound has been modified to automatically load, by default, any opcode plugins found in the same directory as the Csound program itself. Previously, this only happened if Csound was executed from its own directory. This default behavior can still be overridden by setting the OPCODEDIR environment variable.</p>		<p>In the same way, all of the Silence programs can now load their HTML help pages as long as those pages are in the same directory as the program, no matter what the current working directory is, if the &quot;htm&quot; file type is registered with the Windows shell.		<h4>Changes for Version 2.2</h4>		<p>The MIDI routines were not accurately translating MIDI sequences into the proper Csound pitches. This was fixed.</p>		<p>The color model for note display was improved.</p>		<p>The menu commands was re-arranged.</p>		<p>In order to make it easier to work on instrument definitions, it was made possible to call up the function editor directly from the instrument editor.</p>		<p>The Silence &quot;osc&quot; file format was changed from a binary format to a hierarchical, tag-delimited text format, similar to HTML. This was done to make it easier to read the score files from other programs and to make it possible to recover the standard Csound orchestra and score files embedded in the &quot;osc&quot; files, or to edit the files, using an ordinary text editor or word processor. In the future, all my algorithmic composition programs will also be changed to use the tag-delimited format. The motive for this change is to preserve all materials required to realize a piece in the most standard and most easily accessible form possible. WCsound will still read &quot;osc&quot; files in the old format, but it will save them in the new format.</p>		<p>I added a few new instruments to Template.osc, and improved some of the old ones.</p>		<p>My build of Csound was updated with all the new sources and opcodes of version 3.45 from John Fitch. My build still includes plugin opcodes and all my other changes, but I have managed to reduce the actual number of my patches to the source code files.		<h3>Installation</h3>		<p>Silence requires Windows 95 or Windows NT for Pentium or higher microprocessors.</p>		<p>Silence likes to have a sound card and a Midi port installed.</p>		<p>Silence does not have a digital audio waveform editor, a music notation editor, or a Midi sequencer built in. Silence is designed to work with other waveform editors and hard disk recorders, notation editors, and sequencers.</p>		<p>If you don't have Silence.zip, you can <a href="http://www.pipeline.com/~gogins/Silence_v2.1/Silence20.zip">download</a> it from here.</p>		<p>Once you've downloaded silence.zip, create a Silence directory on your hard disk and unzip the files in silence.zip into it. The Silence directory should have a Rawwaves subdirectory containing all the &quot;raw&quot; soundfiles that the Cook opcodes plugin stk.opcodes uses.</p>		<p>The WCsound.dll shared library must be registered with Windows. If you simply run WCsound.exe, it will attempt to do this for you. If that fails, run:</p>		<ul>			<p><tt>RegSvr32.exe WCsound.dll</tt></p>		</ul>		<p>Silence uses the Windows shell to play or edit music files. Normally, Windows has pre-defined &quot;open&quot; shell actions for wav and mid files, usually using the Windows media player Mplayer.exe. If you want to enable Silence to invoke your Midi sequencer or soundfile editor, you must register &quot;Edit&quot; actions for your Midi sequencer, soundfile editor, media player, etc., with the Windows shell (&quot;My Computer&quot; View menu, Options command, File types tab, Edit button, New button) for .mid, .wav, and perhaps .aif files. You can also use shell registration to redefine the &quot;open&quot; actions to use some other program besides the usual Mplayer.exe to play music files.</p>		<p>And of course you must install Csound, either from silence.zip or from another archive such as the one at <a href="http://www.leeds.ac.uk/music/Man/c_front.html">Leeds University</a>.</p>		<h2>		<hr align="CENTER">		<a name="WhatIs"></a>What is WCsound?.. <i>For that matter, what is Csound?</i></h2>		<p>WCsound is a Windows 95 graphical front end, orchestra and score manager, and Midi sequence translator for Csound, one of the leading software sound synthesis systems for Unix and Windows.</p>		<p>Csound is widely used both to teach computer music, and to realize computer music. It is perhaps the most widely used software sound synthesis system in the world, and is certainly the most widely used on IBM-compatible personal computers. Csound IS freely available and may be used without charge for education and research in accordance with its own software license and copyright. See the Csound.txt file for this copyright.</p>		<p>Csound is available on the World Wide Web from many locations. The most useful location for the purposes of Silence is <a href="http://www.leeds.ac.uk/music/Man/c_front.html">Leeds University</a>, where John Fitch does us all a great service by maintaining several versions of Csound that run on IBM compatible personal computers, and that includes new opcodes contributed by engineers and composers all over the world. Another notable site for Csound is the <a href="http://mars.let.uva.nl/gather/accci/index.html">Amsterdam Catalogue</a> of Csound instruments.</p>		<p>However, Csound is a command-line program that reads a separate orchestra and score file, and perhaps other files, to produce a piece of music. WCsound provides a convenient graphical user interface for Csound; stores function statements (wavetable definitions), instrument definitions, and instrument statements (notes) in one file; and translates standard format 1 Midi files to and from Csound scores. The WCsound instruments are contained in an &quot;orchestra&quot; library, and the user selects from the library to build up an &quot;arrangement&quot; of instruments for actual use by the score. Furthermore, WCsound is a shared library that readily plugs into other programs using ActiveX classes.</p>		<p>Indeed, WCsound is mainly designed to serve as a score manager component for algorithmic composition programs, and it can interface with such programs in several ways. WCsound works as a standalone executable (WCsound.exe) and as an ActiveX object (WCsound.dll).</p>		<p>For example, in Visual Basic 4.0, read in WCsound.tlb from the Tools menu References command, and write:</p>		<ul>			<p><tt>Dim CS As New CSOUND<br>			CS.NoteAdd 2, 4.25, 3, 9, 72, .25, 10<br>			CS.NoteAdd 4, 4.25, 6, 8.166667, 72, 1.25, 10<br>			CS.DoModal</tt></p>		</ul>		<p>When run standalone, WCSound will attempt to open any .osc, .orc, .sco, or .mid file that is passed as a command line argument:</p>		<ul>			<p><tt>WCSound filename.xxx</tt></p>		</ul>		<p>Additional .orc, .mid, or .sco files will also be read and merged with the already opened file. This is convenient for opening an .osc file containing a standard orchestra and functions, and then importing into it an algorithmically generated .sco file, or a midifile:</p>		<ul>			<p><tt>WCSound template.osc generated.sco</tt></p>			<p><tt>WCSound functions.sco orchestra.orc generated.sco</tt></p>			<p><tt>WCSound functions.sco orchestra.orc sequenced.mid</tt></p>		</ul>		<p>If you want to use the the piano roll display, the rescaling commands, or the Midifile translation commands, you must follow the convention that all notes (&quot;i&quot; statements) in score (.sco) files use the following format for their first 6 parameter fields:</p>		<ul>			<p>p1 Instrument number from 1 to 200.<br>			p2 Starting time of note in seconds.<br>			p3 Length of note in seconds.<br>			p4 Octave (pitch) of note in linear octaves (middle C = 8.0).<br>			p5 Decibels (loudness) of note from 0 to 96.<br>			p6 Pan from left (-1) through center (0) to right (+1).<br>			pn Additional pfields may be used (e.g. for instrument control).</p>		</ul>		<p>Try using affine transformation matrices in Mathematica to perform serial compositional transformations of notes and rows of notes!</p>		<h3>Using WCsound with Existing Csound Orchestras and Scores</h3>		<p>From the &quot;Orchestra&quot; menu, select the &quot;Import ..&quot; command, and import as many orc files as you like to read in their instrument definitions.</p>		<p>From the &quot;Functions&quot; menu, select the &quot;Import...&quot; command, and import (only) the function definitions required by the orchestra from the appropriate sco files.</p>		<p>From the &quot;Score&quot; menu, select the &quot;Import...&quot; command, and import (only) the note definitions from the sco file you want to use.</p>		<p>From the &quot;Orchestra&quot; menu, select the &quot;Edit&quot; command. In the &quot;Orchestra&quot; dialog, select an instrument in the right-hand &quot;Instruments&quot; list and use the &quot;Edit&quot; button to open the &quot;Instrument definition&quot; dialog, in which you should name the instrument, and can edit its code.</p>		<p>In the &quot;Orchestra&quot; dialog, create an arrangement by double-clicking on instrument names in the right-hand &quot;Instruments&quot; list to move them into the left-hand &quot;Arrangement&quot; list, which is the actual set of instruments that will be used to render the score. You can change the instrument numbers by moving the instrument names up and down in the arrangement with the &quot;Up&quot; and &quot;Down&quot; buttons.</p>		<p>From the &quot;File&quot; menu, select the &quot;Save as...&quot; command to save the osc file.</p>		<p>From the &quot;Soundfile&quot; menu, select the &quot;Render&quot; command to compile the soundfile defined by the arrangement and score.</p>		<p>From the &quot;Soundfile&quot; menu, select the &quot;Play&quot; command to play the completed soundfile using the Windows shell.</p>		<p>Please report any bugs to <a href="mailto://gogins@nyc.pipeline.com">me</a>. Thank you.</p>		<h3>My Changes to Csound</h3>		<p>My build of Csound now incorporates all source files and opcode from John Fitch's version 3.45. In addition to providing a friendlier interface to Csound, I have also made changes in Csound itself.</p>		<p>In particular, I have implemented...</p>		<h4>Plugin Opcodes</h4>		<p>Csound will now add to its instrument table any plugin instrument libraries that it finds. These libraries have the filename extension &quot;opcodes&quot; and are loaded either from the local directory, or from the directory specified by the environment variable OPCODEDIR. As a demonstration of this facility, as well as an enhancement to Csound, I have included stk.opcodes, a plugin library containing Csound implementations of all the physical modeling instruments in <a href="http://www.cs.princeton.edu/~prc/">Perry R. Cook's Synthesis Toolkit 95</a>.</p>		<h5>Cook Physical Models</h5>		<ul>			<p><tt>marimba<br>			vibraphone<br>			agogobell<br>			plucked<br>			mandolin<br>			clarinet<br>			flute<br>			brass<br>			bowed<br>			rhodes<br>			wurlitzer<br>			tubularbell<br>			heavymetal<br>			percussiveflute<br>			hammond<br>			fmvoices<br>			minimoog<br>			voiceformant</tt>		</ul>		<p>These all work on the same plan, which is demonstrated in the &quot;Cook Bowed String Model&quot; instrument in Template.osc. For each of these opcodes, the Csound manual page would be like this one :</p>		<p><tt>ar bowed xcps, xamp, xconstatus, xcondata1, xcondata2, xmodwheel</tt></p>		<p>Audio output is a physical model of the named instrument based on waveguide synthesis, frequency modulation synthesis, or modal synthesis.		<h5>Initialization</h5>		<p>There are no specifically initialization-time variables.		<h5>Performance</h5>		<dl>			<dt><tt>xcps</tt>			<dd>Frequency in cycles per second.			<dt><tt>xamp</tt>			<dd>Amplitude multiplier.			<dt><tt>xconstatus</tt>			<dd>MIDI control message status byte. Meaning depends upon opcode, but analogous to corresponding MIDI patch.			<dt><tt>xcondata1</tt>			<dd>MIDI control message data byte 1. Meaning depends upon opcode, but analogous to corresponding MIDI patch.			<dt><tt>xcondata2</tt>			<dd>MIDI control message data byte 2. Meaning depends upon opcode, but analogous to corresponding MIDI patch..			<dt><tt>xmodwheel</tt>			<dd>MIDI modulation wheel value. Meaning depends upon opcode, but analogous to corresponding MIDI patch.		</dl>		<h2>Making New Plugin Opcodes</h2>		<p>Each opcode library may contain any number of new opcodes. Each library must export and define the following structure which Csound calls to register its opcodes:</p>		<pre>/* *      Signature for opcode registration function. *      Both Csound and opcode must be compiled  *      with 8 byte structure member alignment. */typedef PUBLIC long (csOpcodeRegisterType)(//   Used to iterate through all opcodes in a library.	long         opcodeSubscript,	//   Csound audio sampling rate in Hz.	float        *samplingRateIn,	//   Csound control sampling rate in Hz.	float        *kontrolRateIn,	//   Control samples per audio sample.	int          *audioSamplesPerKontrolSampleIn,	//   Channels in the soundfile.	int          *channelCountIn,	//   Address of the function table array in Csound.	FUNC         *functionTablesIn[],	//   Address of the opcode's dispatch table entry,	//   to be filled in by the opcode library.	OENTRY       *opcodeEntryOut);</pre>		<p><br>		This <tt>csOpcodeRegister</tt> function either registers a different opcode for each <tt>opcodeSubscript </tt>and returns 1, or it fails and returns 0. The opcode library is responsible for filling in the the arguments to <tt>csOpcodeRegister</tt>, in particular the members of the <tt>OENTRY </tt>structure, especially the addresses of the opcode's signal processing functions.</p>		<p>Essentially, <tt>OENTRY </tt>is the virtual base class for Csound opcodes; the <tt>OENTRY </tt>structure contains templates for the return types and argument types of 3 virtual functions, which are called on opcode initialization, on every k or control sample, and on every a or audio sample. The <tt>OENTRY </tt>structure also contains references to the pfields for the note being processed by the opcode, and to the audio signal output array.</p>		<p>See the Csound manual for more information on how to create new opcodes.</p>		<h4>Increased adsyn capacity</h4>		<p>Computers have grown in power and memory since Csound was written. I have increased the capacity of the <tt>adsyn </tt>opcode from HMAX = 50 partials to HMAX = 1024, in order to be able to render Graphics Interchange Format files directly as sounds using time-stretched additive synthesis.	</body></html>