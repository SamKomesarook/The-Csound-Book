<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN"><html>	<head>		<meta http-equiv="Content-Type" content="text/html;CHARSET=iso-8859-1">		<meta name="GENERATOR" content="Visual Page 2.0 for Windows">		<title>untitled</title>		<base target="_self">	</head>	<body background="sandbg1.jpg" bgcolor="#FFFFCC">		<p>		<table border="0" cellpadding="8" cellspacing="16" width="100%">			<tr>				<td width="50%">					<h1>SILENCE&nbsp;4.1.1</td>				<td width="50%"><b><font color="black">An extensible system for making music on computers by means of software alone</font></b></td>			</tr>			<tr>				<td width="50%"><b><font color="black">Copyright (c) 1997, 1998 by<br>					Michael Gogins. All rights reserved.<br>					<br>					Vineyard Productions<br>					150 West 95th Street, Apartment 4-D<br>					New York NY 10025<br>					<br>					<br>					</font></b><a href="Silence.html"><b>http://www.pipeline.com/~gogins</b></a><b><font color="black"><br>					</font></b><a href="mailto:gogins@nyc.pipeline.com"><b>gogins@nyc.pipeline.com</b></a></td>				<td width="50%">					<table border="0" cellpadding="4" cellspacing="4" width="100%">						<tr>							<td width="100%"><a href="#Overview"><b>Overview</b></a></td>						</tr>						<tr>							<td width="100%"><a href="#License"><b>License and Download</b></a></td>						</tr>						<tr>							<td width="100%"><a href="#Design"><b>Design</b></a></td>						</tr>						<tr>							<td width="100%"><a href="#Extending"><b>Extending Silence</b></a></td>						</tr>						<tr>							<td width="100%"><a href="#Nodes"><b>Nodes</b></a></td>						</tr>						<tr>							<td width="100%"><a href="Log.htm"><b>Development Log</b></a></td>						</tr>						<tr>							<td width="100%"><a href="Biblio.htm" target="Silence"><b>Bibliography</b></a></td>						</tr>					</table>				</td>			</tr>		</table>		<table border="0" cellpadding="8" cellspacing="16" width="100%">			<tr>				<td width="100%">					<h2>Overview<a name="Overview"></a></td>			</tr>			<tr>				<td width="100%">This is the second minor release version of Silence. Thanks to everyone who struggled with the beta versions. See the <a href="Log.htm">development log</a> for a history of changes. The main change in this version was to simplify the user interface by using a tabbed dialog for the main window, to remove the note by note editing of generated scores (it is still possible to edit a MidiFile node using a MIDI sequencer), and to fix some bugs.<br>					<br>					Silence is an extensible system for making music on computers by means of software alone. It is an instrument for music that could not be performed, composed, or even imagined without computers. It is specifically designed to support algorithmic composition using software synthesis. If you have ever composed by writing a program, or by doing mathematics, or wanted to, then Silence is for you.<br>					<br>					Silence tries to combine the abstract power of academic computer music software, like Common Music or Csound, with the ease of use of commercial MIDI sequencers and hard disk recorders, such as Cubase or Sound Tools. Although currently lacking real-time performance or overdubbing, Silence does provide a rapid development environment, a &quot;composer-friendly&quot; interface to capabilities that cannot be found in the usual commercial software.<br>					<br>					Silence focuses on algorithmic composition, and does not attempt to do everything in music. However, Silence will &quot;shell out&quot; to use other music software, including Csound, MIDI sequencers, notation editors, and soundfile editors, often by using WAV soundfiles and MIDI sequences for data interchange.<br>					<br>					Silence 4.0 includes all of the compositional algorithms of earlier versions, together with new algorithms, in the context of a hierarchical, geometric Music Modeling Language, inspired by <a href="http://www.vrml.org/">Virtual Reality Modeling Language</a>. Silence supports the development of new nodes in Music Modeling Language by independent developers as plugins (Java Beans).<br>					<br>					Silence also works as a Bean inside other Java software. In fact, Silence is written entirely in platform-independent Java. You can find the Javadoc documentation for Silence <a href="404(3).html">here</a>.<br>					<br>					Silence uses a customized version of public domain <a href="404.html">Csound</a>, JCsound, as its default synthesizer, and provides a graphical user interface for Csound with an instrument librarian, file export and import, and facilities for interactively testing instrument definitions. JCsound is based on so-called &quot;public-domain&quot; Csound, the code base maintained by John ffitch. This version of Csound has been made into a shared library to implement native methods of the JCsound.Csound class. JCsound performs rendering in a separate thread, and can be stopped and re-started without reloading the library.<br>					<br>					Support for realtime MIDI sequence recording and overdubbing is planned for the next version of Silence.<br>					<br>					You can still find the previous version, Silence 2.3.1, <a href="Silence(1).htm">here</a>.<br>					<br>					For more detail, see my <a href="Gogins.pdf">paper</a>.</td>			</tr>			<tr>				<td width="100%">					<h2>License and Download<a name="License"></a></td>			</tr>			<tr>				<td width="100%">					<h3>Software License</td>			</tr>			<tr>				<td width="100%">					<p>The software license for Silence comes in four parts. You must read it before you <a href="#ActualDownload">download</a> Silence.</p>					<h4>1. Silence Composition Software License</h4>					<p>This includes Music Modeling Language, all INode classes written by Michael Gogins, and all other compositionally-oriented aspects of Silence. It does not cover INode classes written by other authors.</p>					<p>Silence version 3.1 is copyright (C) 1997 and 1998 by Michael Gogins, all rights reserved.<br>					<br>					Silence version 2.3.1 is copyright (C) 1996 by Michael Gogins, all rights reserved.<br>					<br>					Silence is licensed under the terms of the <a href="http://www.fsf.org/copyleft/gpl.html">GNU General Public License</a>.You may freely use, modify, and redistribute the Silence source code, provided your modified code also is licensed under the terms of the GNU General Public License.</p>					<p><b><i>However, Silence is not free.</i></b> You must pay a fee for downloading it. The download fee is conditional. If you use Silence for purely private purposes, there is no download fee. But if you intend to use Silence to make music for other people to hear, whether for free or for sale, or if you intend to incorporate Silence into software for your own use, the download fee is $100.00.<br>					<br>					To pay the download fee, send a check for $100.00 to Michael Gogins at the address at the top of this page.					<h4>2. Silence Synthesis Software</h4>					<p>This includes <a href="AXCsound.htm">JCsound</a>, Michael Gogins' modifications and extensions to Csound. JCsound is copyright (C) 1997 and 1998 by Michael Gogins, all rights reserved. It is licensed under the terms of the <a href="http://www.fsf.org/copyleft/gpl.html">GNU General Public License</a>.					<h4>3. So-Called &quot;Public Domain Csound&quot;</h4>					<p>This includes the code base maintained by John ffitch and colleagues at the University of Bath. It could informally be considered as open-source software, but be sure to see the <a href="404(2).html">Csound manual</a> for details on its licensing.					<h4>4. MIT Csound</h4>					<p>This includes the original code for Csound, which is copyright 1986, 1997 by the Massachusetts Institute of Technology. All rights reserved. It is licensed under its <a href="404(2).html">own </a><a href="404(1).html">terms</a>, which some consider ambiguous and peculiar.</p>					<h4>What Does All This Mean?</h4>					<p>If you use Csound for research or education there is no fee. If you plan to make something out of Csound and make a lot of money from it, you should first obtain permission from MIT. People have used, and are using, Csound to make music for sale and nobody has gotten into trouble for this. People have modified Csound and redistributed it for free, and nobody has gotten into trouble for that.</p>					<p>If you use Silence compositional software, with or without Csound, for private purposes there is no fee. If you use Silence compositional software, with or without Csound, to make music for other people to hear, or to make software for other people to use, you need pay Michael Gogins a download fee of $100.</p>					<p>If you use Silence synthesis software, that is JCsound, <i>without</i> Silence compositional software, there is no download fee. For example, you could build JCsound into your own music software for free, and redistribute it. However, the software is licensed under the terms of the GNU General Public License. You cannot charge for the Silence synthesis software source code, or for your modifications of it, and you must make it freely available to others, also under the terms of the GNU General Public License. In addition, the Silence synthesis software uses the license for public-domain Csound, which in turn uses the license for MIT Csound...</td>			</tr>			<tr>				<td width="100%">					<h3><a name="ActualDownload"></a>Download</td>			</tr>			<tr>				<td width="100%">Silence is available in the form of a zip file, which can be downloaded <a href="Silence.zip">here</a>. Be advised that this is a major revision of the software and certainly contains bugs. Please email me about any bugs that you encounter.</td>			</tr>			<tr>				<td width="100%">					<h3>Installation</td>			</tr>			<tr>				<td width="100%">					<p><b><i>Warning</i></b>: this is very much a beta release. It will install and function, but installation may require additional components and some knowledge of Java. It has not been tested ouside of the Symantec Visual Cafe 2.5a environment on Windows 95 and Windows NT.</p>					<p>The first non-beta release will be for Java 1.2 and use only core facilities of the language. All node text will be true XML. It will be packaged in a self-sufficient jar file.</p>					<p>Before you can use Silence, you must have Java version 1.1.5 or higher installed on your computer. You must also have installed the <tt>javax.swing</tt>.* packages (Java Foundation Classes version 1.1 beta 3). If you do not have Swing, you can get it from <a href="http://www.javasoft.com">Sun Microsystems</a>. Silence is a demanding program, and making complex pieces requires at least 32 megabytes of RAM and at least a 166 MHz Pentium processor, or the equivalent power on other platforms.</p>					<p>You will also need to have a sound card and soundfile player to hear your soundfiles. I recommend a sound card with a direct digital output that you can send to a DAT player or external digital-to-analog converter, thus eliminating all noise and interference from inside your computer. To actually play soundfiles on Windows, <tt>mplayer.exe</tt> works well enough. Other operating systems have similar utilities.</p>					<ol>						<li>Unzip <tt>Silence.zip</tt> into the Silence directory, preserving pathnames. <tt>Silence.zip</tt> consists of these HTML pages, Java class files, HTML documentation, and a Windows batch file, <tt>Silence.bat</tt>..						<li>Copy <tt>JCsound_Csound.dll</tt> to a directory in your executable path, for example the Windows System32 directory. This is Csound in the form of a shared library that can be called directly from Java. If you are not going to use JCsound, install another public-domain version of Csound, rename it to JCsound, and place it in your executable path.						<li>To run Silence, simply run <tt>Silence.bat</tt>, which invokes the Music Modeling Language (MML) Manager.You will probably have to modify <tt>Silence.bat</tt> to include the proper classpath for Java, Swing, and the Silence packages: <tt>Silence.Framework</tt>, <tt>Silence.Nodes</tt>, and <tt>JCsound.Csound</tt>.						<li>Register your soundfile player, soundfile editor, midifile player, and midifile editor with Silence by using the File menu, Options dialog.						<li>Load the <tt>Sample.mml</tt> composition, and select the Music menu, Generate command. A score will be generated and displayed in the ScoreManager window.						<li>In the ScoreManager, select the Midifile menu, Play command. A MIDI sequence will be exported and the midifile player will be invoked so that you can hear the music.						<li>In the ScoreManager, selecct the Orchestra menu, Csound command. The Csound orchestra and arrangement for the piece will be displayed. Select the Soundfile tab and click on the Render button, and Csound will be invoked to synthesize a soundfile. When it is finished, click on the Play button to hear the piece.					</ol>					<p>The MML Manager main window displays the music graph in a tree control. You can expand or collapse any node by double-clicking on it with the mouse. You can edit any node by clicking on it with the right mouse button, or by selecting it and pressing the ENTER key.</td>			</tr>			<tr>				<td width="100%">					<h2>Design<a name="Design"></a></td>			</tr>			<tr>				<td width="100%">					<p>Typically, composers work with Silence by inserting, editing, rearranging, testing, and deleting nodes from a music graph, which is a tree in which the root is at the top, the leaves are at the bottom, and the nodes are elements of music. Each node can contain any number of child nodes. Nodes can be individual notes; random sequence generators; imported MIDI fles; imported soundfiles; score generating algorithms such as Lindenmayer systems or iterated function sysems; or transformations such as rescaling, moving, or rotating notes, or even conforming them to a predetermined scale, chord, or harmonic progression.</p>					<p>The music graph can be previewed at any time as a MIDI sequence. When the user wishes to produce a finished rendering of a piece:</p>					<ol>						<li>The music graph is traversed depth first to produce and transform notes.						<li>The notes thus generated drive a synthesizer to produce sound.					</ol>					<p>In more detail, Silence consists of four main layers. In order of decreasing abstraction, these are:</p>					<ul>						<li>The <i>music graph</i> (the <a href="404(4).html">IMMLManager</a> interface), a hierarchical geometric representation of music in the form of a directed acyclic graph (DAG) of <i>nodes</i> (the <a href="404(6).html">INode</a> interface) that either produce or transform <i>notes</i> (the <a href="404(8).html">INote</a> interface). The music graph is like the scene graph of Virtual Reality Modeling Language. The rendering algorithm performs a top-down, depth-first traversal of the DAG, accepting the coordinate system of the parent node, producing a composite coordinate system by postconcatenating the parent coordinate system with a local coordinate system, and producing or transforming notes in the composite coordinate systems; and so on. The generated notes are stored in...						<li>The <i>score</i> (the <a href="404(5).html">IScoreManager</a> interface), a collection of notes in <i>music space</i>, which is a homogeneous linear space with the following dimensions:						<ol>							<li>Event <i>type</i>, which is identical to the MIDI status byte for channel 0, i.e. 144 means &quot;note on.&quot;							<li><i>Time</i> in seconds.							<li><i>Duration</i> in seconds.							<li>Pitch in linear <i>octaves</i>, where middle C = 8.0.							<li>Loudness in <i>decibels</i>, where 0 = no energy and the maximum is determined by the width of the sample word.							<li><i>Phase</i> in units of pi. This enables scores to represent raw sound by translating each coefficient of a time-frequency representation of sound into a grain, a very short note with a specific phase. It also brings sound as such and pitched notes into the same semantic space, enabling note-oriented compositional operations to be applied to sound, and signal processing techniques to be applied to collections of notes.							<li>The <i>x</i> dimension of spatial location.							<li>The <i>y</i> dimension of spatial location.							<li>The <i>z</i> dimension of spatial location.							<li><i>Unity</i>, which allows points in music space to be transformed by any combination of scaling, rotation, and translation using one homogeneous affine transformation matrix.						</ol>						<li>The score manager then drives Csound or MIDI. Csound is accessed either as a native method to the <a href="404(17).html">JCsound.Csound</a> class, or by shelling out to a Csound application.					</ul>				</td>			</tr>			<tr>				<td width="100%">					<h2>Compositional Nodes<a name="Nodes"></a></td>			</tr>			<tr>				<td width="100%">Some <a href="404(6).html">nodes</a> serve only to group other nodes; some nodes serve to transform the local coordinate system; some nodes serve to otherwise manipulate the notes produced by their child nodes; and finally, some nodes actually produce notes.<br>					<br>					The hierarchy of coordinate systems in the music graph is as follows. The root node of the music graph is the origin of the global coordinate system. Each of the root node's child nodes specifies a local coordinate system in the form of a Transform (see below). The dot product of the parent coordinate system and the local coordinate system produces a composite coordinate system, which becomes the parent coordinate system of all immediate child nodes. If a child node's Transform is the identity matrix, then that node shares the coordinate system of its parent. The Transform of an INote, an actual note, is identity.<br>					<br>					This scheme can be visualized as a pattern-oriented MIDI sequencer in which each pattern can contain other patterns, ad infinitum; each pattern can move relative to its parent, and/or stretch or shrink relative to its parent, and/or rotate relative to its parent; and patterns can not only contain notes, but also generate them algorithmically, or randomly.</td>			</tr>			<tr>				<td width="100%">					<h2>Extending Silence<a name="Extending"></a></td>			</tr>			<tr>				<td width="100%">All compositional nodes in Silence are plugins (Java Beans) that are loaded at runtime. This dynamic linking feature of Silence is designed to allow people all over the world to create new nodes that will immediately work with any existing installation of Silence. The goal is to foster the interchange of musical ideas and the growth of algorithmic composition and synthesis on the basis of a standard protocol for interchangeable components. Creating new components is moderately easy, in terms of programming.<br>					<br>					Any Java class that implements the <a href="404(6).html">INode</a> interface is a compositional node that will automatically be loaded and that will work right away, thus implicitly defining a new word in Music Modeling Language. INode is derived from the base <a href="404(9).html">IPlugin</a> interface.</td>			</tr>			<tr>				<td width="100%">					<h3>Development Procedure</td>			</tr>			<tr>				<td width="100%">					<p>To create a new plugin INode class:</p>					<ol>						<li>Study the <a href="#Design">Design</a> section of this document, and the <a href="404(6).html">Silence.Framework.INode</a> interface, to understand how INode objects work.						<li>Create an independent project.						<li>Create your new class. It should be declared as part of the Silence.Nodes package and should import the Silence.Framework package. Your new class must implement the Silence.INode interface, and it can be based on one of the existing INode implementation classes (see <a href="#ClassLibrary">Class Library</a>), which will provide a good deal of functionality.						<li>In your classes, you can use any class or method in the standard Java 1.1 SDK, as well as any class or method in the Silence.Framework or Silence.Nodes packages (see <a href="#ClassLibrary">Class Library</a>).						<li>Compile your class or classes and place them in the Silence.Nodes directory.						<li>Run Silence outside of your project to verify that MMLManager will load your new class.						<li>Run Silence in your debugger to verify its functionality.					</ol>				</td>			</tr>			<tr>				<td width="100%">					<h2>Class Library<a name="ClassLibrary"></a></td>			</tr>			<tr>				<td width="100%">Silence provides a toolkit of classes that you can use to help create your own classes.<br>					<br>					You will probably want to use the <a href="404(7).html">Group</a>, <a href="404(11).html">Rescale</a>, <a href="404(10).html">Transform</a>, or <a href="404(13).html">RandomizeUniform</a> class as base classes for new INode objects.<br>					<br>					All Silence classes have access to the <a href="404(14).html">Global</a> object and its global interfaces, which provide many utility functions and manage plugins.<br>					<br>					To implement the read and write methods of IPlugin, you should probably use the <a href="404(12).html">MMLParser</a> class.<br>					<br>					For matrix algebra, you can use the <a href="404(15).html">Matrix</a> class.</td>			</tr>		</table>	</body></html>