<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN"><html>	<head>		<meta http-equiv="Content-Type" content="text/html;CHARSET=iso-8859-1">		<meta name="GENERATOR" content="Visual Page 1.1a for Windows">		<title>AXCsound ActiveX Conrol for Csound</title>	</head>	<body background="sandbg1.jpg" text="#222222" bgcolor="#FFFFCC" link="#0033FF" vlink="#9900CC">		<p>		<table border="0" cellpadding="8" cellspacing="16" width="87%">			<tr>				<td width="348" height="37">					<h1><font size="6" color="black">AXCsound/JCsound&nbsp;3.0</font></td>				<td rowspan="2"><img src="CsoundScreenShot.jpg" width="487" height="311" align="BOTTOM" border="0"></td>			</tr>			<tr>				<td width="348">					<p><font color="black"><b>Copyright (c) 1998, 1999 by Michael Gogins. All rights reserved.</b></font></p>					<p><font color="black"><b>Vineyard Productions<br>					150 West 95th Street, Number 4-D<br>					New York NY 10022</b></font></p>					<h4><a href="Silence.html">http://www.pipeline.com/~gogins<br>					</a><a href="mailto:gogins@nyc.pipeline.com">gogins@nyc.pipeline.com</a></td>			</tr>		</table>		<table border="0" cellpadding="8" cellspacing="16" width="100%">			<tr>				<td width="33%"><a href="#WhatIsAXCsound"><b>What are AXCsound and JCsound?</b></a></td>				<td width="27%"><a href="#WhatIsCsound"><b>What is Csound?</b></a></td>				<td width="40%"><a href="#HowCanIObtainAXCsound"><b>How can I obtain AXCsound and JCsound?</b></a></td>			</tr>			<tr>				<td width="33%"><a href="#downloading"><b>Download</b></a></td>				<td width="27%"><a href="#Setup"><b>Setup</b></a></td>				<td width="40%"><a href="#User"><b>User Interface</b></a></td>			</tr>			<tr>				<td width="33%"><a href="#ProgrammersGuide"><b>Programmer's Guide</b></a></td>				<td width="27%"><a href="#CSD"><b>Csound Structured Data Files</b></a></td>				<td width="40%"><a href="#APIs"><b>Application Programming Interfaces</b></a></td>			</tr>			<tr>				<td width="33%"><a href="#Realtime Command Flags"><b>Command Options</b></a></td>				<td width="27%"><a href="404(20).html"><b>Csound Help</b></a></td>				<td width="40%">&nbsp;</td>			</tr>		</table>		<table border="0" cellpadding="8" cellspacing="16">			<tr>				<td>					<h2><font color="black">What are AXCsound and JCsound?<a name="WhatIsAXCsound"></a></font></td>			</tr>			<tr>				<td>					<p><font color="black">AXCsound and JCsound are Csound, the widely used sound processing language, in a new and easier to use form. In fact, they are Csound in <i>several</i> new forms:</font></p>					<ol>						<li><font color="black">As a standalone Windows software synthesizer, which can be played in real time by a MIDI controller, used to render MIDI sequence files, or used to render Csound scores.</font>						<li><font color="black">As an ActiveX control, which can be plugged in as a software synthesis component in other software, like algorithmic composition programs.</font> It is easy, for example, to adapt public-domain fractal generating programs written in Visual Basic or Visual C++ to become algorithmic composition programs that use AXCsound as a synthesizer.						<li>As a Java package, JCsound, which can be plugged into Java software just as AXCsound can be plugged into Visual Basic. I use JCsound as the software synthesizer in Silence, my Java algorithmic composition system.					</ol>					<p><font color="black">AXCsound has the following features:</font></p>					<ul>						<li><font color="black">All the options, opcodes, and statements of the public-domain version of the Csound language.</font>						<li><font color="black">All capabilities of Gabriel Maldonado's version of public-domain Csound, including </font><a href="#Real-Time Play">real-time, low-latency audio output from MIDI input</a>.						<li><font color="black">All </font><a href="#Realtime Command Flags">command-line options</a><font color="black">, a complete Csound orchestra (&quot;orc&quot;) file, a complete Csound score (&quot;sco&quot;) file, and an input MIDI sequence file can be stored in one Csound structured data (&quot;csd&quot;) file. This can make it easier to manage Csound projects.</font>						<li><font color="black">A </font><a href="#User">graphical user interface</a><font color="black"> for running Csound, for opening and saving files, for setting options, and for editing orchestras and scores. The orchestra and score editors are integrated into the control and have a large capacity.</font>						<li><font color="black">AXCsound is a &quot;full control&quot; that can be embedded in OLE containers, put on Web pages such as this, or used as a software synthesis or signal processing component in other software, for example algorithmic composition programs.</font>						<li><font color="black">AXCsound exposes many </font><a href="#APIs">application programming interfaces</a><font color="black"> (APIs) for running Csound, getting and setting options, and creating and manipulating orchestras, scores, and arrangements. This amounts to providing complete programmatic control over Csound to other applications.</font>						<li><font color="black">AXCsound implements persistent storage, that is, if you embed an AXCsound control in a spreadsheet and save the spreadsheet, all the Csound data automatically gets saved (and restored) along with the spreadsheet data.</font>						<li><font color="black">AXCsound is completely re-entrant. That is, you can run it, render a soundfile, suspend it in the middle of rendering, resume where you left off, stop rendering, load another data file, and render the new file without having to reload the application.</font>						<li><font color="black">Rendering is done in a separate, higher-priority thread, which means that the user interface remains responsive during rendering, yet rendering remains efficient.</font>						<li><font color="black">The log messages that used to go to the console now go into a log window on the face of the control, where they remain visible for diagnosis after play has stopped.</font>					</ul>					<p><font color="black">JCsound has most of the same features as AXCsound, and in addition:</font></p>					<ul>						<li><font color="black">JCsound can run as a standalone Java application, JCsound.CsoundManager, which provides a graphical user interface similar to that of AXCsound.</font>						<li><font color="black">JCsound can be used as a component in other Java software, such as score generating programs.</font>					</ul>				</td>			</tr>			<tr>				<td>					<h3>Changes from Version 1.0</td>			</tr>			<tr>				<td>Version 1.0 of AXCsound had a more elaborate structured data format, which provided graphical user interface controls for individual command-line options, as well as an internal orchestra library with an arrangement page for selecting instrument definitions by name and assigning them to instrument numbers. Version 1.0 also had a test score page.<br>					<br>					The present version has dropped the individual option controls, the arrangement page, and the test score in favor of a simpler structured data format, which exactly reflects the conventions of the Csound language, and is easier to maintain</td>			</tr>			<tr>				<td>					<h3>Changes from Version 2.0</td>			</tr>			<tr>				<td>Both AXCsound and JCsound now use Gabriel Maldonado's DirectCsound source code, at Csound source code version 3.511. I simplified the number of changes and the amount of conditional compilation required to adapt Csound source code for these applications.<br>					<br>					Both AXCsound.AXCsound and JCsound.Csound are now contained in the same dynamic link library, JCsound_Csound.dll.<br>					<br>					I removed the property pages because I could not figure out how to paste into the edit boxes on property pages, and replaced them with tabs on the main control dialog. It is now possible to cut an instrument definition or score out of some other program or text editor and paste it into AXCsound.<br>					<br>					I removed the MathLink protocol from AXCsound and replaced it with command options designed to be used for importing algorithmically generated scores from external programs, including but not limited to Mathematica. This, however, makes it impossible to run AXCsound using a Csound style command line. It is now necessary to import an orchestra and score into AXCsound before rendering sound.<br>					<br>					I changed the XML tags in the Csound structured data file format to be consistent with ffitch's and Maldonado's sources.<br>					<br>					I removed all dependencies on atl.dll so that AXCsound will run on all computers with DirectX installed.<br>					<br>					I removed the bitmap from the face of the control because it did not display properly on high-resolution monitors.</td>			</tr>		</table>		<table border="0" cellpadding="8" cellspacing="16">			<tr>				<td>					<h2>What is Csound?<a name="WhatIsCsound"></a></td>			</tr>			<tr>				<td>Csound was written by Barry Vercoe of the Massachusetts Institute of Technology Media Lab, which owns the copyright. It is a &quot;C&quot; programming language version of the &quot;Music N&quot; type of software synthesizer first developed by Max Mathews at Bell Laboratories. Csound is currently one of the most powerful all-in-one programs in existence for music synthesis and signal processing. It is freely downloadable for instructional and research purposes from a number of Web sites, both as source code and as an executable program. You can view the <a href="404(20).html">Csound help file</a> here.<br>					<br>					Csound is essentially a compiler for two languages, an orchestra language and a score language. Csound reads the orchestra or &quot;orc&quot; file and the score or &quot;sco&quot; file, compiles them, and writes out a soundfile. Csound also can read MIDI sequences and input soundfiles. Csound can even read MIDI device input and produce real-time sound output through appropriate sound cards.<br>					<br>					Ever since the introduction of Csound, musicians, researchers, and programmers have contributed ideas and code to it. And they are continuing to contribute to it. Csound now features sampling synthesis, additive synthesis, subtractive synthesis, modal synthesis, granular synthesis, and physical modeling synthesis. Csound performs several types of time/frequency analysis and resynthesis, including the phase vocoder, filter bank analysis/additive resynthesis, and linear predictive coding. Csound can implement any sort of digital filter or delay line network to perform digital delay, chorusing, flanging, phasing, and reverberation. Csound can do fast convolution. Csound produces up to four channels of 32-bit, floating-point digital audio at any sampling rate, so it is more than adequate for high-resolution audio.<br>					<br>					If you have not used 32-bit floating-point sound before, you may be surprised at how much better it sounds than 16-bit sound, even on a 16-bit sound card, if your soundfile editing or playing software has a driver for it (<a href="http://www.syntrillium.com/">Cool Edit Pro</a> does). This is because floating-point samples not only have a far wider dynamic range, but also incur fewer rounding errors during sound processing, leading to lower noise and higher resolution.<br>					<br>					Csound's drawbacks are the other side of its strengths. Because Csound is a programming language, in order to use it, you must program it. This requires knowledge not only of programming, but also of digital audio, sound synthesis, and musical composition. In addition, the original Csound is a UNIX-style, command-line program without any graphical controls. Also, due to its flexibility and complexity, Csound is not as efficient for real-time operation as software synthesizers dedicated to sampling synthesis for MIDI.<br>					<br>					AXCsound does not magically do away with the need for programming in order to use Csound. However, AXCsound <i>does</i> build a bridge between the abstract, programmable power of state-of-the-art academic computer music software, and the graphical interfaces, ease of use, and plugin architecture of state-of-the-art commercial music software.</td>			</tr>			<tr>				<td>					<h2>Command Options<a name="Realtime Command Flags"></a></td>			</tr>			<tr>				<td>					<h3>Command Line</h3>					<p>Both AXCsound and JCsound.CsoundManager will attempt to import all files listed on the command line. In addition, the &quot;<font face="Courier New, Courier">-deleteNotes</font>&quot; option will remove all notes so far exported, but leave function definitions (&quot;f&quot; statements) alone; and the &quot;<font face="Courier New, Courier">-saveAs</font>&quot; option will save all data so far imported into the next named file. Here are some sample command lines and what they might be used for:</p>					<p>					<table border="0" cellpadding="2" cellspacing="6">						<tr>							<td width="37%" bgcolor="#FFFFCC">								<pre>AXCsound</pre>							</td>							<td width="559" bgcolor="#CCCCFF">Run AXCsound. The user will manually open files.</td>						</tr>						<tr>							<td width="37%" bgcolor="#FFFFCC">								<pre>AXCsound Score.csd</pre>							</td>							<td width="559" bgcolor="#CCCCFF">Open the Csound structured data file Score.csd.</td>						</tr>						<tr>							<td width="37%" bgcolor="#FFFFCC">								<pre>AXCsound Orchestra.orc Score.sco</pre>							</td>							<td width="559" bgcolor="#CCCCFF">Import a regular Csound orchestra file and a regular Csound score file.</td>						</tr>						<tr>							<td width="37%" bgcolor="#FFFFCC">								<pre>AXCsound Template.csd -deleteNotes Generated.sco -saveAs New.csd</pre>							</td>							<td width="559" bgcolor="#CCCCFF">Open a template file containing command options, instrument definitions, and function definitions; delete any existing notes in that file; import a Csound score file that was generated by an external algorithmic composition program; and save the resulting file to <font face="Courier New, Courier">New.csd</font>.</td>						</tr>					</table>					</p>					<h3>Command Options</h3>					<p>These options are set on the command page of AXCsound or JCsound.CsoundManager.</p>					<p><tt>Csound Version 3.482 (Sep 13 1998)<br>					Usage: csound [-flags] orchfile scorefile<br>					Legal flags are:<br>					-U unam run utility program unam<br>					-C use Cscore processing of scorefile<br>					-I I-time only orch run<br>					-n no sound onto disk<br>					-i fnam sound input filename<br>					-o fnam sound output filename<br>					-b N sample frames (or -kprds) per software sound I/O buffer<br>					-B N samples per hardware sound I/O buffer<br>					-A create an AIFF format output soundfile<br>					-W create a WAV format output soundfile<br>					-h no header on output soundfile<br>					-c 8-bit signed_char sound samples<br>					-a alaw sound samples<br>					-8 8-bit unsigned_char sound samples<br>					-u ulaw sound samples<br>					-s short_int sound samples<br>					-l long_int sound samples<br>					-f float sound samples<br>					-r N orchestra srate override<br>					-k N orchestra krate override<br>					-v verbose orch translation<br>					-m N tty message level. Sum of: 1=note amps, 2=out-of-range msg, 4=warnings<br>					-d suppress all displays<br>					-g suppress graphics, use ascii displays<br>					-G suppress graphics, use Postscript displays<br>					-S score is in Scot format<br>					-x fnam extract from score.srt using extract file 'fnam'<br>					-t N use uninterpreted beats of the score, initially at tempo N<br>					-L dnam read Line-oriented realtime score events from device 'dnam'<br>					-M dnam read MIDI realtime events from device 'dnam'<br>					-F fnam read MIDIfile event stream from file 'fnam'<br>					-P N MIDI sustain pedal threshold (0 - 128)<br>					-R continually rewrite header while writing soundfile (WAV/AIFF)<br>					-H# print a heartbeat style 1, 2 or 3 at each soundfile write<br>					-N notify (ring the bell) when score or miditrack is done<br>					-T terminate the performance when miditrack is done<br>					-D defer GEN01 soundfile loads until performance time<br>					-z List opcodes in this version<br>					-- fnam log output to file<br>					-+j num console number of text rows (default 25)<br>					-+J num console number of text columns (default 80)<br>					-+K num enable MIDI IN. 'num' (optional) = MIDI IN port device id number<br>					-+q num WAVE OUT device id number (use only if more WAVE devices are installed)<br>					-+p num number of WAVE OUT buffers (default 4; max. 40)<br>					-+O suppress all console text output for better realtime performance<br>					-+e allow any sample rate (warn: not all sndcards support non-standard sr)<br>					-+y don't wait for keypress on exit<br>					-+E allow graphic display for WCSHELL by Riccardo Bianchini<br>					-+Q num enable MIDI OUT. 'num' (optional) = MIDI OUT port device id number<br>					-+Y suppress realtime WAVE OUT for better MIDI OUT timing performance<br>					-+* yield control to system for better multitasking<br>					-+/ enable script file command line<br>					-+X num enable DirectSound audio out (num is optional)<br>					flag defaults: csound -s -otest -b16384 -B16384 -m7 -P128<br>					<br>					</tt>For more information, see the <a href="404(18).html">Csound manual</a>.</p>					<h3>Real-Time Play<a name="Real-Time Play"></a></h3>					<p>You need a really, really fast computer to get much use out of Csound in real time. Get the fastest one you can afford. Even with a fast computer, you may not be able to synthesize more than one complex, high-resolution voice at a time, or a few simple, low-resolution voices. Of course, as personal computer performance continues to double about every 18 months, in a few years Csound should provide as many voices as the most powerful of today's hardware synthesizers, with much greater musical power.</p>					<p>For <i>low-latency</i> real-time playing from a MIDI controller, you must use MIDI port input (the &quot;<tt>-+K</tt>&quot; option) and DirectSound audio port output (the &quot;<tt>-+X</tt>&quot; option). Also, you can try setting the &quot;<tt>-d</tt>&quot; or &quot;<tt>-+O</tt>&quot; options to suppress all log messages for improved responsiveness.</p>					<p>The various buffer sizes and sampling periods should be synchronized at a short period. Set <tt>ksmps</tt>, the <tt>-b</tt> option, and the <tt>-B</tt> option all to values that, at your chosen audio sampling rate, yield a latency of no more than 20 milliseconds, which is about the largest delay that is tolerable for live performance. The <tt>-b</tt> and <tt>-B</tt> options should have the same value, which should be an integral multiple of <tt>ksmps</tt>. For example, to obtain 20 milliseconds latency at <tt>sr = 41000</tt>, use <tt>ksmps = 82, -b820 -B820</tt>.</p>					<p>To make Csound keep running even when there are no MIDI events, use the &quot;<tt>f0</tt>&quot; statement in your score, and set its value to the number of seconds you need Csound to run. For example, &quot;<tt>f0 300</tt>&quot; means Csound will render for 5 minutes, or until you hit the stop button, whichever comes first.</td>			</tr>		</table>		<table border="0" cellpadding="8" cellspacing="16">			<tr>				<td>					<h2>How can I obtain AXCsound and JCsound?<a name="HowCanIObtainAXCsound"></a></td>			</tr>			<tr>				<td>AXCsound and JCsound have a two part license. The Csound source code is copyright (c) 1986 and 1992 by Massachusetts Institute of Technology Media Lab, and is freely available for academic or research use. In practice, people have been making and selling music made with publicly available Csound for years. Contributions to Csound are generally copyrighted by their authors, but freely distributed. The Csound source code in AXCsound is based on <a href="http://www.agora.stm.it/G.Maldonado/home2.htm">Gabriel Maldonado</a>'s real-time version, DirectCsound 2.1, and includes my code for plugin opcodes, but is otherwise identical with John ffitch's sources, which are the canonical version of <a href="http://www.leeds.ac.uk/music/Man/c_front.html">public-domain Csound</a>. Maldonado's sources were only changed as required for re-entrant operation and linking with AXCsound. No changes were made in the digital signal processing code, which is essentially the same as in John ffitch's version.<br>					<br>					Many thanks to Professor Barry Vercoe, the original author of Csound; to Mr. Maldonado; to Mr. ffitch; and to all the others who have contributed to this wonderful instrument over the years.<br>					<br>					The AXCsound and JCsound source code, as distinct from the Csound source code, is copyright (c) 1998 and 1999 by Michael Gogins. It is licensed under the terms of the <a href="http://www.fsf.org/copyleft/gpl.html">GNU General Public License</a>. You are free to use AXCsound and JCsound, and their source code, without charge for any purpose, or to modify it, provided only that your executable code and source code also are licensed under the terms of the GNU General Public License, and contain a clearly visible statement to that effect.<br>					<br>					You can obtain AXCsound and JCsound by <a name="downloading"></a>downloading the <a href="http://www.pipeline.com/~gogins/Csound/AXCsoundAll.zip">AXCsoundAll</a> archive, free of charge. It consists of one zip file, which contains the files listed below, as well as all source code.<br>					<br>					If you feel moved to support my efforts in developing public-domain music software, I suggest you send a contribution of $50 (more is acceptable), payable to Michael Gogins, at the address above.<br>					<br>					As with any new software, there are bugs. Please <a href="mailto:gogins@nyc.pipeline.com">email me</a> if you find any and I will try to deal with them and get back to you.<br>					<table border="0" cellpadding="2" cellspacing="6" width="100%">						<caption>							<h3><br>							Contents of the AXCsound Distribution</caption>						<tr>							<td width="1%" bgcolor="#FFFFCC"><b>JCsound_Csound.dll</b></td>							<td width="67%" bgcolor="#CCCCFF">Dynamic link library that implements not only AXCsound.AXCsound.1, the ActiveX Csound control, but also JCsound.Csound, the Java interface to Csound.</td>						</tr>						<tr>							<td width="1%" bgcolor="#FFFFCC"><b>AXCsound.tlb</b></td>							<td width="67%" bgcolor="#CCCCFF">Type library that declares the methods and properties of the AXCsound control for use by other languages.</td>						</tr>						<tr>							<td width="1%" bgcolor="#FFFFCC"><b>AXCsound.exe</b></td>							<td width="67%" bgcolor="#CCCCFF">Standalone executable launcher for JCsound_Csound.dll.</td>						</tr>						<tr>							<td width="1%" bgcolor="#FFFFCC"><b>AXCsoundAll.dsw</b></td>							<td width="67%" bgcolor="#CCCCFF">Microsft Visual C++ 6.0 Developer's Studio Workspace file for all parts of the AXCsound project.</td>						</tr>						<tr>							<td width="1%" bgcolor="#FFFFCC"><b>Trapped.csd</b></td>							<td width="67%" bgcolor="#CCCCFF">A demonstration &quot;csd&quot; file for AXCsound, containing Richard Boulanger's composition &quot;Trapped in Convert&quot;.</td>						</tr>						<tr>							<td width="1%" bgcolor="#FFFFCC"><b>Bach.csd</b></td>							<td width="67%" bgcolor="#CCCCFF">A demonstration &quot;csd&quot; file for AXCsound, containing a Bach fugue, which can play in real time on 233 MHz Pentiums or faster computers.</td>						</tr>						<tr>							<td width="1%" bgcolor="#FFFFCC"><b>RTMidi.csd</b></td>							<td width="67%" bgcolor="#CCCCFF">A demonstration &quot;csd&quot; file for AXCsound, set up with a guitar patch to be played in real time by a MIDI controller on 233 MHz Pentiums or faster computers.</td>						</tr>						<tr>							<td width="1%" bgcolor="#FFFFCC"><b>Xanadu.csd</b></td>							<td width="67%" bgcolor="#CCCCFF">A demonstration &quot;csd&quot; file for AXCsound, containing the short version of Joseph T. Kung's composition &quot;Xanadu,&quot; showing the lush textures that can be synthesized using Csound.</td>						</tr>						<tr>							<td width="1%" bgcolor="#FFFFCC"><b>AXCsound.htm</b></td>							<td width="67%" bgcolor="#CCCCFF">This HTML page of documentation.</td>						</tr>						<tr>							<td width="1%" bgcolor="#FFFFCC"><b>Maldonado</b></td>							<td width="67%" bgcolor="#CCCCFF">Source code. Changes from Maldonado's and ffitch's sources are <tt>#ifdef</tt>'d <tt>CSOUND_REENTRANT_API</tt>.</td>						</tr>						<tr>							<td width="1%" bgcolor="#FFFFCC"><b>JCsound.Csound.java<br>								JCsound.CsoundManager.java</b></td>							<td width="67%" bgcolor="#CCCCFF">Java source code for JCsound.</td>						</tr>						<tr>							<td width="1%" bgcolor="#FFFFCC"><b>JCsound.Csound.class<br>								JCsound.CsoundManager.class</b></td>							<td width="67%" bgcolor="#CCCCFF">Compiled Java classes for JCsound.</td>						</tr>						<tr>							<td width="1%" bgcolor="#FFFFCC"><a href="404(17).html"><b>index.html</b></a></td>							<td width="67%" bgcolor="#CCCCFF">Javadoc documentation for the JCsound package.</td>						</tr>					</table>				</td>			</tr>		</table>		<table border="0" cellpadding="8" cellspacing="16">			<tr>				<td>					<h2>Setup<a name="Setup"></a></td>			</tr>			<tr>				<td>					<p>Unpack the AXCsound.zip archive into a new directory, for example &quot;<tt>C:\Program Files\AXCsound</tt>&quot;.</p>					<p>Before use, AXCsound must be registered with Windows. Run &quot;<tt>RegSvr32 JCsound_Csound.dll</tt>&quot; at the Windows command line.</p>					<p>To use JCsound, you need Java Development Kit 1.1.7 and Java Foundation Classes 1.1 beta 3 or higher, or Java Development Kit 1.2. JCsound_Csound.dll must be in your computer's executable PATH. You will need to write a batch file to execute the JCsound.Csound program. The following example can be adapted for your computer:</p>					<pre>rem Change to C drive.c:rem Change to JCsound directory.cd \mkg\Csound\JCsoundrem Add the parent directory to the classpath, rem and execute the JCsound.CsoundManager class,rem with command options, if any.c:\jdk1.2\bin\java -cp ..;.; JCsound.CsoundManager %1 %2 %3 %4 %5 %6 %7 %8</pre>					<p>JCsound_Csound.dll requires DirectX. If your computer does not have it, you must install the DirectX runtime. It comes with Windows 98, or it can be downloaded directly from Microsoft without charge.</p>					<p>For realtime audio and MIDI input and output, you must of course also install the appropriate sound card and/or MIDI interface card on your computer.</p>					<p>To test functionality, run AXCsound.exe, verify that the AXCsound Control appears, verify that the Bach.csd file is loaded, and click on the &quot;Play&quot; button. After a few seconds, you should hear the piece playing.</p>					<p>For best results, JCsound_Csound.dll, AXCsound.exe, and AXCsound.htm should be located in the same directory.</td>			</tr>		</table>		<table border="0" cellpadding="8" cellspacing="16">			<tr>				<td>					<h2>User Interface<a name="User"></a></td>			</tr>			<tr>				<td>					<p>The primary AXCsound user interface consists of a tabbed dialog form.</p>					<h4>Command Tab</h4>					<p>The Command tab shows buttons, a filename box, a command line box, and a log message box. The buttons are:					<h3></h3>					<h4></h4>					<p>					<table border="0" cellpadding="4" cellspacing="6" width="100%">						<tr>							<td width="17%" bgcolor="#FFFFCC"><b>Open</b></td>							<td bgcolor="#CCCCFF">Open a new &quot;csd&quot; file, replacing any existing data.</td>						</tr>						<tr>							<td width="17%" bgcolor="#FFFFCC"><b>Import</b></td>							<td bgcolor="#CCCCFF">Import, adding the new data without destroying any existing data, a &quot;csd&quot; file; a Csound &quot;sco&quot; or &quot;orc&quot; file; or a MIDI &quot;mid&quot; file.</td>						</tr>						<tr>							<td width="17%" bgcolor="#FFFFCC"><b>Save</b></td>							<td bgcolor="#CCCCFF">Save all parts of the Csound project to the existing &quot;csd&quot; file.</td>						</tr>						<tr>							<td width="17%" bgcolor="#FFFFCC"><b>Save as</b></td>							<td bgcolor="#CCCCFF">Save all parts of the Csound project in one &quot;csd&quot; file, or export the sco, orc, or MIDI file parts selectively, to a selected file.</td>						</tr>						<tr>							<td width="17%" bgcolor="#FFFFCC"><b>Play/stop spin control</b></td>							<td bgcolor="#CCCCFF">The right button causes AXCsound to begin rendering sound with the current settings, orchestra, and score. The left button causes the rendering to stop.</td>						</tr>						<tr>							<td width="17%" bgcolor="#FFFFCC"><b>Pause</b></td>							<td bgcolor="#CCCCFF">Pause the rendering thread, if any.</td>						</tr>						<tr>							<td width="17%" bgcolor="#FFFFCC"><b>Resume</b></td>							<td bgcolor="#CCCCFF">Resume rendering, if paused.</td>						</tr>						<tr>							<td width="17%" bgcolor="#FFFFCC"><b>Open sound</b></td>							<td bgcolor="#CCCCFF">Opens the output soundfile, if any, using whatever sound player or editor is registered to execute the shell &quot;open&quot; command for the soundfile type.</td>						</tr>					</table>					Orchestra Tab					<p>The &quot;Orchestra&quot; tab allows the user to create and edit the <tt>&lt;Orchestra&gt;</tt> section of the structured data, which can include a complete standard Csound orchestra file.It is possible to paste from the Windows clipboard into the edit box.</p>					<h4>Score Tab</h4>					<p>The &quot;Score&quot; tab allows the user to create and edit the <tt>&lt;Score&gt;</tt> section of the structured data, which can include a complete Csound standard numerical score file. The &quot;Clear score&quot; button removes all text from the <tt>&lt;Score&gt;</tt> section. The &quot;Clear notes only&quot; removes only note (&quot;i&quot;) statements from the score, leaving function (&quot;f&quot;) statements and comments (&quot;:&quot;). It is possible to paste from the Windows clipboard into the edit box. The buttons are:</p>					<p>					<table border="0" cellpadding="4" cellspacing="6">						<tr>							<td width="17%" bgcolor="#FFFFCC"><b>Clear score</b></td>							<td bgcolor="#CCCCFF">Remove all text from the score.</td>						</tr>						<tr>							<td width="17%" bgcolor="#FFFFCC"><b>Clear notes only</b></td>							<td bgcolor="#CCCCFF">Remove all text from the score, with the exception of &quot;f&quot; or function table statements, which are not removed.</td>						</tr>					</table>					</p>					<h4>Copyright Tab</h4>					<p>Presents the copyright and credits for AXCsound.</td>			</tr>		</table>		<table border="0" cellpadding="8" cellspacing="16">			<tr>				<td>					<h2>Programmer's Guide<a name="ProgrammersGuide"></a></td>			</tr>			<tr>				<td>					<p>JCsound documentation generated by javadoc can be found <a href="404(17).html">here</a>. The AXCsound control's COM interface, IAXCsound, is briefly described <a href="#APIs">here</a>.</p>					<p>The AXCsound control is designed to be used in a wide variety of ways.</p>					<ul>						<li>In the form of AXCsound.exe, as a standalone launcher for Csound.						<li>In the form of the AXCsound control, embedded in other software such as MIDI sequencers, hard disk editing and recording software, algorithmic composition software, and so on, as a plugin component version of Csound, providing programmatic control of Csound to the container application. In this case, the programmer will typically create a dialog box containing the AXCsound control that can be opened using a menu command from the container application, and the AXCsound control will be preloaded with a structured data (&quot;csd&quot;) file that sets up AXCsound as a driver for the container.						<li>In the form of the AXCsound control used without a window, as a plugin component providing only programmatic control of Csound. In this case the programmer will use the AXCsound control's APIs to implement custom functionality or even a custom user interface, e.g. to provide a limited set of options, to select from a menu of predetermined structured data (&quot;csd&quot;) files using a list box, or to start and stop a single AXCsound setup using a button or check box. The AXCsound control will be programatically loaded with a structured data (&quot;csd&quot;) file to act as a driver for the container application.						<li>Embedded in a spreadsheet, Web page, or other document as a means of storing and rendering a score, performance setup, or educational demonstration.					</ul>					<p>In Visual C++, the AXCsound control can be plugged into an application as follows:</p>					<ol>						<li>In Developer Studio, in the &quot;Project&quot; menu, in the &quot;Add To Project&quot; submenu, select the &quot;Components and Controls&quot; dialog.						<li>In the &quot;Components and Controls Gallery&quot; browser, open the &quot;Registered Components and Controls&quot; folder, and select &quot;AXCsound Control&quot;.						<li>Click on the &quot;Insert&quot; button, and when asked &quot;Insert this component?&quot;, click on the &quot;OK&quot; button. In the &quot;Confirm Classes&quot; dialog, click on the &quot;OK&quot; button.						<li>An icon for the AXCsound control should now appear on the tool palette in Developer Studio's &quot;Resource View&quot;. Drag and drop the icon to add the control to your dialog. You may have to determine the proper size for the control by trial error after building your application.						<li>Press CTRL-W to invoke the Class Wizard. Select the &quot;Member Variables&quot; tab. Select the name of the AXCsound control resource, and click on the &quot;Add Variable...&quot; button. Enter a name for the member variable that will encapsulate the AXCsound control, and click on the &quot;OK&quot; button. Also click on the &quot;OK&quot; button of the Class Wizard dialog.						<li>The AXCsound control will now function in the context of the dialog you have created. You can also use the member variable's methods and properties, described <a href="#APIs">below</a>, to programmatically control Csound.					</ol>					<p>Consult the documentation for other languages or development tools for instructions on how to import the AXCsound control into a container application. The AXCsound control has been tested with Microsoft Visual J++ version 6.0 and should work with Microsoft Visual Basic 5.0 or any Visual Basic for Applications application.</td>			</tr>			<tr>				<td>					<h3>Plugin Opcodes</td>			</tr>			<tr>				<td>AXCsound can use plugin opcodes, that is, opcodes contained in dynamic link libraries that are loaded at run-time by AXCsound and plugged into its opcode dispatch table (the <tt>oentry[]</tt> table) along with Csound's regular predefined opcodes. Therefore, plugin opcodes developed by one musician can immediately be used in AXCsound by any other musician. All that needs to be done is to copy the opcode library, which must have the filename extension &quot;opc&quot;, into either the AXCsound directory, or into another directory named by the OPCODEDIR environment variable.<br>					<br>					This facility is a bit different from the DSP plugins used by commercial music software, although it works in essentially the same way, because each plugin opcode becomes a new word in Csound's orchestra language. This makes them rather more flexible and powerful than the menu-driven plugins found in other software.</td>			</tr>			<tr>				<td>					<h3>Developing New Plugin Opcodes</td>			</tr>			<tr>				<td>					<p>Each opcode library may contain any number of new opcodes. Each library must define and export the following function, which Csound calls to register its opcodes:</p>					<pre>/* *      Signature for opcode registration function. *      Both Csound and opcode must be compiled  *      with 8 byte structure member alignment. */__declspec(dllexport) long (csOpcodeRegisterType)(//   Used to iterate through all opcodes in a library.	long         opcodeSubscript,	//   Csound audio sampling rate in Hz.	float        *samplingRateIn,	//   Csound control sampling rate in Hz.	float        *kontrolRateIn,	//   Control samples per audio sample.	int          *audioSamplesPerKontrolSampleIn,	//   Channels in the soundfile.	int          *channelCountIn,	//   Address of the function table array in Csound.	FUNC         *functionTablesIn[],	//   Address of the opcode's dispatch table entry,	//   to be filled in by the opcode library.	OENTRY       *opcodeEntryOut);</pre>					<p>This <tt>csOpcodeRegister</tt> function either registers a different opcode for each <tt>opcodeSubscript </tt>and returns 1, or it fails and returns 0. The opcode library is responsible for filling in the the arguments to <tt>csOpcodeRegister</tt>, in particular the members of the <tt>OENTRY </tt>structure, especially the addresses of the opcode's signal processing functions.</p>					<p>Except for the <tt>csOpcodeRegister</tt> function and being compiled in a dynamic link library, plugin opcodes are designed exactly the same way as regular Csound opcodes.</p>					<p>Essentially, <tt>OENTRY </tt>is the virtual base class for Csound opcodes. The <tt>OENTRY </tt>structure contains templates for the return types and argument types of 3 virtual functions, which are called on opcode initialization, on every k or control sample, and on every a or audio sample. The <tt>OENTRY </tt>structure also contains references to the pfields for the note being processed by the opcode, and to the audio signal output array.</p>					<p>See the <a href="404(19).html">Csound manual</a> for more information on how to create new opcodes.</td>			</tr>		</table>		<table border="0" cellpadding="8" cellspacing="16">			<tr>				<td>					<h2>Csound Structured Data Files<a name="CSD"></a></td>			</tr>			<tr>				<td>					<p>The AXCsound control stores all inputs in a tag-delimited, structured data format, which can be saved in a &quot;csd&quot; text file. The data format is a simplified form of extensible markup language (XML) in which each markup tag occurs on a separate line. Each element of data is prefaced by a start (&lt;&gt;) tag and finished with an end (&lt;/&gt;) tag, and sections can be nested hierarchically. The Csound tags (<b>boldface</b>) are as follows, with explanatory comments (<i>italics</i>) and sample data:</p>					<pre><b><tt>&lt;CsoundSynthesizer&gt;&lt;CsOptions&gt;</tt></b><tt>csound -RWm7o test.wav test.orc test.sco<b>&lt;/CsOptions&gt;&lt;CsInxtruments&gt;</b><i>; Orchestra statements.</i>sr 44100kr 441ksmps 100nchnls 2<i>; Instrument definitions.</i>instr 1 ;Toot1endininstr 2 ;Toot2endin<b>&lt;/CsInxtruments&gt;&lt;CsScore&gt;</b><i>; Standard Csound function (&quot;f&quot;) statements, note (&quot;i&quot;) statements, or comments (&quot;;&quot;).</i>f 1 2 3 i 1 2 3 4<b>&lt;/CsScore&gt;&lt;CsMidifile&gt;</b><i>; Standard MIDI input file (for the &quot;-M&quot; flag).</i><b>&lt;Size&gt;</b>48392<b>&lt;/Size&gt;</b>... (binary data)<b>&lt;/CsMidifile&gt;&lt;/CsoundSynthesizer&gt;</b></tt></pre>				</td>			</tr>		</table>		<table border="0" cellpadding="8" cellspacing="16">			<tr>				<td>					<h2>AXCsound Application Programming Interfaces<a name="APIs"></a></td>			</tr>			<tr>				<td>					<p>The following very briefly describes AXCsound's COM interfaces. Javadoc pages describing the JCsound package can be found <a href="404(17).html">here</a>. See <a href="404(20).html"><i><b>Csound: A Manual for the Audio Processing System</b></i></a> for detailed instructions on how to use Csound.</p>					<p>The complete list of COM interfaces exposed by the AXCsound control is as follows. Windows requires that most of these interfaces be implemented to provide all features of a full ActiveX control. Some interfaces are not completely implemented in AXCsound.</p>					<pre><tt>	COM_INTERFACE_ENTRY(IAXCsound)	COM_INTERFACE_ENTRY(IDispatch)	COM_INTERFACE_ENTRY(IViewObjectEx)	COM_INTERFACE_ENTRY(IViewObject2)	COM_INTERFACE_ENTRY(IViewObject)	COM_INTERFACE_ENTRY(IOleInPlaceObjectWindowless)	COM_INTERFACE_ENTRY(IOleInPlaceObject)	COM_INTERFACE_ENTRY2(IOleWindow, IOleInPlaceObjectWindowless)	COM_INTERFACE_ENTRY(IOleInPlaceActiveObject)	COM_INTERFACE_ENTRY(IOleControl)	COM_INTERFACE_ENTRY(IOleObject)	COM_INTERFACE_ENTRY(IPersistStreamInit)	COM_INTERFACE_ENTRY2(IPersist, IPersistStreamInit)	COM_INTERFACE_ENTRY(IConnectionPointContainer)	COM_INTERFACE_ENTRY(ISpecifyPropertyPages)	COM_INTERFACE_ENTRY(IQuickActivate)	COM_INTERFACE_ENTRY(IPersistStorage)	COM_INTERFACE_ENTRY(IDataObject)	COM_INTERFACE_ENTRY(IProvideClassInfo)	COM_INTERFACE_ENTRY(IProvideClassInfo2)</tt></pre>					<p>AXCsound provides a dual interface, so the main interfaces of the control are <tt>IAXCsound</tt> (the custom interface) and <tt>IDispatch</tt> (the dispatch interface). The following lists the methods and properties of the IAXCsound interface, in C++ syntax, as they would appear in a proxy generated from the type library.</p>					<p>All methods return an <tt>HRESULT</tt>, that is, a long. Property values are returned by address in the argument. Most methods return <tt>S_OK</tt> for success, and some other value for failure. In Visual C++, use the <tt>SUCCEEDED</tt> macro to test the return value. Note that rendering takes place in a separate thread. Methods are provided for starting, suspending, resuming, and stopping the rendering thread.</td>			</tr>			<tr>				<td>					<pre>    IAXCsound : public IDispatch    {    public:        virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_AutoSize(             /* [in] */ VARIANT_BOOL vbool) = 0;                virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_AutoSize(             /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pbool) = 0;                virtual /* [id][propput] */ HRESULT STDMETHODCALLTYPE put_Caption(             /* [in] */ BSTR strCaption) = 0;                virtual /* [id][propget] */ HRESULT STDMETHODCALLTYPE get_Caption(             /* [retval][out] */ BSTR __RPC_FAR *pstrCaption) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Play( void) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Pause( void) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Resume( void) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Stop( void) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Open(             BSTR Filename) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Import(             BSTR Filename) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Save(             BSTR Filename) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE Export(             BSTR Filename) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE OpenSound( void) = 0;                virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Filename(             /* [retval][out] */ BSTR __RPC_FAR *pVal) = 0;                virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Filename(             /* [in] */ BSTR newVal) = 0;                virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Command(             /* [retval][out] */ BSTR __RPC_FAR *pVal) = 0;                virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Command(             /* [in] */ BSTR newVal) = 0;                virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OrcFilename(             /* [retval][out] */ BSTR __RPC_FAR *pVal) = 0;                virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScoFilename(             /* [retval][out] */ BSTR __RPC_FAR *pVal) = 0;                virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_MidiFilename(             /* [retval][out] */ BSTR __RPC_FAR *pVal) = 0;                virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_OutputSoundfileName(             /* [retval][out] */ BSTR __RPC_FAR *pVal) = 0;                virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Score(             /* [retval][out] */ BSTR __RPC_FAR *pVal) = 0;                virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Score(             /* [in] */ BSTR newVal) = 0;                virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScoreLine(             /* [in] */ long Index,            /* [retval][out] */ BSTR __RPC_FAR *pVal) = 0;                virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ScoreLine(             /* [in] */ long Index,            /* [in] */ BSTR newVal) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddScoreLine(             BSTR Note) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddNote10(             double p1,            double p2,            double p3,            double p4,            double p5,            double p6,            double p7,            double p8,            double p9,            double p10) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddNote9(             double p1,            double p2,            double p3,            double p4,            double p5,            double p6,            double p7,            double p8,            double p9) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddNote8(             double p1,            double p2,            double p3,            double p4,            double p5,            double p6,            double p7,            double p8) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddNote7(             double p1,            double p2,            double p3,            double p4,            double p5,            double p6,            double p7) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddNote6(             double p1,            double p2,            double p3,            double p4,            double p5,            double p6) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddNote5(             double p1,            double p2,            double p3,            double p4,            double p5) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddNote4(             double p1,            double p2,            double p3,            double p4) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE AddNote3(             double p1,            double p2,            double p3) = 0;                virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_ScoreLineCount(             /* [retval][out] */ long __RPC_FAR *pVal) = 0;                virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_ScoreLineCount(             /* [in] */ long newVal) = 0;                virtual /* [helpstring][id][propget] */ HRESULT STDMETHODCALLTYPE get_Orchestra(             /* [retval][out] */ BSTR __RPC_FAR *pVal) = 0;                virtual /* [helpstring][id][propput] */ HRESULT STDMETHODCALLTYPE put_Orchestra(             /* [in] */ BSTR newVal) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveAll( void) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveCommand( void) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveOrchestra( void) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveScore( void) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE RemoveScoreExceptFunctions( void) = 0;                virtual /* [helpstring][id] */ HRESULT STDMETHODCALLTYPE UpdateView( void) = 0;            };</pre>				</td>			</tr>		</table>	</body></html>