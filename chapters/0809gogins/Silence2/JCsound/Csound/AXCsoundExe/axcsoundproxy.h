#if !defined(AFX_AXCSOUNDPROXY_H__A3EB8F43_2E9E_11D2_8F6B_006008028B07__INCLUDED_)
#define AFX_AXCSOUNDPROXY_H__A3EB8F43_2E9E_11D2_8F6B_006008028B07__INCLUDED_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CAXCsoundProxy wrapper class

class CAXCsoundProxy : public CWnd
{
protected:
	DECLARE_DYNCREATE(CAXCsoundProxy)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x18cd11d, 0x20de, 0x11d2, { 0x91, 0x7d, 0x0, 0xa0, 0xcc, 0x30, 0xc2, 0x76 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:

// Operations
public:
	void Play();
	void Pause();
	void Cue(double Time);
	void Resume();
	void Stop();
	void TestPlay(LPCTSTR InstrumentName);
	void TestStop();
	void Open(LPCTSTR Filename);
	void Import(LPCTSTR Filename);
	void Save(LPCTSTR Filename);
	void Export(LPCTSTR Filename);
	void ExportForPlay();
	void OpenSound();
	CString GetCommand();
	void SetCommand(LPCTSTR lpszNewValue);
	CString GetOrcfile();
	void SetOrcfile(LPCTSTR lpszNewValue);
	CString GetScofile();
	void SetScofile(LPCTSTR lpszNewValue);
	CString GetOption(LPCTSTR Option);
	void SetOption(LPCTSTR Option, LPCTSTR lpszNewValue);
	long GetSr();
	void SetSr(long nNewValue);
	long GetKsmps();
	void SetKsmps(long nNewValue);
	long GetNchnls();
	void SetNchnls(long nNewValue);
	CString GetOtherOptions();
	void SetOtherOptions(LPCTSTR lpszNewValue);
	CString GetScore();
	void SetScore(LPCTSTR lpszNewValue);
	CString GetScoreLine(long Index);
	void SetScoreLine(long Index, LPCTSTR lpszNewValue);
	void AddScoreLine(LPCTSTR Note);
	void AddNote10(double p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9, double p10);
	void AddNote9(double p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8, double p9);
	void AddNote8(double p1, double p2, double p3, double p4, double p5, double p6, double p7, double p8);
	void AddNote7(double p1, double p2, double p3, double p4, double p5, double p6, double p7);
	void AddNote6(double p1, double p2, double p3, double p4, double p5, double p6);
	void AddNote5(double p1, double p2, double p3, double p4, double p5);
	void AddNote4(double p1, double p2, double p3, double p4);
	void AddNote3(double p1, double p2, double p3);
	long GetScoreLineCount();
	void SetScoreLineCount(long nNewValue);
	CString GetOrchestra();
	void SetOrchestra(LPCTSTR lpszNewValue);
	CString GetInstrument(LPCTSTR Name);
	void SetInstrument(LPCTSTR Name, LPCTSTR lpszNewValue);
	CString GetInstrumentName(long Index);
	long GetInstrumentCount();
	void ClearInstruments();
	void ClearInstrument(LPCTSTR Name);
	CString GetArrangement(long Index);
	void SetArrangement(long Index, LPCTSTR lpszNewValue);
	long GetArrangementCount();
	void SetArrangementCount(long nNewValue);
	void ClearArrangement(long Index);
	CString GetTestScore();
	void SetTestScore(LPCTSTR lpszNewValue);
	void ClearAll();
	void ClearNotesButNotFunctions();
	CString GetFilename();
	void SetFilename(LPCTSTR lpszNewValue);
	void ClearOption(LPCTSTR Option);
	CString GetTestInstrument();
	void SetTestInstrument(LPCTSTR lpszNewValue);
	CString GetFunctions();
	CString GetOutputSoundfile();
	void SetOutputSoundfile(LPCTSTR lpszNewValue);
	void ClearAllOptions();
	long GetInstrumentIndex(LPCTSTR Name);
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Developer Studio will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_AXCSOUNDPROXY_H__A3EB8F43_2E9E_11D2_8F6B_006008028B07__INCLUDED_)
