<CsoundSynthesizer>
<CsOptions>
soundfileFormat = -W
sampleFormat = -f
OrchestraFilename = C:\Temp.orc
ScoreFilename = C:\Temp.sco
outputSoundfileName = Csound.wav
ksmps = 150
ExtraOptions = -+X1 -+K0 -b150 -B150
</CsOptions>
<CsArrangement>
Bergeman 3
Cook Metal
Cook waveguide plucked string
FM Low Index
</CsArrangement>
<CsInstruments>
sr = 22050
kr = 147
ksmps = 150
nchnls = 2


instr 1 ; Schottstaedt FM String; INITIALIZATIONirise 	= 	.2idecay 	= 	.2ivibdel 	= 	.4ivibwth 	= 	.01ivibrte 	= 	5ifc 	= 	cpsoct(p4); Normalize to 80 dB = ampdb(80).iamplitude = 	ampdb(p5) * 15848.926 / 5000.0ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10ifm1 	= 	ifcifm2 	= 	ifc * 3ifm3 	= 	ifc * 4; Range from carrier 2 to 1.index1 	= 	7.5 / log(ifc); Range from carrier 2.6 to .5.index2 	= 	15 / sqrt(ifc); Range from carrier .2 to .083index3 	= 	1.25 / sqrt(ifc); LOGGING; p1 	= 	Instrument; p2 	= 	Start; p3 	= 	Length; p4 	= 	Octave; p5 	= 	Decibels; p6 	= 	Pan	print p2, p3, p4, p5, p6, p7; KONTROLkvibrato 	init 	0; Delays vibrato for ivibdel seconds.timout 	0, 	ivibdel, transient; Vibrato control envelope.kvbctl 	linen 	1, .5, p3 - ivibdel, .1; Random deviation in vibrato width.krnd 	randi 	.005, 11; Vibrato generator.kvibrato 	oscili 	kvbctl * ivibwth + krnd, ivibrte * kvbctl, 1	transient:; Execute for .2 seconds only.	timout 	.2, 	p3, continue; Transient envelope.ktrans 	linseg 	1, .2, 0, 1, 0; AUDIO; Noise...anoise 	randi 	ktrans, .4 * ifc; ...centered around 2 KHz.attack 	oscili 	anoise, 2000, 1	continue:amod1 	oscili 	ifm1 * (index1 + ktrans), ifm1, 1amod2 	oscili 	ifm2 * (index2 + ktrans), ifm2, 1amod3 	oscili 	ifm3 * (index3 + ktrans), ifm3, 1aenvelope linen 	iamplitude + attack, irise, p3, idecayasignal 	oscili 	aenvelope, (ifc + amod1 + amod2 + amod3) * (1 + kvibrato), 1	outs 	asignal * ileftpan, asignal * irightpanendin
instr 2 ; Risset Pseudo-Flanger; INITIALIZATIONiattack 	= 	.015idecay 	= 	.5ifrequency = 	cpsoct(p4); Normalize to 80 dB = ampdb(80).iamplitude = 	ampdb(p5) * 15848.926 / 63437.0ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10; Offsets for oscillators based on original p6.ioffset 	= 	0.04i1 	= 	ioffseti2 	= 	2 * ioffseti3 	= 	3 * ioffseti4 	= 	4 * ioffset; LOGGING; p1 	= 	Instrument; p2 	= 	Start; p3 	= 	Length; p4 	= 	Octave; p5 	= 	Decibels; p6 	= 	Pan	print p2, p3, p4, p5, p6, p7; AUDIO; A simple envelope to prevent clicking.aenvelope linen 	iamplitude, iattack, p3, idecay; Nine oscillators with the same envelope; and waveform, but slightly different; frequencies to create the beating effect.a1 	oscili 	aenvelope, ifrequency, 33a2 	oscili 	aenvelope, ifrequency + i1, 33a3 	oscili 	aenvelope, ifrequency + i2, 33a4 	oscili 	aenvelope, ifrequency + i3, 33a5 	oscili 	aenvelope, ifrequency + i4, 33a6 	oscili 	aenvelope, ifrequency - i1, 33a7 	oscili 	aenvelope, ifrequency - i2, 33a8 	oscili 	aenvelope, ifrequency - i3, 33a9 	oscili 	aenvelope, ifrequency - i4, 33asignal 	= 	a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9	outs 	asignal * ileftpan, asignal * irightpanendin
instr 3 ; Lyon Double Resonated Noise; LOGGING; p1 		= 	Instrument; p2 		= 	Start; p3 		= 	Length; p4 		= 	Octave; p5 		= 	Decibels; p6 		= 	Phase; p7		=	Pan;		print 	p2, p3, p4, p5, p6, p7; INITIALIZATIONiamplitude = 	ampdb(p5) * 15848.926 / 3418ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle)) * iamplitudeirightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle)) * iamplitudeijunk8		=	p8ijunk9		=	p9ijunk10		=	p10; Original pfields; p1	p2	p3	p4	p5	p6	p7; instr 	start 	length 	res1 	res2 	again	seed; i2 	1.038985 	4.388 	300.000 	301.752 	0.334672 	0.179087ihertz1	= 	cpsoct(p4)ihertz2	= 	ihertz1 + 5ibwfactor	= 	.022iseed 	=	0.179087ibw 	= 	cpsoct(p4) * ibwfactorkenv 	linseg 	0, p3/2, 1 ,p3/2, 0anoise 	randi 	1.0, 1000, iseedares 	reson 	anoise, ihertz1, ibw, 1ares1 	reson 	ares, ihertz2, ibw, 1abalres	balance	ares1, anoiseaout 	=	abalres * kenv	outs aout * ileftpan, aout * irightpanendin
instr 4 ; Nelson Finger Cymbals; INITIALIZATIONifrequency = 	cpsoct(p4); Normalize to 80 dB = ampdb(80).iamplitude = 	ampdb(p5) * 15848.926 /  2491ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10; LOGGING; p1 		= 	Instrument; p2 		= 	Start; p3 		= 	Length; p4 		= 	Octave; p5 		= 	Decibels; p6 		= 	Phase; p7		=	Pan;		print 	p2, p3, p4, p5, p6, p7; KONTROL; Amplitude envelope.k1 	expseg  	.0001, .05, iamplitude, p3 - .05, .0001; Power to partials.k2 	linseg 	1.69, .1, 1.75, p3 -.1, 1.69; AUDIOa1 	foscili	k1, ifrequency, 1, 2.01, k2, 1	outs 	a1 * ileftpan, a1 * irightpanendin
instr 5 ; Cook waveguide plucked string; INITIALIZATIONiattack 	= 	0.01irelease 	= 	0.05isustain	=	p3p3		=	iattack + isustain + ireleaseifrequency1 	= 	cpsoct(p4 + (3.0 / 1200.0))ifrequency2	=	cpsoct(p4 - (3.0 / 1200.0))icutoffhz	=	cpsoct(p4 + 4.0); Normalize to 80 dB = ampdb(80).iamplitude 	= 	ampdb(p5) * 15848.926 / 5398.0ijunk6		=	p6ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10ipluckpoint	=	0.05ipluckamp	=	1.0ipickpoint	=	0.07ireflection1	=	0.6ireflection2	=	0.62ip8		=	p8ip9		=	p9ijunk10		=	p10; LOGGING; p1 = Instrument; p2 = Time; p3 = Duration; p4 = Octave; p5 = Decibels; p6 = Phase; p7 = X; p8 = Y; p9 = Z;		print 	p2, p3, p4, p5, p6, p7, p8, p9; KONTROLkenvelope 	expseg 	0.0000001, iattack, iamplitude, isustain, iamplitude * .125, irelease, 0.0000001; AUDIOasignal1	wgpluck2	ipluckpoint, ipluckamp, ifrequency1, ipickpoint, ireflection1asignal2	wgpluck2	ipluckpoint, ipluckamp, ifrequency2, ipickpoint, ireflection2aout0	= 	(asignal1 + asignal2) * kenvelopeaout1		butterlp aout0, icutoffhzaout2		balance aout1, aout0		outs 	ileftpan * aout2, irightpan * aout2endin
instr 6 ; Gogins plucked string; PFIELDSiattack 	= 	0.02isustain 	= 	p3irelease 	= 	0.15p3 		= 	iattack + isustain + ireleaseioctave		= 	p4ihertz		=	cpsoct(ioctave); Detuning of strings by 4 cents each way.idetune      	=       4.0 / 1200.0ihertzleft	=	cpsoct(ioctave + idetune)ihertzright	=	cpsoct(ioctave - idetune); Normalize to 80 dB = ampdb(80).iamplitude 	= 	ampdb(p5) * 15848.926 / 18000.0ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; Angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10; INITIALIZATIONigenleft 	=	1igenright	=	42; KONTROLkvibrato       	oscili  1.0 / 120.0, 7.0, 1      ; AUDIOkdamping 	linseg	0.0, iattack, 1.0, isustain, 0.25, irelease, 0.0kexponential	expseg	1.0, p3, 0.05; Superpose damping and exponential envelopes.kenvelope	=	kdamping * kexponentialag          	pluck   iamplitude, cpsoct(ioctave + kvibrato), 200, igenleft, 1agleft      	pluck   iamplitude, ihertzleft,  200, igenleft,  1agright     	pluck   iamplitude, ihertzright, 200, igenright, 1imsleft  	= 0.2  * 1000imsright 	= 0.21 * 1000adelayleft	vdelay	ag * kenvelope, imsleft,  imsleft  + 100adelayright	vdelay	ag * kenvelope, imsright, imsright + 100asignal		=	kdamping * (agleft + adelayleft + agright + adelayright); Highpass filter to exclude speaker cone excursions.asignal1	butterhp	asignal, 32.0asignal2	balance	asignal1, asignal            	outs    ileftpan * asignal, irightpan * asignalendin
instr 7 ; Horner Pipa; Inital values of the original modelled tone:;                       p3      p4      p5;       pipa:      7.4     6.07    1; Note: If you use the pipa above about middle C (higher than the  modelled range), then you'll want; to bandlimit the wavetables so they stay below the Nyquist  frequency. Just delete the higher; harmonics of the wavetables appropriately (especially wavetable  #12).; INITIALIZATIONgiseed 	= 	.5ipch 	= 	p4iamplitude = 	ampdb(p5) * 15858.0 / 65413648.0ileftpan 	= 	(0.5 - p6) / 2.0 * iamplitudeirightpan 	= 	(0.5 + p7) / 2.0 * iamplitudeiampscale = 	1ip5 	= 	1; LOGGING; p1 	= 	Instrument; p2 	= 	Start; p3 	= 	Length; p4 	= 	Octave; p5 	= 	Decibels; p6 	= 	Phase; p7	=	Pan;	print p2, p3, p4, p5, p6, p7; frequency envelopeifreq 	= 	cpsoct(ipch); 0.15% freq.  variation.kfreqr 	randi 	.0015*ifreq,10, giseedgiseed 	= 	frac(giseed*3.14159)kfreq 	= 	kfreqr + ifreq;  allow wavetable synchronization to vary by +-10%i1 	= 	giseed/5 + .9giseed 	= 	frac(giseed*3.14159)   ; update random seedi2 	= 	giseed/5 + .9giseed 	= 	frac(giseed*3.14159)i3 	= 	giseed/5 + .9giseed 	= 	frac(giseed*3.14159)i4 	= 	giseed/5 + .9giseed 	= 	frac(giseed*3.14159)i5 	= 	giseed/5 + .9giseed 	= 	frac(giseed*3.14159); LOGGING; p1 	= 	Instrument; p2 	= 	Start; p3 	= 	Length; p4 	= 	Octave; p5 	= 	Decibels; p6 	= 	Pan; ip5 	= 	Amplitude scaling factor.; KONTROL; Wavetable amplitude envelopes.kamp1 	linseg 	0, .01*i1, 11, .02*i1, 20, .03*i1, 18, .02*i1,  9, .04*i1, 14, .06*i1, 11, .62*i1, 7, .4*i1, 0, .7*i1, 4, 1.5*i1, .4,  1.0*i1, .7, 1.2*i1, -.1, 1.8*i1, 0, p3, 0; kamp2 	linseg 	0, .01*i2, 2, .02*i2, 2.5, .15*i2, 1.5, .15*i2,  .8, .17*i2, .5, .15*i2, 0, 6.75*i2, 0, p3, 0kamp2 	linseg 	0, .01*i2, 2, .02*i2, 2.5, .15*i2, 1.5, .15*i2,  .8, .17*i2, .5, .4*i2, -.7, .5*i2, .16, .4*i2, .02, .5*i2, .1, .6*i2,  -.03, .2*i2, 0, .5*i2, -.06, .6*i2, .05, 1.4*i2, -.02, 1.8*i2, 0, p3,  0kamp3 	linseg 	0, .01*i3, -17, .05*i3, 8, .12*i3, 1, .22*i3,  -2, .04*i3, -.5, .14*i3, .2, .32*i3, -6, .6*i3, 2, .5*i3, -.2, .4*i3,  2.5, .8*i3, .2, 1.4*i3, 1.6, .8*i3, .7, 2.0*i3, 0, p3, 0kamp4 	linseg 	0, .015*i4, 1.5, .035*i4, -1.2, .03*i4, .8, .14*i4, 1, .4*i4, .25, .48*i4, 1.3, .6*i4, -.1, 1.9*i4, .1, .6*i4,  -.1, 3.2*i4, 0, p3, 0kamp5 	linseg 	0, .01*i5, 10, .02*i5, -40, .11*i5, -10, .46*i5, -5, .3*i5, 12, .5*i5, -1.5, .4*i5, 2, .4*i5, -2.5, 1.4*i5, 1, .8*i5, -1.2, 1.2*i5, .2, 1.8*i5, 0, p3, 0; AUDIO; Wavetable  synthesis.awt1 	oscili 	kamp1, kfreq, 61awt2 	oscili 	kamp2, kfreq, 62awt3 	oscili 	kamp3, kfreq, 63awt4 	oscili 	kamp4, kfreq, 64awt5 	oscili 	kamp5, kfreq, 65; Allow  wavetable overall amplitude to vary by +-25%.iamp1 	= 	giseed/2 + .75giseed 	= 	frac(giseed*3.14159)iamp2 	= 	giseed/2 + .75giseed 	= 	frac(giseed*3.14159)iamp3 	= 	giseed/2 + .75giseed 	= 	frac(giseed*3.14159)iamp4 	= 	giseed/2 + .75giseed 	= 	frac(giseed*3.14159)iamp5 	= 	giseed/2 + .75giseed 	= 	frac(giseed*3.14159)aout = 	iamp1*awt1 + iamp2*awt2 + iamp3*awt3 + iamp4*awt4  +  iamp5*awt5; Ramp decay for shorter notes.kramp 	linseg 	1, p3, 0aout 	= 	kramp*aout; Time-varying lowpass filter for spectral decay.	filt:kcutoff 	linseg 	sr/2, 7.4, ifreq, p3, ifreqafilt 	tone 	aout, kcutoffafilt 	balance 	afilt, aoutaout2 	= 	iampscale*afilt	outs 	aout2 * ileftpan, aout2 * irightpanendin
instr 8 ; Gogins Elementary Signal (Cosine FM Grain with Hanning Envelope); INITIALIZATIONienvelopehz 	= 	1.0 / p3icarrierhz 	= 	cpsoct(p4); Normalize to 80 dB = ampdb(80).iamplitude 	= 	ampdb(p5) * 15848.926 /  1405.0ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10icarrierratio 	= 	1.0imodulationratio = 	1.0imodulationindex =	1.0; LOGGING; p1 = Instrument; p2 = Time; p3 = Duration; p4 = Octave; p5 = Decibels; p6 = Phase; p7 = X; p8 = Y; p9 = Z;		print 	p2, p3, p4, p5, p6, p7, p8, p9; KONTROLihanningwindow 	= 	50kenvelope 	oscili 	iamplitude, ienvelopehz, ihanningwindow; AUDIOicosinewave 	= 	42asignal 	foscili	kenvelope, icarrierhz, icarrierratio, imodulationratio, imodulationindex, icosinewave		outs 	asignal * ileftpan, asignal * irightpanendin
instr 9 ; FM Moderate Index; INITIALIZATIONicarrier 	= 	1iratio 		= 	1.25ifmamplitude 	= 	8index 		= 	5.4iattack 	= 	0.02isustain	=	p3irelease 	= 	0.05p3		=	iattack + isustain + ireleaseifrequency 	= 	cpsoct(p4)ifrequencyb 	= 	ifrequency * 1.003icarrierb 	= 	icarrier * 1.004; Normalize to 80 dB = ampdb(80).iamplitude 	= 	ampdb(p5) * 15848.926 / 36237.0ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10; LOGGING; p1 = Instrument; p2 = Time; p3 = Duration; p4 = Octave; p5 = Decibels; p6 = Phase; p7 = X; p8 = Y; p9 = Z;		print 	p2, p3, p4, p5, p6, p7, p8, p9; KONTROLkindenv 	expseg 	.000001, iattack, 1, isustain, .125, irelease, .000001kindex 		= 	kindenv * index * ifmamplitude; AUDIOaouta 		foscili 	iamplitude, ifrequency, icarrier, iratio, index, 1aoutb 		foscili 	iamplitude, ifrequencyb, icarrierb, iratio, index, 1; Plus amplitude correction.afmout 		= 	(aouta + aoutb) * kindenv * 2.565		outs 	ileftpan * afmout, irightpan * afmoutendin
instr 10 ; Steinway sampled; INITIALIZATIONiamplitude 	= 	ampdb(p5) * 15848.926 / 2500.0ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle)) * iamplitudeirightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle)) * iamplitudeijunk8		=	p8ijunk9		=	p9ijunk10		=	p10ifrequency = 	cpsoct(p4)ioctave 	= 	int(p4 * 100)itablenumber table 	ioctave + 100, 100itableoctave table 	ioctave, 101itablefrequency = 	cpsoct (itableoctave)	if p3 > .20  then goto longenvelopep3 	= 	.20	longenvelope:; LOGGING; p1 	= 	Instrument; p2 	= 	Start; p3 	= 	Length; p4 	= 	Octave; p5 	= 	Decibels; p6 	= 	Pan	print p2, p3, p4, p5, p6, p7print itablenumber, 	itableoctave, itablefrequency; KONTROLkamplitude linen 	iamplitude, -1, p3, .012; AUDIOasignal 	loscil 	kamplitude, ifrequency, int(itablenumber), itablefrequency	outs 	ileftpan * asignal, irightpan * asignalendin
instr 11 ; Kelley Harpsichord; INITIALIZATIONiduration 	= 	p3irelease	=	0.003p3		=	iduration + ireleaseifrequency 	= 	cpsoct(p4); Normalize to 80 dB = ampdb(80).iamplitude 	= 	ampdb(p5) * 15848.926 / 13848.926ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10ifunction	=	46; LOGGING; p1 		= 	Instrument; p2 		= 	Start; p3 		= 	Length; p4 		= 	Octave; p5 		= 	Decibels; p6 		= 	Phase; p7		=	Pan;		print p2, p3, p4, p5, p6, p7; KONTROLkenvelope	expon 	iamplitude, p3, 0.0000001kdamping	linseg	1.0, iduration, 1.0, irelease, 0.0; AUDIOapluck 		pluck 	iamplitude, ifrequency, ifrequency, 0, 1aharp 		oscili 	kenvelope, ifrequency, ifunctionasignal0	= 	apluck + aharpasignal1	=	asignal0 * kdamping		outs 	asignal1 * ileftpan, asignal1 * irightpanendin
instr 12 ; Mikkelson-Cook Slide Flute; Original pfields; Inst	Start  	Dur  	Amp 	Pitch  	Press  	Breath  Feedbk1 Feedbk2; p1	p2	p3	p4	p5	p6	p7	p8	p9; i3  	80    	16   	6000   	8.00    .9      .036  	.4 	.4aflute1 init 0iamplitude	= 	ampdb(p5) * 15848.926 / 15848.926ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10ifqc    	= 	cpsoct(p4)ipress  	= 	0.9ibreath 	= 	0.036ifeedbk1	= 	0.4ifeedbk2	= 	0.4ik1b1	 	=	0.06ik1b2		=	0.2ik1b3		=	0.02ik1duration	=	p3p3		=	ik1duration + ik1b1 + ik1b2 + ik1b3ik2b1		=	0.01ik2b2		=	0.02ik2duration	=	p3 - (ik2b1 + ik2b2)ik3b1		=	0.5ik3b2		=	0.5ik3duration	=	p3 - (ik3b1 + ik3b2); Flow setupkenv1   	linseg 	0, ik1b1, 1.1 * ipress, ik1b2, ipress, ik1duration, ipress, ik1b3, 0kenv2   	linseg 	0, ik2b1, 1, ik2duration, 1, ik2b2, 0; Vibrato envelopekenvibr 	linseg 	0, ik3b1, 0, ik3b2, 1, ik3duration, 1; The values must be approximately -1 to 1 or the cubic will blow up.aflow1 		rand 	kenv1kvibr 		oscil 	0.1 * kenvibr, 5, 3; ibreath can be used to adjust the noise level.asum1 		= 	ibreath * aflow1 + kenv1 + kvibrasum2 		= 	asum1 + aflute1 * ifeedbk1afqc  		= 	1 / ifqc - asum1 / 20000 - 9 / sr + ifqc / 12000000; Embouchure delay should be 1/2 the bore delay; ax delay asum2, (1/ifqc-10/sr)/2atemp1 		delayr 	1 / ifqc / 2ax     		deltapi afqc / 2 ; - asum1 / ifqc / 10 + 1 / 1000       		delayw 	asum2apoly 		= 	ax - ax * ax * axasum3 		= 	apoly + aflute1 * ifeedbk2avalue 		tone 	asum3, 2000; Bore, the bore length determines pitch.  Shorter is higher pitch.atemp2   	delayr 	1 / ifqcaflute1 	deltapi afqc     		delayw 	avalueasignal 	=	avalue * iamplitude * kenv2		outs 	asignal * ileftpan, asignal * irightpanendin
instr 13 ; Kung Plucked String 2; INITIALIZATIONiattack 	= 	0.02isustain 	= 	p3irelease 	= 	0.15p3 		= 	iattack + isustain + ireleaseioctave		= 	p4ihertz		=	cpsoct(ioctave); The shift should decrease with increasing pitch.; Normalize to 80 dB = ampdb(80).iamplitude 	= 	ampdb(p5) * 15848.926 / 15848.926ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10; Shift pitch by 8 cents.ishift      	=       8.0 / 1200.0ihzleft		=	cpsoct(ioctave + ishift)ihzright	=	cpsoct(ioctave - ishift)igenleft 	=	1igenright	=	42; KONTROLkvibrato       	oscili  1.0 / 120.0, 7.0, 1      ; AUDIOkdamping 	linseg	0.0, iattack, 1.0, isustain, 0.25kexponential	expseg	1.0, p3, 0.05; Superpose damping and exponential envelopes.kenvelope	=	kdamping * kexponentialag          	pluck   iamplitude, cpsoct(ioctave + kvibrato), iamplitude, igenleft, 1agleft      	pluck   iamplitude, ihzleft,  iamplitude, igenleft,  1agright     	pluck   iamplitude, ihzright, iamplitude, igenright, 1imsleft  	= 0.2  * 1000imsright 	= 0.21 * 1000adelayleft	vdelay	ag, imsleft, imsleft + 100adelayright	vdelay	ag, imsright, imsright + 100asignal		=	kdamping * (agleft + adelayleft + agright + adelayright); Highpass filter to exclude speaker cone excursions.asignal1	butterhp	asignal, 32.0asignal2	balance	asignal1, asignal            	outs    ileftpan * asignal2, irightpan * asignal2endin
instr 14 ; Pinkston Wavestat; Original score; f1 0 2048 10 1; f2 0 2048 10 0 1; f3 0 2048 10 0 0 1; f4 0 2048 10 0 0 0 1; f5 0 513  5 .01 513 1; p1 	p2 	p3 	p4 	p5 	p6 	p7 	p8 	p9 	p10 	p11 	p12 	p13 	p14 	p15; inst           	start	length	pch   	amp    	ris 	dec 	efn 	iseed 	rhz 	phz 	fa 	fb 	fc 	fd; i01 	0    	20     	9.00  	8000   	3   	3   	5   	.0123 	5   	2   	1  	2  	3  	4; i01 	4    	16     	9.03  	.      	.   	.   	.   	.1234; i01 	7    	13     	9.02  	.      	.   	.   	.   	.2345; i01 	12    	8     	8.11  	.      	.   	.   	.   	.3456ihz	= 	cpsoct(p4); Normalize to 80 dB = ampdb(80).iamp	= 	ampdb(p5) * 15848.926 /  2950ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10iseed     	=         	.2345ifna      	=         	151irise     	=         	3idecay    	=         	3isustain	=	p3idur 	=	irise + isustain + idecayp3	=	idurifnb      	=         	152irndhz    	=         	5ievfn     	=         	155ifnc      	=         	153ipanhz    	=         	2ifnd      	=         	154kenv      	envlpx    	iamp, irise, isustain,idecay, ievfn,1, .01kpan      	randi     	.5, ipanhz, iseedkx        	randi     	.5, irndhz, iseedky        	randi     	.5, irndhz, 1 - iseedkx        	=         	(kx) + (.5)ky        	=         	(ky) + (.5)kpan      	=         	(kpan) + (.5)k1minx    	=         	(1)  -  (kx)k1miny    	=         	(1)   - (ky)ka        	=         	(k1minx) * (k1miny)kb        	=         	(k1minx) * (ky)kd        	=         	(kx) * (k1miny)kc        	=         	(kx) * (ky)aw1       	oscili    	ka, ihz, ifnaaw2       	oscili    	kb, ihz, ifnbaw4       	oscili    	kd, ihz, ifndaw3       	oscili    	kc, ihz, ifncaw5       	=         	(aw1) + (aw2)aw6       	=         	(aw3) + (aw4)aw10      	=         	(aw5) + (aw6)aw7       	=         	(aw10) * (kenv)aw8       	=         	(sqrt(kpan)) * (aw7)aw9       	=         	(aw7) * (sqrt(1 - kpan))aout 	=	aw8 + aw9          	outs      	aout * ileftpan, aout * irightpanendin
instr 15 ; Steinway sampled with reverberation; INITIALIZATIONiamplitude 	= 	ampdb(p5) * 15848.926 /  15848.926ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle)) * iamplitudeirightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle)) * iamplitudeijunk8		=	p8ijunk9		=	p9ijunk10		=	p10idetune	=	.013ifrequency1 = 	cpsoct(p4 - idetune)ifrequency2 = 	cpsoct(p4 +idetune)ioctave 	=	int(p4 * 100)itablenumber table 	ioctave + 100, 100itableoctave table 	ioctave, 101itablefrequency = 	cpsoct (itableoctave)if p3 > .20  then goto longenvelopep3 	= 	.20longenvelope:; LOGGING; p1 	= 	Instrument; p2 	= 	Start; p3 	= 	Length; p4 	= 	Octave; p5 	= 	Decibels; p6 	= 	Pan	print 	p2, p3, p4, p5, p6, p7	print 	itablenumber, itableoctave, itablefrequency; KONTROLkamplitude linen 	iamplitude, -1, p3, .012kc	line 	30, p3, 100; AUDIOasignal1 	loscil 	kamplitude, ifrequency1, int(itablenumber), itablefrequencyasignal2 	loscil 	kamplitude, ifrequency2, int(itablenumber), itablefrequencyasignal3 	comb 	asignal1 + asignal2, kc, .02	outs 	ileftpan * asignal3, irightpan * asignal3endin
instr 16 ; Chowning Soprano; INITIALIZATIONiattack 	= 	0.02isustain 	= 	p3irelease 	= 	0.1p3 		= 	iattack + isustain + irelease	longenvelope:ifrequency 	= 	cpsoct(p4); Normalize to 80 dB = ampdb(80).iamplitude 	= 	ampdb(p5) * 15848.926 / 18000.0ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle)) * iamplitudeirightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle)) * iamplitudeijunk8		=	p8ijunk9		=	p9ijunk10		=	p10i7 		= 	ifrequencyi2 		= 	i7 * 7 ; Old p6.i2 		= 	(i2 / i7) + .5i2 		= 	int(i2)i3 		= 	0.009 ; Old p7.i4 		= 	p4 / 150 ; Old p8.i5 		= 	p4 / 6 * .4 ; .09 = old p9.i6 		= 	p4 / 5 + 1 ; Old p10.i8 		= 	i5 / i4i9 		= 	exp(1.5 * log(iamplitude / 32767))i10 		= 	.00311 * log(ifrequency)i11 		= 	sqrt(iamplitude / 32767)i12 		= 	(1 - i3) * i11i13 		= 	i4 * i7i14 		= 	i9 * i3; LOGGING; p1 	= 	Instrument; p2 	= 	Start; p3 	= 	Length; p4 	= 	Octave; p5 	= 	Decibels; p6 	= 	Pan	print p2, p3, p4, p5, p6, p7; AUDIOa1 		linen 	i12, .1, p3, .08a2 		oscili 	i13, i7, 3a8 		= 	i7 + a2a4 		linen 	i10, .6, p3, .1a4 		oscili 	a4, i6, 3a5 		randi 	i10, 15a6 		linseg 	-.03, .07, .03, .03, 0, p3 - irelease, 0a6 		= 	a4 + a5 + a6 + 1.a1 		oscili 	a1, (a8 + a2) * a6, 3a7 		= 	(a2 * i8) + i2a3 		linseg 	0, .07, .1, .03, 1., p3 - .18, 1, .02, .1, .06, 0a3 		= 	a3 * (i9 * i3)a3 		oscili 	a3, a7 * a6, 3asignal 	= 	(a1 + a3) * iamplitude * 14.0350		outs 	asignal * ileftpan, asignal * irightpanendin
instr 17 ; Kelley Oboe; INITIALIZATIONicpsp   	= 	cpsoct(p4); Normalize to 80 dB = ampdb(80).ip6 	= 	ampdb(p5) * 15848.926 / 7071.1ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10ip4 	= 	0	if (ip4 == int(ip4/2) * 2) goto initslurs	ihold	initslurs:iatttm  	= 	0.06idectm  	= 	0.05isustm  	= 	p3 - iatttm - idectmidec    	= 	p6ireinit 	= 	-1	if (ip4 > 1) goto checkafterslurilast   	= 	0	checkafterslur:if (ip4 == 1 || ip4 == 3) goto doneslursidec 	= 	0ireinit 	= 	0	doneslurs:	if (isustm <= 0) goto simpleenv; LOGGING; p1 	= 	Instrument; p2 	= 	Start; p3 	= 	Length; p4 	= 	Octave; p5 	= 	Decibels; p6 	= 	Pan	print p2, p3, p4, p5, p6, p7; KONTROLkamp 	linseg 	ilast, iatttm, ip6, isustm, ip6, idectm, idec, 0, idec	goto doneenv	simpleenv:kamp 	linseg 	ilast, p3 / 2, ip6, p3 / 2, idec, 0, idec	doneenv:ilast 	= 	ip6; Some vibrato.kvrandamp rand 	.003kvamp   	= 	icpsp * (0.007 + kvrandamp)kvrandfreq rand 	1kvfreq  	= 	5 + kvrandfreqkvbra  	oscili 	kvamp, kvfreq, 1, ireinitkfreq 	= 	icpsp + kvbra; AUDIOa1 	oscili 	kamp, kfreq, 47, ireinit	outs 	a1 * ileftpan, a1 * irightpanendin
instr 18 ; Steinway with Karpen's sndwarp; INITIALIZATIONifrequency = cpsoct(p4)iamplitude = ampdb(p5) * 10ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle)) * iamplitudeirightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle)) * iamplitudeijunk8		=	p8ijunk9		=	p9ijunk10		=	p10isample = 102istart = 0ishift = 1 + (p4 - 5.5)iwindowsize = sr / 20irandom = iwindowsize * .2ioverlap = 3; Window function.iwindow = 69; KONTROL AND AUDIOawarp line 1, p3, 10aresample line ishift, p3, ishiftkenv line 1, p3, .1awet,adry sndwarp kenv, awarp, aresample, isample, istart, iwindowsize, irandom, ioverlap, iwindow, 0asignal balance awet, adryouts asignal * ileftpan, asignal * irightpanendin
instr 19 ; Risset Waveshaper; INITILIZATIONiattack 	= 	0.015irelease 	= 	0.03isustain 	= 	p3 - (iattack + irelease)	if isustain > 0 goto longenvelopeisustain 	= 	0p3 	= 	iattack + isustain + irelease	longenvelope:ifrequency = 	cpsoct(p4); Normalize to 80 dB = ampdb(80).iamplitude = 	ampdb(p5) * 15848.926 / 12649.9ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10i1 	= 	1 / p3i2 	= 	ifrequency; LOGGING; p1 	= 	Instrument; p2 	= 	Start; p3 	= 	Length; p4 	= 	Octave; p5 	= 	Decibels; p6 	= 	Pan	print p2, p3, p4, p5, p6, p7; AUDIO; Scaling factor.a1 	oscili 	iamplitude, i1, 2a2 	oscili 	a1, i2, 1a3 	linenr 	1, iattack, irelease, .01a4 	oscili 	a3, i2 * .7071, 1; Transfer function:; f(x)=1+.841x-.707x**2-.595x**3+.5x**4+.42x**5-;.354x**6.279x**7+.25x**8+.21x**9a5 	= 	a4 * a4a6 	= 	a5 * a4a7 	= 	a5 * a5a8 	= 	a7 * a4a9 	= 	a6 * a6a10 	= 	a9 * a4a11 	= 	a10 * a4a12 	= 	a11 * a4a13 	= 	1 + .841 * a4 - .707 * a5 - .595 * a6 + .5 * a7 + .42 * a8 - .354 * a9 - .297 * a10 + .25 * a11 + .21 * a12; Amplitude correction.a14 	=  	a13 * a2 * 5.06	outs 	a14 * ileftpan, a14 * irightpanendin
instr 20 ; Pinkston Ticker3; Original score; f1 0 8192 10 1 ;41; f2 0 513 5 .0001 33 1 480 .000001; 164; f3 0 257 7 .5 128 1 129 .25;165; f4 0 257 7 0 128 1 129 0;166; p1 	p2 	p3 	p4 	p5 	p6 	p7 	p8 	p9 	p10 	p11 	p12 	p13 	p14; inst 	start 	dur     	amp     	pch     	rise    	decay   	lfohz   	amfn    	oscfn	lfohzfn 	panfn   	ibend   	bendfn; i1      	0       	3       	8000    	12.06   	1       	2       	15      	2       	1	3       	4       	.25     	4; i1      	+       	.       	.       	.       	.       	.       	20; i1      	+       	.       	.       	.       	.       	.       	25icps	=         	cpsoct(p4)iamp	= 	ampdb(p5) * 15848.926 /  8000ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10ipch      	=         	12.6irise     	=         	1 ; p6idecay    	=         	2 ; p7ipkhz     	=         	15 ; p8iamfn     	=         	164 ; p9isinefn   	=         	41 ; p10ihzfn     	=         	165 ; p11ipanfn    	=         	166 ; p12ibend     	=         	.25 ; p13ibendfn   	=         	166 ; p14klfohz    	oscil1i   	0, ipkhz, p3, ihzfnkpanfac   	oscil1i   	0, 1, p3, ipanfnkbendfac  	oscil1i   	0, ibend, p3, ibendfnklfohz    	init      	ipkhzreinitstart:ilfodur   	=         	1 / 25kmicro    	oscil1i   	0, iamp, ilfodur, iamfn          	timout    	0, 1 / i(klfohz), continue          	reinit    	reinitstartcontinue:          	rireturnaw1       	linen     	kmicro, irise, p3, idecay; icps      	=         	cpspch(ipch)kcps      	=         	(kbendfac) * (icps) + (icps)aw2       	oscili    	aw1, kcps, isinefnaw4       	=         	(aw2) * (sqrt(1 - kpanfac))aw3       	=         	(sqrt(kpanfac))  *  (aw2)          	outs      	aw3, aw4endin
instr 21 ; Sampled String Bass; INITIALIZATIONiamplitude = ampdb(p5) * 15848.926 / 15848.926ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10ifrequency = cpsoct(p4)itablefrequency = cpsoct(7)itablenumber = 97if p3 > .06 then goto longenvelopep3 = .06longenvelope:; LOGGING; p1 = Instrument; p2 = Start; p3 = Length; p4 = Octave; p5 = Decibels; p6 = Panprint p2, p3, p4, p5, p6, p7; KONTROLkamplitude linen iamplitude, -1, p3, .02; AUDIOasignal loscil kamplitude, ifrequency, itablenumber, itablefrequencyouts ileftpan * asignal, irightpan * asignalendin
instr 22 ; Tone wheel organ with Leslie speaker; Original score; f1 0 1024 10 1; Tone Wheel Organ Drawbars; 		SubFund 	Fund 	Sub 	3rd 	2nd 	Harm 	3rd 	Harm 	4th 	Harm 	5th 	Harm 	6th 	Harm 	8th 	Harm; f2 0 8192 	10 	8 	8 	8 	4 	0 	5 	0 	3 	0 	0 	0 	0 	0 	0 	0 	8; Lelie Filter Envelopes; f3 0 256 7 0 110 .3 18 1 18 .3 110 0; f4 0 256 7 0 80 .5 16 1 64 1 16 .5 80 0; Distortion; f5 0 1024 8 -.8 42 -.78 100 -.7 740 .7 100 .78 42 .8; p1 	p2 	p3 	p4 	p5; Inst 	Start 	Dur 	Amp 	Pitch; i1 	0 	18 	6000 	7.04; Inst 	Start 	Dur 	Speedi 	Speedf; i4 	0 	18 	.8 	8ip4 	=	.8ip5	=	8isustain	= 	p3iattack	=	.01idecay	=	.02idur	=	iattack + isustain + idecayp3 	=	idurifqc 	= 	cpsoct(p4)iamp 	= 	ampdb(p5)ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle)) * iampirightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle)) * iampijunk8		=	p8ijunk9		=	p9ijunk10		=	p10ifsine	=	41ifdrawbars = 	160ifleslie1 	= 	161ifleslie2 	=	162ifdistort	=	163; instr 1 Tone Wheel Organasrc1 	oscili 	iamp, ifqc, ifdrawbarskenv1 	linseg 	0, iattack, 1, isustain, 1, idecay, 0asig1 	= 	asrc1 * kenv1; Rotating Speakerisep 	= 	.2asig 	= 	asig1; Distortion effectasig 	= 	asig / 40000aclip 	tablei 	asig ,ifdistort, 1, .5aclip 	= 	aclip * 30000  * 15848.926 /  23500aleslie 	delayr 	.02, 1	delayw 	aclip; Accelerationkenv 	linseg 	ip4, idur, ip5; Doppler Effectkoscl 	oscili 	1, kenv, 1, 0koscr 	oscili 	1, kenv, 1, isepkdopl 	= 	.01 - koscl * .0002kdopr 	= 	.012 - koscr * .0002aleft 	deltapi 	kdoplaright 	deltapi 	kdopr; Filter Effect; Divide into three frequency ranges for directional sound.; High Passalfhi 	atone 	aleft, 8000arfhi 	atone 	aright, 8000alfhi 	tone 	alfhi, 12000arfhi 	tone 	arfhi, 12000; Band Passalfmid 	atone 	aleft, 4000arfmid 	atone 	aright, 4000alfmid 	tone 	alfmid, 8000arfmid 	tone 	arfmid, 8000; Low Passalflow 	tone 	aleft, 4000arflow 	tone 	aright, 4000kflohi 	oscili 	1, kenv, ifleslie1, 0kfrohi 	oscili 	1, kenv, ifleslie1, isepkflomid 	oscili 	1, kenv, ifleslie2, 0kfromid 	oscili 	1, kenv, ifleslie2, isep; Amplitude Effectkalosc 	= 	(koscl * .1 + 1)karosc 	= 	(koscr * .1 + 1)aleft	=	alfhi * kflohi  + alfmid * kflomid + alflow * kaloscaright	=	arfhi * kfrohi + arfmid * kfromid + arflow  * karosc	outs	aleft, arightendin
instr 23 ; FM Very High Ratio; INITIALIZATIONicarrier 	= 	2iratio 		= 	2.5ifmamplitude 	= 	8index 		= 	6iattack 	= 	.02irelease 	= 	.05isustain 	= 	p3  - (iattack + irelease)if isustain > 0 goto longenvelopeisustain 	= 	0p3 		= 	iattack + isustain + ireleaselongenvelope:ifrequency 	= 	cpsoct(p4)ifrequencyb 	= 	ifrequency * 1.003icarrierb 	= 	icarrier * 1.004; Normalize to 80 dB = ampdb(80).iamplitude 	= 	ampdb(p5) * 15848.926 / 12748.1ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10; LOGGING; p1 = Instrument; p2 = Time; p3 = Duration; p4 = Octave; p5 = Decibels; p6 = Phase; p7 = X; p8 = Y; p9 = Z;		print 	p2, p3, p4, p5, p6, p7, p8, p9; KONTROLkindenv 	expseg 	.000001, iattack, 1, isustain, .125, irelease, .000001kindex 		= 	kindenv * index * ifmamplitude; AUDIOaouta 		foscili 	iamplitude, ifrequency, icarrier, iratio, index, 1aoutb 		foscili 	iamplitude, ifrequencyb, icarrierb, iratio, index, 1; Plus amplitude correction.afmout 		= 	(aouta + aoutb) * kindenv * 2.565		outs 	ileftpan * afmout, irightpan * afmoutendin
instr 24 ; Horner Erhu; INITIALIZATION; Inital values of modelled tones:;                      p3      p4       p5       p6     p7   p8      p9;       tone1:   3.3     7.11    8.03    1       5       51      52;       tone2:   3.9     8.06    8.10    1       5       53      54iamplitude = 	ampdb(p5)ip6 	= 	1ip7 	= 	5ip8 	= 	51ip9 	= 	52ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10giseed 	= 	.5ipch1 	= 	p4ipch2 	= 	p4 + 1 + 3/12iampscale =	1ivibrate 	= 	ip7iwt1 	= 	ip8iwt2 	= 	ip9; LOGGING; p1 	= 	Instrument; p2 	= 	Start; p3 	= 	Length; p4 	= 	Octave; p5 	= 	Decibels; p6 	= 	Phase; p7	=	Pan;	print p2, p3, p4, p5, p6, p7; ip6 	= 	Amplitude scaling factor; ip7 	= 	Tremolo rate in Hz; ip8 	= 	Wavetable number to use with first pitch in tremolo; ip9 	= 	Wavetable number to use with second pitch in tremolo	print p2, p3, p4, p5, p6, p7, ip6, ip7, ip8, ip9; KONTROL; Frequency envelopeifreq1 	= 	cpsoct(ipch1)ifreq2 	= 	cpsoct(ipch2)kfreq 	= 	ifreq1;       kfreqr randi .0015*ifreq1,10, giseed            ; 0.15% freq.  variation;       giseed = frac(giseed*3.14159);       kfreq = kfreq + kfreqrivibrate 	= 	ivibrate *(giseed/50 + .99)          ; +-1% vib  rate variationgiseed 	= 	frac(giseed*3.14159); print ivibrate; Start vibrato with a slow cycle.kvibrate 	linseg 	ivibrate/2, 1.0/(ivibrate), ivibrate/2, .01, ivibrate, p3, ivibrate; 1% t.v.  vib. rate variation.kvibr 	randi 	.01*ivibrate, ivibrate/2, giseedgiseed 	= 	frac(giseed*3.14159)kvibrate 	= 	kvibrate + kvibrkvib 	oscili 	(ifreq2 - ifreq1), kvibrate, 55, .5kfreq 	= 	kfreq + kvib;display kvib, p3; Allow ampEnv brkpts to vary by +-10%.i1 	= 	.15*(giseed/5 + .9); Update random seed.giseed 	= 	frac(giseed*3.14159)i2 	= 	.6*(giseed/5 + .9)giseed 	= 	frac(giseed*3.14159)i3 	= 	.35*(giseed/5 + .9)giseed 	= 	frac(giseed*3.14159)i4 	= 	(giseed/5 + .9)giseed 	= 	frac(giseed*3.14159)i5 	= 	(giseed/5 + .9)giseed 	= 	frac(giseed*3.14159); Wavetable amplitude envelopes.; Overall amplitude.isum 	= 	i1+i2+i3+i4+i5if p3-isum < .1 goto ae2	ae1:kamp 	linseg 	0, i1, .8, i2, 1.7, i3, 1.3, p3-isum, .9, i4, .1,  i5, 0	goto 	ae3	ae2:kamp 	linseg 	0, i1, .8, i2, 1.7, i3, 1.3, .1, .9, i4, .1, i5,  0; Ramp decay  for shorter notes.kramp 	linseg 	1, .8*p3, 1, .2*p3, 0kamp 	= 	kamp*kramp	ae3:; 10% tremolo  amplitude variation.ktremr 	randi 	.05*kamp, ivibrate/2, giseedgiseed 	= 	frac(giseed*3.14159)kamp 	= 	kamp + ktremratrem1 	oscili 	kamp, kvibrate, 55, 0atrem2 	oscili 	kamp, kvibrate, 55, .5; Wavetable  synthesis.awt1 	oscili 	atrem1, kfreq, iwt1awt2 	oscili 	atrem2, kfreq, iwt2; Allow  wavetable overall amplitude to vary by +-10%.iamp1 	= 	giseed/5 + .9giseed 	= 	frac(giseed*3.14159)iamp2 	= 	giseed/5 + .9giseed 	= 	frac(giseed*3.14159);print iamp1;print iamp2; AUDIOasrc 	= 	iamp1*awt1 + iamp2*awt2; Time-varying lowpass filter for spectral decay.	filt:kcutoff 	linseg 	sr/2, .5*p3, sr/2, .5*p3, ifreq1afilt 	tone 	asrc, kcutoffafilt 	balance 	afilt, asrcasrc 	= 	iampscale*asrc	outs 	asrc * ileftpan, asrc * irightpan; Chorus.ig1 = 0.8ig2 = 0.7ig3 = 0.6ig4 = 0.5kdt linseg .005, p3, .028adump delayr .1ad1 deltapi kdtdelayw asrckdt linseg .009, p3/2, .023, p3/2, .017adump delayr .1ad2 deltapi kdtdelayw asrckdt linseg .021, p3, .007adump delayr .1ad3 deltapi kdtdelayw asrckdt linseg .012, p3, .019adump delayr .1ad4 deltapi kdtdelayw asrcachorus = ig1*ad1 +  ig2*ad2 +  ig3*ad3 +  ig4*ad4outs achorus * ileftpan, achorus * irightpanendin
instr 25 ; Vercoe Plucked String FM Vox; INITIALIZATIONitime 	= 	p2iduration 	= 	p3ifrequency = 	cpsoct(p4)iformant = 	cpsoct(p4 / 3); Normalize to 80 dB = ampdb(80).iamplitude = 	ampdb(p5) * 15848.926 / 12000ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10ipluckamplitude = 	1ipluckduration = 	.9 * p3ipluckoff 	= 	p3 - ipluckdurationifmamplitude = 	1ifmattack 	= 	.2 * p3ifmdecay 	= 	.35ifmoff 	= 	p3 - (ifmattack + ifmdecay)index 	= 	5ivibratodepth = 	1ivibratorate = 	5iformantamplitude = 	p4 / 3iformantattack = 	.6iformantdecay = 	p3 - iformantattackioverlaps 	= 	200; LOGGING; p1 	= 	Instrument; p2 	= 	Start; p3 	= 	Length; p4 	= 	Octave; p5 	= 	Decibels; p6 	= 	Panprint 	p2, p3, p4, p5, p6, p7; KONTROLkpluck 	linseg 	ipluckamplitude, ipluckduration, 0, ipluckoff, 0; AUDIOapluck1 	pluck 	iamplitude, ifrequency, ifrequency, 0, 1apluck2 	pluck 	iamplitude, ifrequency * 1.003, ifrequency * 1.003, 0, 1apluck 	= 	kpluck * (apluck1 + apluck2)kfm 	linseg 	0, ifmattack, ifmamplitude, ifmdecay, 0, ifmoff, 0kindex 	= 	kfm * indexafm1 	foscili 	iamplitude, ifrequency, 1, 2, kindex, 30afm2 	foscili 	iamplitude, ifrequency * 1.003, 1.003, 2.003, kindex, 30afm 	= 	kfm * (afm1 + afm2)kformant 	linseg 	0, iformantattack, iformantamplitude, iformantdecay, 0kvibrato 	oscili 	ivibratodepth, ivibratorate, 30aformant1 	fof 	iamplitude, ioverlaps + kvibrato, iformant, 0, 40, .003, .017, .007, 4, 30, 31, p3aformant2 	fof 	iamplitude, (ioverlaps * 1.001) + kvibrato * .009, iformant, 0, 40, .003, .017, .007, 10, 30, 31, p3aformant 	= 	kformant * (aformant1 + aformant2)asignal 	= 	apluck + afm + aformant	outs 	asignal * ileftpan, asignal * irightpanendin
instr 26 ; Pinkston General Purpose Waveshaper; Original score; Demonstrates the use of high partials, sometimes; without a fundamental, to get quasi-inharmonic; spectra from waveshaping.; sine;f1 0 512 10  1ifn1 = 41; normalizing function with midpoint bipolar offset:;f5 0 257  4  4  1ifn5 = 172; transfer func1: h0 h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16;f4 0 513 13  1  1  0  1 -.8 0 .6  0  0  0 .4  0   0   0   0  .1 -.2 -.3  .5; transfer func2: h0 h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16;f4 0 513 13  1  1  0  0  0 -.1 0 .3  0 -.5 0 .7   0 -.9   0   1   0  -1   0; transfer func3: h0 h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17 h18 h19 h20 h21 h22 h23;f4 0 513 13  1  1  0  0  0  0  0  0  0 -1  0  1   0   0 -.1   0  .1   0 -.2  .3   0 -.7   0  .2   0 -.1ifn4 = 173; p1 	p2 	p3 	p4 	p5; inst	start	length	amp	octpch; i1    	4     	4     	10000    	5.06idur	=        	p3ihertz   	=        	cpsoct(p4)iamp     	=        	ampdb(p5)  * 15848.926 / 5000ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10; Overall amp envelope.kgate    	linen    	1, .01, idur, .1kctrl    	linseg   	0, idur / 2, .999, idur / 2, 0aindex   	oscili   	kctrl / 2, ihertz, ifn1asignal  	tablei   	.5 + aindex, ifn4, 1; Amplitude normalization functionknormal  	tablei   	kctrl, ifn5, 1aout 	= 	asignal * knormal * iamp * kgate	outs	aout * ileftpan, aout * irightpanendin
instr 27 ; Cook Metal; INITIALIZATIONiattack 	= 	0.001isustain	=	p3irelease 	= 	0.18p3		=	iattack + isustain + ireleaseifrequency 	= 	cpsoct(p4); Normalize to 80 dB = ampdb(80).iamplitude 	= 	ampdb(p5) * 15848.926 / 2000.0ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle)) * iamplitudeirightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle)) * iamplitudeijunk8		=	p8ijunk9		=	p9ijunk10		=	p10iindex		=	1icrossfade	=	1.5ivibedepth	=	0.2iviberate	=	5ifn1		=	42ifn2		=	175ifn3		=	175ifn4		=	42ivibefn		=	42; LOGGING; p1 = Instrument; p2 = Time; p3 = Duration; p4 = Octave; p5 = Decibels; p6 = Phase; p7 = X; p8 = Y; p9 = Z;		print 	p2, p3, p4, p5, p6, p7, p8, p9; KONTROLkenvelope 	expseg 	.000001, iattack, 1.0, isustain, 1.0, irelease, .000001; AUDIOasignal		fmmetal 1.0, ifrequency, iindex, icrossfade, ivibedepth, iviberate, ifn1, ifn2, ifn3, ifn4, ivibefn		outs 	ileftpan * asignal * kenvelope, irightpan * asignal * kenvelopeendin
instr 28 ; Burt Pianoiamplitude	= 	ampdb(p5) * 15848.926 / 15848.926ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle)) * iamplitudeirightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle)) * iamplitudeijunk8		=	p8ijunk9		=	p9ijunk10		=	p10inharm      	= 	.05; Different timbres for different ranges of the piano.; Caused by relative amplitudes for each of 10 partials derived from a spectral analysis.		if 	p4 <=  5.0	igoto band1		if 	p4 <=  5.5 	igoto band2		if 	p4 <=  6.0 	igoto band3		if 	p4 <=  6.5 	igoto band4		if 	p4 <=  7.0 	igoto band5		if 	p4 <=  7.5 	igoto band6		if 	p4 <=  8.0 	igoto band7		if 	p4 <=  8.5 	igoto band8		if 	p4 <=  9.0 	igoto band9		if 	p4 <=  9.5 	igoto band10		if 	p4 <= 10.0 	igoto band11		if 	p4 <= 10.5 	igoto band12		if 	p4 <= 11.0 	igoto band13		igoto band14band1:ii1  		= 	0.0645ii2 		= 	0.0637ii3		= 	0.5298ii4  		=	0.1291ii5  		= 	0.7614ii6  		= 	0.5413ii7  		= 	0.1826ii8  		= 	0.0381ii9  		= 	0.0843ii10 		= 	0.1000		igoto 	endbandsband2:ii1  		= 	0.0515ii2  		= 	0.1307ii3  		= 	0.9412ii4  		= 	0.1708ii5  		= 	0.2045ii6  		= 	0.1545ii7  		= 	0.1964ii8  		= 	0.0354ii9  		= 	0.0973ii10 		= 	0.1000		igoto 	endbandsband3:ii1  		= 	0.3300ii2  		= 	0.4269ii3  		= 	1.0000ii4  		= 	0.2288ii5  		= 	0.2500ii6  		= 	0.3307ii7  		= 	0.4292ii8  		= 	0.0419ii9  		= 	0.1078ii10 		= 	0.2000		igoto 	endbandsband4:ii1  		= 	0.8208ii2  		= 	0.9284ii3  		= 	1.0000ii4  		= 	0.3034ii5  		= 	0.4688ii6  		= 	0.7358ii7  		= 	0.8332ii8  		= 	0.0539ii9  		= 	0.1229i10 		= 	0.2000		igoto 	endbandsband5:ii1  		= 	0.7424ii2  		= 	1.0000ii3  		= 	0.9312ii4  		= 	0.2688ii5  		= 	0.3858ii6  		= 	0.5953ii7  		= 	0.6407ii8  		= 	0.0502ii9  		= 	0.0964ii10 		= 	0.1800		igoto 	endbandsband6:ii1  		= 	0.4825ii2  		= 	1.0000ii3  		= 	0.8109ii4  		= 	0.1882ii5  		= 	0.1860ii6  		= 	0.2480ii7  		= 	0.2028ii8  		= 	0.0407ii9  		= 	0.0464ii10 		= 	0.8000		igoto 	endbandsband7:ii1  		= 	0.6303ii2  		= 	0.7038ii3  		= 	0.6034ii4  		= 	0.1282ii5  		= 	0.1345ii6  		= 	0.1427ii7  		= 	0.1101ii8  		= 	0.0283ii9  		= 	0.0265ii10 		= 	0.0300		igoto 	endbandsband8:ii1  		= 	0.9076ii2  		= 	0.2595ii3  		= 	0.3179ii4  		= 	0.0555ii5  		= 	0.0999ii6  		= 	0.0592ii7  		= 	0.0647ii8  		=	0.0117ii9  		= 	0.0074ii10 		= 	0.0240		igoto 	endbandsband9:ii1  		= 	1.0000ii2  		= 	0.1005ii3  		= 	0.1693ii4  		= 	0.0261ii5  		= 	0.0682ii6  		=	0.0212ii7  		= 	0.0334ii8  		= 	0.0045ii9  		= 	0.0000ii10 		= 	0.0000		igoto 	endbandsband10:ii1  		= 	1.0000ii2  		= 	0.0842ii3  		= 	0.0892ii4  		= 	0.0182ii5  		= 	0.0379ii6  		= 	0.0061ii7  		= 	0.0091ii8  		= 	0.0019ii9  		= 	0.0000ii10 		= 	0.0000		igoto 	endbandsband11:ii1  		= 	1.0000ii2  		= 	0.0566ii3  		= 	0.0548ii4  		= 	0.0107ii5  		= 	0.0189ii6  		= 	0.0000ii7  		= 	0.0000ii8  		= 	0.0000ii9  		= 	0.0000ii10 		= 	0.0000		igoto 	endbandsband12:ii1  		= 	1.0000ii2  		= 	0.0235ii3  		= 	0.0432ii4  		= 	0.0034ii5  		= 	0.0055ii6  		= 	0.0000ii7  		= 	0.0000ii8  		= 	0.0000ii9  		= 	0.0000ii10 		= 	0.0000		igoto 	endbandsband13:ii1  		= 	1.0000ii2  		= 	0.0097ii3  		= 	0.0303ii4  		= 	0.0000ii5  		= 	0.0000ii6  		= 	0.0000ii7  		= 	0.0000ii8  		= 	0.0000ii9  		= 	0.0000ii10 		= 	0.0000		igoto 	endbandsband14:ii1  		= 	1.0000ii2  		= 	0.0057ii3  		= 	0.0168ii4  		= 	0.0000ii5  		= 	0.0000ii6  		= 	0.0000ii7  		= 	0.0000ii8  		= 	0.0000ii9  		= 	0.0000ii10 		= 	0.0000		igoto 	endbandsendbands:i1  		= 	ii1i2  		= 	ii2i3  		= 	ii3i4  		= 	ii4i5  		= 	ii5i6  		= 	ii6i7  		= 	ii7i8  		= 	ii8i9  		= 	ii9i10 		= 	ii10; Convert to Hertz.i11 		= 	cpsoct(p4)		;	Middle string.i33 		= 	cpsoct(p4 + .0025)	;	Left string sharp 25 cents.i34 		= 	cpsoct(p4 - .0025)    	;	Right string flat 25 cents.; Partials derived from Young's formula of inharmonicity:; PartialHz = PartialIndex * FundamentalHz * sqrt(1 + Inharmonicity * (PartialIndex * PartialIndex))i12 		=   	 1. * i11 * sqrt(1. + inharm *   1.)i35		=  	 1. * i33 * sqrt(1. + inharm *   1.)i36		=   	 1. * i34 * sqrt(1. + inharm *   1.)i13		=   	 2. * i11 * sqrt(1. + inharm *   4.)i37 		=   	 2. * i33 * sqrt(1. + inharm *   4.)i38 		=   	 2. * i34 * sqrt(1. + inharm *   4.)i14 		=   	 3. * i11 * sqrt(1. + inharm *   9.)i39 		=   	 3. * i33 * sqrt(1. + inharm *   9.)i40 		=   	 3. * i34 * sqrt(1. + inharm *   9.)i15 		=   	 4. * i11 * sqrt(1. + inharm *  16.)i41 		=   	 4. * i33 * sqrt(1. + inharm *  16.)i42 		=   	 4. * i34 * sqrt(1. + inharm *  16.)i16 		=   	 5. * i11 * sqrt(1. + inharm *  25.)i43 		=   	 5. * i33 * sqrt(1. + inharm *  25.)i44 		=   	 5. * i34 * sqrt(1. + inharm *  25.)i17 		=   	 6. * i11 * sqrt(1. + inharm *  36.)i45 		=   	 6. * i33 * sqrt(1. + inharm *  36.)i46 		=   	 6. * i34 * sqrt(1. + inharm *  36.)i18 		=   	 7. * i11 * sqrt(1. + inharm *  49.)i47 		=   	 7. * i33 * sqrt(1. + inharm *  49.)i48 		=   	 7. * i34 * sqrt(1. + inharm *  49.)i19 		=   	 8. * i11 * sqrt(1. + inharm *  64.)i49 		=   	 8. * i33 * sqrt(1. + inharm *  64.)i50 		=   	 8. * i34 * sqrt(1. + inharm *  64.)i20 		=   	 9. * i11 * sqrt(1. + inharm *  81.)i51		=   	 9. * i33 * sqrt(1. + inharm *  81.)i52 		=   	 9. * i34 * sqrt(1. + inharm *  81.)i21 		= 	10. * i11 * sqrt(1. + inharm * 100.)i53 		= 	10. * i33 * sqrt(1. + inharm * 100.)i54 		= 	10. * i34 * sqrt(1. + inharm * 100.);  Randomness.i22 = 12.0k1  		randi 	i1  * 0.3, i22, i1k2  		randi 	i2  * 0.3, i22, i2k3  		randi 	i3  * 0.3, i22, i3k4  		randi 	i4  * 0.3, i22, i4k5  		randi 	i5  * 0.3, i22, i5k6  		randi 	i6  * 0.3, i22, i6k7  		randi 	i7  * 0.3, i22, i7k8  		randi 	i8  * 0.3, i22, i8k9  		randi 	i9  * 0.3, i22, i9k10 		randi 	i10 * 0.3, i22, i10; Basic envelopes.i23 		= 	22.0i24 		=	18.5i25 		= 	17.8i26 		= 	 4.0i27 		= 	10.5i28 		= 	 6.5i29 		= 	 5.5i30 		= 	 3.8i31 		= 	 3.0i32 		= 	 2.0a1  		linseg 	0, 0.01, 1, i23, 0a2  		linseg 	0, 0.01, 1, i24, 0a3  		linseg 	0, 0.01, 1, i25, 0a4  		linseg 	0, 0.01, 1, i25, 0a5  		linseg 	0, 0.01, 1, i26, 0a6  		linseg 	0, 0.01, 1, i27, 0a7  		linseg 	0, 0.01, 1, i28, 0a8  		linseg 	0, 0.01, 1, i29, 0a9  		linseg 	0, 0.01, 1, i30, 0a10 		linseg 	0, 0.01, 1, i31, 0; Mid-dip envelopes.a11 		linseg 	1, i23 * 0.60, 1, i23 * 0.05, 0.5, i23 * 0.05, 1, i23 * 0.30, 1a12 		linseg 	1, i24 * 0.50, 1, i24 * 0.05, 0.5, i24 * 0.05, 1, i24 * 0.40, 1a13 		linseg 	1, i25 * 0.35, 1, i25 * 0.05, 0.5, i25 * 0.05, 1, i25 * 0.55, 1a14 		linseg 	1, i26 * 0.37, 1, i26 * 0.05, 0.5, i26 * 0.05, 1, i26 * 0.53, 1a15 		linseg 	1, i27 * 0.27, 1, i27 * 0.05, 0.5, i27 * 0.05, 1, i27 * 0.63, 1a16 		linseg 	1, i28 * 0.27, 1, i28 * 0.05, 0.5, i28 * 0.05, 1, i28 * 0.63, 1a17 		linseg 	1, i29 * 0.20, 1, i29 * 0.05, 0.5, i29 * 0.05, 1, i29 * 0.70, 1a18 		linseg 	1, i30 * 0.18, 1, i30 * 0.05, 0.5, i30 * 0.05, 1, i30 * 0.72, 1a19 		linseg 	1, i31 * 0.15, 1, i31 * 0.05, 0.5, i31 * 0.05, 1, i31 * 0.75, 1a20 		linseg 	1, i32 * 0.10, 1, i32 * 0.05, 0.5, i32 * 0.05, 1, i32 * 0.80, 1; Randomize the mid-dip envelopes.a11 		= 	sqrt(a11) + abs(k1 )a12 		= 	sqrt(a12) + abs(k2 )a13 		= 	sqrt(a13) + abs(k3 )a14 		= 	sqrt(a14) + abs(k4 )a15 		= 	sqrt(a15) + abs(k5 )a16 		= 	sqrt(a16) + abs(k6 )a17 		= 	sqrt(a17) + abs(k7 )a18 		= 	sqrt(a18) + abs(k8 )a19 		= 	sqrt(a19) + abs(k9 )a20 		= 	sqrt(a20) + abs(k10); Damping envelope.idecay		=	p3irelease	=	0.15p3		=	idecay + ireleasea21 		linseg 	1.0, idecay , 1.0, irelease, 0; Total envelope = middip * basic * dampinga31 		= 	a11 * a1  * sqrt(a21)a32 		= 	a12 * a2  * sqrt(a21)a33 		= 	a13 * a3  * sqrt(a21)a34 		= 	a14 * a4  * sqrt(a21)a35 		= 	a15 * a5  * sqrt(a21)a36 		= 	a16 * a6  * sqrt(a21)a37 		= 	a17 * a7  * sqrt(a21)a38 		= 	a18 * a8  * sqrt(a21)a39 		= 	a19 * a9  * sqrt(a21)a40 		= 	a20 * a10 * sqrt(a21);  Oscillators.		print 	i1, i12		print 	i2, i13		print 	i3, i14		print 	i4, 15a41  		oscili 	a31 * i1,  i12, 41a42  		oscili 	a31 * i1,  i35, 41a43  		oscili 	a31 * i1,  i36, 41aout 		= 	a41  + a42  + a43a51  		oscili 	a32 * i2,  i13, 41a52  		oscili 	a32 * i2,  i37, 41a53  		oscili 	a32 * i2,  i38, 41aout 		= 	aout + a51  + a52  + a53a61  		oscili 	a33 * i3,  i14, 41a62  		oscili 	a33 * i3,  i39, 41a63  		oscili 	a33 * i3,  i40, 41aout 		= 	aout + a61  + a62  + a63a71  		oscili 	a34 * i4,  i15, 41a72  		oscili 	a34 * i4,  i41, 41a73  		oscili 	a34 * i4,  i42, 41aout 		= 	aout + a71  + a72  + a73a81  		oscili 	a35 * i5,  i16, 41a82  		oscili 	a35 * i5,  i43, 41a83  		oscili 	a35 * i5,  i44, 41aout 		= 	aout + a81  + a82  + a83a91  		oscili 	a36 * i6,  i17, 41a92  		oscili 	a36 * i6,  i45, 41a93  		oscili 	a36 * i6,  i46, 41aout 		= 	aout + a91  + a92  + a93a101 		oscili 	a37 * i7,  i18, 41a102 		oscili 	a37 * i7,  i47, 41a103 		oscili 	a37 * i7,  i48, 41aout 		=	 aout + a101 + a102 + 1103a111 		oscili 	a38 * i8,  i19, 41a112 		oscili 	a38 * i8,  i49, 41a113 		oscili 	a38 * i8,  i50, 41aout 		= 	aout + a111 + a112 + 1113a121 		oscili 	a39 * i9,  i20, 41a122 		oscili 	a39 * i9,  i51, 41a123 		oscili 	a39 * i9,  i52, 41aout 		= 	aout + a121 + a122 + 1123a131 		oscili 	a40 * i10, i21, 41a132 		oscili 	a40 * i10, i53, 41a133 		oscili 	a40 * i10, i54, 41aout 		= 	aout + a131 + a132 + 1133		outs 	aout * ileftpan, aout * irightpanendin
instr 29 ; FM Low Index; INITIALIZATIONimodulator 	= 	6.166667ifmamplitude 	= 	3index 		= 	0.05iattack 	= 	0.015isustain 	= 	p3irelease 	= 	0.125p3		=	iattack + isustain + ireleaseifrequency 	= 	cpsoct(p4)icarrier 	=  	0.998icarrierb 	=  	1.002; Normalize to 80 dB = ampdb(80).iamplitude 	= 	ampdb(p5) * 15848.926 / 36100.0ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10ifunction	=	42; LOGGING; p1 = Instrument; p2 = Time; p3 = Duration; p4 = Octave; p5 = Decibels; p6 = Phase; p7 = X; p8 = Y; p9 = Z;		print 	p2, p3, p4, p5, p6, p7, p8, p9; KONTROLkindenv 	expseg 	0.00001, iattack, 1.0, isustain, 0.1, irelease, 0.00001kindex 		= 	kindenv * index * ifmamplitude; AUDIOaouta 		foscili iamplitude, ifrequency, icarrier,  imodulator, kindex, 42aoutb 		foscili iamplitude, ifrequency, icarrierb, imodulator, kindex, 42afmout 		= 	(aouta + aoutb) * kindenv * 2.556		outs 	ileftpan * afmout, irightpan * afmoutendin
instr 30 ; Kung Plucked String buzzy; INITIALIZATIONiattack 	= 	0.015isustain 	= 	p3irelease 	= 	0.03p3 		= 	iattack + isustain + ireleaseioct 		= 	p4; The shift should decrease with increasing pitch.ishift      	= 	(11.0 - p4) / 1200.0ihz1		= 	cpsoct(p4 + ishift)ihz2		=	cpsoct(p4 - ishift); Normalize to 80 dB = ampdb(80).iamplitude 	= 	ampdb(p5) * 15848.926 / 4800.0ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10iag		=	1isine		=	45 ;41icosine		=	45 ;42ilongdecay	=	p3 * 4; LOGGING; p1 		= 	Instrument; p2 		= 	Start; p3 		= 	Length; p4 		= 	Octave; p5 		= 	Decibels; p6 		= 	Phase; p7		=	Pan;		print 	p2, p3, p4, p5, p6, p7; KONTROLkvib 		oscili 	1.0 / 80.0, 4.0 + (p4 / 8.0), icosine; AUDIOadamping	linseg 	0.0, iattack, 1.0, isustain, 1.0, irelease, 0.0adecay		expon	1.0, ilongdecay, 0.0000001ag 		pluck 	iamplitude, ioct + kvib, 60.0, iag, 1agleft 		pluck 	iamplitude, ihz1, 60.0, isine, 1agright 	pluck 	iamplitude, ihz2, 60.0, icosine, 1abuffer		delayr 	0.5; Put ag signal into delay line.		delayw 	ag * adecayad1 		deltapi	0.1ad2 		deltapi	0.21		outs 	ileftpan * adecay * adamping * (agleft + ad1), irightpan * adecay * adamping * (agright + ad2)endin
instr 31 ; Cook Rhodes; INITIALIZATIONiattack 	= 	0.001isustain	=	p3irelease 	= 	0.18p3		=	iattack + isustain + ireleaseifrequency 	= 	cpsoct(p4); Normalize to 80 dB = ampdb(80).iamplitude 	= 	ampdb(p5) * 15848.926 / 2000.0ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle)) * iamplitudeirightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle)) * iamplitudeijunk8		=	p8ijunk9		=	p9ijunk10		=	p10iindex		=	1icrossfade	=	2ivibedepth	=	0.2iviberate	=	6ifn1		=	41ifn2		=	41ifn3		=	41ifn4		=	182ivibefn		=	41; LOGGING; p1 = Instrument; p2 = Time; p3 = Duration; p4 = Octave; p5 = Decibels; p6 = Phase; p7 = X; p8 = Y; p9 = Z;		print 	p2, p3, p4, p5, p6, p7, p8, p9; KONTROLkenvelope 	expseg 	.000001, iattack, 1.0, isustain, 1.0, irelease, .000001; AUDIOasignal		fmrhode 1.0, ifrequency, iindex, icrossfade, ivibedepth, iviberate, ifn1, ifn2, ifn3, ifn4, ivibefn		outs 	ileftpan * asignal * kenvelope, irightpan * asignal * kenvelopeendin
instr 32 ; Kelley Violin; INITIALIZATION; p3 = duration; ip4 = slur informationip4 	= 	0icpsp   	= 	cpsoct(p4); Normalize to 80 dB = ampdb(80).ip6 	= 	ampdb(p5) * 15848.926 /  2727.7ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10	if (ip4 == int(p4/2) * 2) goto initslurs	ihold	initslurs:iatttm  	= 	0.075idectm  	= 	0.1isustm  	= 	p3 - iatttm - idectmidec    	= 	p6ireinit 	= 	-1	if (ip4 > 1) goto checkafterslurilast   	= 	0	checkafterslur:	if (ip4 == 1 || ip4 == 3) goto doneslursidec 	= 	0ireinit 	= 	0	doneslurs:	if (isustm <= 0) goto simpleenv; LOGGING; p1 	= 	Instrument; p2 	= 	Start; p3 	= 	Length; p4 	= 	Octave; p5 	= 	Decibels; p6 	= 	Pan	print p2, p3, p4, p5, p6, p7; KONTROLkamp 	linseg 	ilast, iatttm, ip6, isustm, ip6, idectm, idec, 0, idec	goto doneenv	simpleenv:kamp 	linseg 	ilast, p3 / 2, ip6, p3 / 2, idec, 0, idec	doneenv:ilast 	= 	ip6; Some randomness for fun.krnd 	randi  	.1, 10krnd 	= 	krnd + 1kamp 	= 	kamp * krnd; Some vibrato.kvrandamp  rand 	.0125kvamp   	= 	icpsp * (0.0125 + kvrandamp)kvrandfreq rand 1kvfreq  	= 	5 + kvrandfreqkvbra  	oscili 	kvamp, kvfreq, 1, ireinitkfreq 	= 	icpsp + kvbra; AUDIOa1 	oscili 	kamp, kfreq, 45, ireinit; Some resonance cavities.a2 	tone 	a1, 3500, ireinita3 	comb 	a2, .15, .01, ireinita4 	comb 	a3, .15, .02, ireinit	outs 	a1 * ileftpan, a1 * irightpanendin
instr 33 ; Cook tubular bell; INITIALIZATIONisustain	=	p3irelease 	= 	0.18iattack		=	.015p3		=	iattack + isustain + ireleaseifrequency 	= 	cpsoct(p4); Normalize to 80 dB = ampdb(80).iamplitude 	= 	ampdb(p5) * 15848.926 / 2300.0ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10ibowpressure	=	3.5ibowpoint	=	0.14ivibehz		=	4.3ivibeamp	=	0.018ifunction	=	42ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10iindex		=	4.0icrossfade	=	1.2ivibedepth	=	0.3iviberate	=	4.4ifn1		=	42ifn2		=	42ifn3		=	42ifn4		=	42ivibefn		=	42; LOGGING; p1 = Instrument; p2 = Time; p3 = Duration; p4 = Octave; p5 = Decibels; p6 = Phase; p7 = X; p8 = Y; p9 = Z;		print 	p2, p3, p4, p5, p6, p7, p8, p9; KONTROLkenvelope 	expseg 	.0000001, iattack, iamplitude, isustain, iamplitude, irelease, 0.000001; AUDIOasignal		fmbell	1.0, ifrequency, iindex, icrossfade, ivibedepth, iviberate, ifn1, ifn2, ifn3, ifn4, ivibefn		outs 	ileftpan * asignal * kenvelope, irightpan * asignal * kenvelopeendin
instr 34 ; Pinkston Fazex; Original score; sine; f1  0  513  10   1ifn1 = 41; phasing instrument envlpx attack function; f2  0  129   9  .4   1   0ifn2 = 176; fundamental timbre function A; f3  0  512  10   1  .1  .4  .1  .2  .3  .4  .3  .2  .1ifn3 = 177; fundamental timbre function B; f4  0  512  10   0   0  .4   0   0  .2   0  .1  .2  .3  .4  .5  .6  .7  .8  .9ifn4 = 178; attack envelope function; f5  0  129   9  .5   1   0ifn5 = 179; vibrato scaling function; f6  0  129   7  .4  50  .4  50 .15  29  .1ifn6 = 180; transient removal gate function; f7  0  129   7   0  129  1ifn7 = 181; p1 	p2 	p3 	p4    	p5    	p6    	p7     	p8      	p9      	p10   	p11; inst 	start	length	amp   	pch   	dectm 	vibfr  	ssatn   	atkamp  	pan   	phsvibfr; i1  	0.0  	14.0   	3000  	5.00  	8    	0.100   	2.0    	.40      	0     	.090; i1  	0.0  	14.0   	3000  	5.00  	8    	0.110   	2.0    	.40      	1     	.093; i1  	0.0  	12.0   	5000  	6.00  	6    	0.300   	1.0    	.33      	0     	.100ip6 	= 	8.ip7 	= 	.1ip8 	= 	2.ip9 	= 	.4ip10 	= 	0.ip11 	= 	.09ifreq	= 	cpsoct(p4); Normalize to 80 dB = ampdb(80).ip4	= 	ampdb(p5) * 15848.926 / 4000ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10ifamp    	=        	ip9                            	; rel amp: attack transientivibamp  	=        	(1 - ip9) / 2                  	; rel amp: phasing componentiamp     	=        	ivibamp		; rel amp: fund timbreifunc    	=        	ifn4                             	; fundamental timbre funciarand   	=        	.1ifrqrnd  	=        	15ifrqvib  	=        	ip7ifrise   	=        	.02                           	; attack transient speediat      	=        	.01                           	; fundamental attack speedidec     	=        	ip6idelt    	=        	.1                            	; delay timeifazamp  	=        	.002                          	; phasing amplitudeiatten   	=        	ip8ifazvib  	=        	ip11                           	; phasing speedkgate    	envlpx   	ip4, iat, p3, idec, ifn2, iatten, .01kfgate   	oscil1i  	0, ifamp, ifrise, ifn5       	; attack envelopeifac     	table    	ifreq, ifn6                       	; vibrato scalingkrand    	randi    	iarand, ifrqrnd, -1         	; vibrato random factorkvib     	oscil    	krand + ifac, ifrqvib + krand, ifn1    ; "beating" vibratoafazvib  	oscili   	ifazamp, ifazvib, ifn1    ; "phasing" vibratoaform    	oscili   	kfgate, ifreq, ifn4          	; 3 phasing componentsavibsig  	oscili   	ivibamp, ifreq + kvib, ifuncasig     	oscili   	iamp, ifreq, ifuncktrango  	oscil1i  	0, 1, p3 * .2, ifn7            	; transient removal gate...adelin   	=        	(asig + avibsig) * ktrango        ; ...for the delayed signaladelsig  	delayr   	idelt                         	; delay for phase filteringaphasig  	deltapi  	idel t -ifazamp + afazvib - .0001   ; scaled within defined...     	delayw   	adelin                        	; ...limits         	if 	(p10 == 1) 	goto flipflop	outs 	ileftpan * (avibsig + asig + aform) * kgate * 2, irightpan * aphasig * kgate * 2         	if       	(p10 != 1) 	goto continueflipflop:	outs     	ileftpan * aphasig * kgate * 2, irightpan * (avibsig + asig + aform) * kgate * 2continue:endin
instr 35 ; Nelson Melody Instrument (Chebyshev / FM / Additive); INITIALIZATIONiattack 	= 	0.05isustain	=	p3irelease 	= 	0.1p3		=	iattack + isustain + ireleasei1 		= 	cpsoct(p4); Normalize to 80 dB = ampdb(80).iamplitude 	= 	ampdb(p5) * 15848.926 /  15848.926ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10;ip6		=	cheby#ip6 		= 	32;ip7		=	choiceip7 		=	1; LOGGING; p1 		= 	Instrument; p2 		= 	Start; p3 		= 	Length; p4 		= 	Octave; p5 		= 	Decibels; p6 		= 	Phase; p7		=	Pan;		print 	p2, p3, p4, p5, p6, p7; KONTROLk100 		randi   1,10k101 		oscili  i1 / 65, 5 + k100, 1k102 		linseg  0, .5, 1, p3 - .5, 1k100 		=  	i1 + (k101 * k102); Envelope for driving oscillator.k1 		linen 	.5, p3 * .4, p3 , p3 * .2k2 		line 	1, p3, .5k1 		=  	k2 * k1		if 	ip7 = 2 goto cresc		if 	ip7 = 3 goto dim		if 	ip7 = 4 goto sfz		if 	ip7 = 5 goto slow; Amplitude envelope.k10 		expseg  .0001, iattack, iamplitude , isustain, iamplitude * .8, irelease, .0001; Power to partials.k20 		linseg 	1.485, iattack, 1.5, isustain + irelease, 1.485		goto 	nextcresc:; Amplitude envelope.k8 		expseg 	.0001, iattack, p5 * .25, isustain, p5, irelease, .0001k9 		linseg 	1, p3 - .15, 1.5, .1, 0k10  		= 	(k8 * k9) / 2; Power to partials.k20 		line 	1.475, p3, 1.5		goto 	nextdim:; Amplitude envelope.k10 		linseg  0, .05, iamplitude, .05, iamplitude * .8, p3 * .33, p5 *.7, (p3 * .66) - .1, 0; Power to partials.k20 		line 	1.5, p3, 1.475		goto 	nextsfz:; Amplitude envelope.k10 		linseg  0, .03, p5, .04, p5, .03, p5 * .3, p3 - .15, p5 * .3, .05, 0; Power to partials.k20 		linseg  1.4, .03, 1.7, .04, 1.7, .03, 1.4, p3 - .1, 1.385		goto 	nextslow:; Amplitude envelope.k10 		linseg  0, .06, p5 * .45, .04, p5 * .2, (p3 / 3) - .1, p5, p3 / 3, p5 * .9, p3 / 3, 0; Power to partials.k20 		linseg 	1.475, p3 / 3, 1.5, p3 / 3, 1.4999, p3 / 3, 1.475next:; a1-3 are for cheby with p6=1-4a1 		oscili  k1, k100 - .025, 3; Tables a1 to fn13, others normalize,a2 		tablei  a1, ip6, 1, .5a3 		balance a2, a1; Try other waveforms as well.a4 		foscili	1, k100 + .04, 1, 2.005, k20, 1a5 		oscili  1, k100, 1a6  		=  	((a3 * .1) + (a4 * .1) + (a5 * .8)) * k10a7 		comb 	a6, .5, 1 / i1a6  		= 	(a6 * .9) + (a7 * .1)		outs 	a6 * ileftpan, a6 * irightpanendin
instr 36 ; Guitar Harmonics; INITIALIZATIONiattack 	= 	.015irelease 	= 	.02isustain 	= 	p3 - (iattack + irelease)if isustain > 0 goto longenvelopeisustain 	= 	0p3 	= 	iattack + isustain + irelease	longenvelope:ifrequency	 = 	cpsoct(p4); Normalize to 80 dB = ampdb(80)iamplitude = 	ampdb(p5) * 15848.926 / 1220ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10; LOGGING; p1 	= 	Instrument; p2 	= 	Start; p3 	= 	Length; p4 	= 	Octave; p5 	= 	Decibels; p6 	= 	Panprint p2, p3, p4, p5, p6, p7; KONTROLkamp	linseg 	0.0, iattack, iamplitude, isustain, iamplitude,irelease, 0.0; AUDIOasig	pluck	kamp, ifrequency, ifrequency, 0, 6	outs 	asig * ileftpan, asig * irightpanendin
instr 37 ; Pinkston Koto; Original score; Sine wave; f1 0.0 512 10 1ifn1 = 41; linear rise; f2 0.0 513 7  0 513 1ifn2 = 167; linear fall; f3 0.0 513 7  1 513 0ifn3 = 168; exponential rise; f4 0.0 513 5   .001 513 1ifn4 = 169; exponential rise; f5 0.0 513 5 1 513 .001ifn5 = 170; Buzz-like wave; f6 0.0 512 10 1 1 1 1 1 1 1 1 1ifn6 = 171; p1 	p2 	p3 	p4 	p5 	p6; i1 	0.00 	20.5 	5000  	7.060   	.05ihz	=	cpsoct(p4)ip4 	= 	ampdb(p5) * 15848.926 /  1557ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10ip6 = .05ihz2	=       	ihz * 2.0006ihz3	=	ihz * 1.9999ihz4	=	ihz * 1.0005ihz5	=	ihz * .9998koct	init	octcps(ihz)koct2	init	octcps(ihz2)koct3	init	octcps(ihz3)koct4	init	octcps(ihz4)koct5	init	octcps(ihz5)kbend   	oscil1i 	0.15, ip6, p3, ifn4;   /* p6 in oct.decimal */khz	=	cpsoct(koct+kbend)khz2	=	cpsoct(koct2+kbend)khz3	=	cpsoct(koct3+kbend)khz4	=	cpsoct(koct4+kbend)khz5	=	cpsoct(koct5+kbend)aplk1	pluck	(ip4 * .42), khz, ihz, ifn6, 3, 1	timout	0.0, p3 * .2,continue ;.002 not p3;koto2:aplk2	pluck	(ip4 * .62), khz2, ihz2, ifn6, 3, 1	timout	0.0, p3 * .4, continue  ; .004 not p3;koto3:aplk3	pluck 	(p4 * .62), khz3, ihz3, ifn6, 3, 1	timout	0.0, p3 * .6,continue  ;  .005 not p3;koto4:aplk4	pluck	(ip4 * .62), khz4, ihz4, ifn6, 3, 1	timout	0.0, p3 * .8, continue      ;.007 not  p3;koto5:aplk5	pluck	(ip4 * .62), khz5, ihz5, ifn6, 3, 1continue:asignal	=	aplk1 + aplk2 + aplk3 + aplk4 + aplk5asig	envlpx	asignal, .001, p3, (p3 * .001), ifn4, 1.02, .008;asig	envlpx	asignal, .06,    p3, (p3 * .1),     ifn4, 1.02, .008 ;	outs	asig * ileftpan, asig * irightpanendin
instr 38 ; Bergeman 3; INITIALIZATION; ins  st        dur   func  meth  db   seed  rasp; p1   2         3      4         5         6     7           8; i3    116.5  4.5   2        1         42   .63        2ip4		=	2ip5		=	1ip6		=	p5ip7		=	0.63ip8		=	2ifunc		=	ip4imeth		=	ip5iamp		= 	ampdb(ip6)iseed		= 	ip7ilforate	=	ip8ita		=	143itb		=	144itc		=	145itd		=	146; KONTROL		if 	(imeth==1) kgoto 	randoma		if 	(imeth==2) kgoto 	randomb		if 	(imeth==3) kgoto 	randomc		if 	(imeth==4) kgoto 	randomdrandoma:kindex  	randh  	int(10), ilforate, iseedkpitch  	table  	abs(kindex), ita		kgoto 	nextrandomb:kindex  	randh  	int(18), ilforate, iseedkpitch  	table   abs(kindex), itb		kgoto 	nextrandomc:kindex  	randh  	int(9), ilforate, iseedkpitch  	table   abs(kindex), itc		kgoto 	nextrandomd:kindex  	randh  	int(6), ilforate, iseedkpitch  	table   abs(kindex), itd		kgoto 	nextnext:		if ip6 < 50 	kgoto 	ra		if ip6 > 49 	kgoto 	rbra:k1 		linen 	iamp, 0.25 * p3, p3, 0.2  * p3k2 		linen 	iamp, 0.2  * p3, p3, 0.25 * p3k5 		line   	1500, p3, 50k6 		line   	1000, p3, 50; AUDIOa1 		oscili 	k1, kpitch,         ifunca2 		oscili 	k2, kpitch * 1.002, ifunca5 		butterbp 	a1, k5, 30a6 		butterbp 	a2, k6, 25a7 		balance 	a5, a1a8 		balance 	a6, a2		outs 	a7, a8;garvbsig3=garvbsig3+(a1+a2)*4	rb:k3 	linen 	iamp, .25 * p3, p3, .2  * p3k4 	linen 	iamp, .2  * p3, p3, .25 * p3k7 	line  	1500, p3, 50k8 	line  	1500, p3, 50a3 	oscil 	k3, kpitch,        ifunca4 	oscil 	k4, kpitch * .998, ifunca9  	butterbp 	a3,  k7, 25a10 	butterbp 	a4,  k8, 25a11 	balance 	a9,  a3a12 	balance 	a10, a4	outs 	a11, a12;garvbsig4=garvbsig4+(a3+a4)*2endin
instr 39 ; Bergeman 2; INITIALIZATION; 1   2     3   4            5   6         7      8     9      10  11  12  13  14 15 16 17 18 19 20 21; i2  82    .   624.37 5    626    6      17   53   17   63  .6    .6   4    6   6  3    2    1  1   4ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10; Pitchip4		=	cpsoct(p4); Table 3ip5 		=	125; Pitch 2ip6		=	cpsoct(p4 + 0.001);1.005 * ip4; Table 1ip7		=	126ip8		=	137; Loudnessip9 		= 	p5; Table 2ip10		=	137; Loudness 2ip11 		=	p5ip12		=	.6ip13		=	.7ip14		=	4ip15		=	6ip16		=	6ip17		=	3ip18		=	2ip19		=	1ip20		=	1ip21		=	4idb1		=	ampdb(p5) * 15848.926 / 2500.0 ; ampdb(ip9)idb2		=	ampdb(p5) * 15848.926 / 2500.0 ; ampdb(ip11)irvgain1	=	ip12irvgain2	=	ip13; KONTROLk1 	oscili 	idb1, 1/ p3, ip8k2 	oscili 	idb2, 1/ p3, ip10k3 	linen  	3, 0.9, p3, 0.3k4 	randi 	k3, 10k5 	randi 	k3, 15k6 	linen 	ip20, ip14, p3, ip16k7 	linen 	ip21, ip15, p3, ip17k8 	oscili 	k6, ip18, 1k9 	oscili 	k7, ip19, 1; AUDIOa1 	oscili 	k1, ip4 + k4 + k8, ip5a2 	oscili 	k2, ip6 + k5 + k9, ip7	outs 	ileftpan * a1, irightpan * a2;garvbsig1 = garvbsig1+a1*irvgain1;garvbsig2 = garvbsig2+a2*irvgain2endin
instr 40 ; Plucked String Filtered; INITIALIZATIONiattack 	= 	.02irelease 	= 	.075isustain 	= 	p3  - (iattack + irelease)	if isustain > 0 goto longenvelopeisustain 	= 	0p3 	= 	iattack + isustain + irelease	longenvelope:ifrequency = 	cpsoct(p4); Normalize to 80 dB = ampdb(80).iamplitude = 	ampdb(p5) * 15848.926 / 52161.1ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10; LOGGING; p1 	= 	Instrument; p2 	= 	Start; p3 	= 	Length; p4 	= 	Octave; p5 	= 	Decibels; p6 	= 	Pan	print p2, p3, p4, p5, p6, p7; KONTROLkenvelope expseg 	.00001, iattack, iamplitude, isustain, iamplitude, irelease, .00001; AUDIOasignal1 	pluck 	1, ifrequency, ifrequency * 1.002, 0, 6asignal2 	pluck 	1, ifrequency * 1.003, ifrequency, 0, 6apluckout 	= 	(asignal1 + asignal2) * kenvelope * 7.5257	outs 	ileftpan * apluckout, irightpan * apluckoutendin
instr 41 ; Kung FM Mutant; INITIALIZATIONipch        	=       cpsoct(p4)ioct        	=       p4iamplitude	= 	ampdb(p5) * 15848.926 / 10000.0ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10ip6 = 0.3ip7 = 1.2; The shift should decrease with increasing pitch.ishift      	= 	(8.0 / 1200.0) - ((p4 / 16) * 2)ifunction = 43icosine = 42isine = 41; LOGGING; p1 		= 	Instrument; p2 		= 	Start; p3 		= 	Length; p4 		= 	Octave; p5 		= 	Decibels; p6 		= 	Phase; p7		=	Pan;		print p2, p3, p4, p5, p6, p7; KONTROL; ADSR envelopekadsr       	linseg	0.0, p3 / 3.0, 1.0, p3 / 3.0, 1.0, p3 / 3.0, 0.0; ADSR envelope for Ikmodi       	linseg	0.0, p3 / 3.0, 5.0, p3 / 3.0, 3.0, p3 / 3.0, 0.0; r moves from ip6 to ip7 in p3 sec.kmodr       	linseg	ip6, p3, ip7; AUDIOa1          	=	kmodi * (kmodr - 1.0 / kmodr) / 2.0; a1 * 2 is normalized over [0, 1].a1ndx       	=	abs(a1 * 2.0 / 20.0)a2          	=	kmodi * (kmodr + 1.0 / kmodr) / 2.0; Lookup table with normal indexa3          	tablei      a1ndx, ifunction, 1ao1         	oscili      a1, ipch, icosinea4          	=           exp(-0.5 * a3 + ao1)ao2         	oscili      a2 * ipch, ipch, icosineaoutl       	oscili      iamplitude * kadsr * a4, ao2 + cpsoct(ioct + ishift), icosineaoutr       	oscili      iamplitude * kadsr * a4, ao2 + cpsoct(ioct - ishift), isine            	outs        ileftpan * aoutl, irightpan * aoutrendin
instr 42 ; Bergeman 1 RT; INITIALIZATION; Original pfields; p1  p2 p3   p4 p5      p6 p7    p8       p9; ins  st  dur  db func   at  dec freq1  freq2ip3		= 	p3ip4 		= 	p5imidiamp = ampmidi 32767.0print midiampiamplitude	= 	ampdb(p5) * 15848.926 / 2000.0print iamplitudeijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle)) * iamplitudeirightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle)) * iamplitudeijunk8		=	p8ijunk9		=	p9ijunk10		=	p10ip5 		= 	77ip6 		= 	ip3 * .25ip7 		= 	ip3 * .75ip8 		= 	cpsoct(p4 + 0.01)ip8a		=	cpsoct(p4 - 0.014)ip9 		= 	cpsoct(p4 + 0.015)ip9a 		= 	cpsoct(p4 - 0.009)idb		=	iamplitude ; ampdb(ip4) * 10isc		=	idb * .333; KONTROLk1 		line 	40,  ip3, 800k2 		line 	440, ip3, 220k3 		linen 	isc, ip6, p3, ip7k4 		line 	800, ip3, 40k5 		line 	220, ip3, 440k6 		linen 	isc, ip6, ip3, ip7; AUDIOa5 		oscili 	k3, ip8,  ip5a6 		oscili 	k3, ip8,  ip5a7 		oscili 	k3, ip8a, ip5a1		=	a5 + a6 + a7a8 		oscili 	k6, ip9,  ip5a9 		oscili 	k6, ip9,  ip5a10 		oscili 	k6, ip9a, ip5a11		=	a8 + a9 + a10a2 		butterbp 	a1,  k1, 40a3 		butterbp 	a2,  k5, k2 * .8a4 		balance 	a3,  a1a12 		butterbp 	a11, k4, 40a13 		butterbp 	a12, k2, k5 * .8a14 		balance a13, a11		outs 	ileftpan * a4, irightpan * a14endin
instr 43 ; Bergeman 1; INITIALIZATION; Original pfields; p1  p2 p3   p4 p5      p6 p7    p8       p9; ins  st  dur  db func   at  dec freq1  freq2ip3		= 	p3ip4 		= 	p5iamplitude	= 	ampdb(p5) * 15848.926 / 2000.0ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle)) * iamplitudeirightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle)) * iamplitudeijunk8		=	p8ijunk9		=	p9ijunk10		=	p10ip5 		= 	77ip6 		= 	ip3 * .25ip7 		= 	ip3 * .75ip8 		= 	cpsoct(p4 + 0.01)ip8a		=	cpsoct(p4 - 0.014)ip9 		= 	cpsoct(p4 + 0.015)ip9a 		= 	cpsoct(p4 - 0.009)idb		=	iamplitude ; ampdb(ip4) * 10isc		=	idb * .333; KONTROLk1 		line 	40,  ip3, 800k2 		line 	440, ip3, 220k3 		linen 	isc, ip6, p3, ip7k4 		line 	800, ip3, 40k5 		line 	220, ip3, 440k6 		linen 	isc, ip6, ip3, ip7; AUDIOa5 		oscili 	k3, ip8,  ip5a6 		oscili 	k3, ip8,  ip5a7 		oscili 	k3, ip8a, ip5a1		=	a5 + a6 + a7a8 		oscili 	k6, ip9,  ip5a9 		oscili 	k6, ip9,  ip5a10 		oscili 	k6, ip9a, ip5a11		=	a8 + a9 + a10a2 		butterbp 	a1,  k1, 40a3 		butterbp 	a2,  k5, k2 * .8a4 		balance 	a3,  a1a12 		butterbp 	a11, k4, 40a13 		butterbp 	a12, k2, k5 * .8a14 		balance a13, a11		outs 	ileftpan * a4, irightpan * a14endin
instr 44 ; Guitar; INITIALIZATIONiattack 	= 	0.015isustain	=	p3irelease 	= 	0.065p3		=	iattack + isustain + ireleaseifrequency 	= 	cpsoct(p4); Normalize to 80 dB = ampdb(80).iamplitude 	= 	ampdb(p5) * 15848.926 / 1848ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10; LOGGING; p1 = 	Instrument; p2 = 	Start; p3 = 	Length; p4 = 	Octave; p5 = 	Decibels; p6 = 	Phase; p7 =	Pan;		print p2, p3, p4, p5, p6, p7; KONTROLkamp		linseg	0.0, iattack, iamplitude, isustain, iamplitude, irelease, 0.0; AUDIOasig		pluck 	kamp, ifrequency, ifrequency, 0, 1af1		reson	asig, 110, 80af2		reson	asig, 220, 100af3		reson	asig, 440, 80aout		balance 0.6 * af1 + af2 + 0.6 * af3 + 0.4 * asig, asig		outs 	aout * ileftpan, aout* irightpanendin
instr 45 ; Kung FM with variable delay; INITIALIZATION; Normalize to 80 dB = ampdb(80).iamplitude = 	ampdb(p5) * 15848.926 / 9000ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10iattack 	= 	.05irelease 	= 	.1	if p3 > .15 then goto longenvelopep3 	= 	.15	longenvelope:iattack 	= 	p3/3isustain 	= 	p3/3irelease 	= 	p3 - (iattack + isustain)ip6 	= 	.4ip7 	= 	2.2ishift	=	8.0 / 1200.0ipch	=	cpsoct(p4)ioct	=	p4; LOGGING; p1 	= 	Instrument; p2 	= 	Start; p3 	= 	Length; p4 	= 	Octave; p5 	= 	Decibels; p6 	= 	Pan	print p2, p3, p4, p5, p6, p7; KONTROLkadsr	linseg	0,iattack,1,isustain,1,irelease,0kmodi	linseg	0,iattack,5,isustain,3,irelease,0kmodr	linseg	ip6,p3,ip7	;r moves from ip6 to ip7 in p3 secs.; AUDIOa1	=	kmodi*(kmodr - 1/kmodr)/2a1ndx	=	abs(a1*2/20)	;a1*2 is argument normalized from 0-1.a2	=	kmodi*(kmodr + 1/kmodr)/2a3	tablei	a1ndx,43,1	;look up table is in f43, normalized index.ao1	oscili	a1,ipch,42		;cosinea4	=	exp(-0.5*a3+ao1)ao2	oscili	a2*ipch,ipch,42		;cosineaoutl	oscili	iamplitude*kadsr*a4,ao2+cpsoct(ioct+ishift),1	;final output leftaoutr	oscili	iamplitude*kadsr*a4,ao2+cpsoct(ioct-ishift),1	;final output rightaoutl1 	vdelay 	aoutl, sr/10, sr/10aoutr1	vdelay 	aoutr, sr/12, sr/12	outs	ileftpan * (aoutl + aoutl1), irightpan * (aoutr + aoutr1)endin
instr 46 ; Morrill FM Trumpet; Original pfields; Carriers; f1  0  512  10  1; Envelopes; f31 0  512  -7  -1 150 .1 110 0 252 0      ; portamento deviation function; p1 	p2 	p3 	p4 	p5 	p6 	p7	p8; inst 	start  	idur 	iamp 	ifq1  	imax1 	ifq2  	imax2; i1  	0  	1  	8000  	250   	2.66  	1500  	1.8if1	=	41if31	=	31p3	=	.03 + p3 + .15idur	=	p3ifq1	= 	cpsoct(p4); Normalize to 80 dB = ampdb(80).iamp	= 	ampdb(p5) * 15848.926 / 2996ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10imax1     	= 	2.66ifq2      	= 	1500imax2     	= 	1.8ifqm      	= 	ifq1iratio    	= 	imax2 / imax1; Vibrato generator.ivibwidth 	= 	.007irandev   	= 	.003 ;.007ifqr      	= 	125ivibrate  	= 	7iportdev  	= 	.03; Vibrato signalkwidth  	linseg   	0, .6, ivibwidth, idur  -  .6  -  .2, ivibwidth, .2, 0kv1     	randi    	irandev, ifqrkv2     	oscili   	kwidth, ivibrate, if1kv3     	oscili   	iportdev, 1/ idur, if31kv      	=        	(1 + kv1) * (1 + kv2) * (1 + kv3); Double-carrier, single modulator instrument.kdyn    	linseg   	0, .03, 1, idur - .03 - .01, .9, .01, 0amod    	oscili   	kdyn * ifqm * imax1, ifqm * kv, if1kamp1   	linseg   	0, .03, 1, idur - .03  -  .15, .9, .15, 0a1      	oscili   	kamp1 * iamp, amod + (ifq1 * kv), if1kamp2   	linseg   	0, .03, 1, idur  -  .03  - .3, .9, .3, 0a2      	oscili   	kamp2 * iamp * .2, (amod * iratio) + (ifq2 * kv), 1aout      	=	a1 + a2	outs	aout * irightpan, aout * ileftpanendin
instr 47 ; Fitch Marimba; INITIALIZATIONiamplitude 	= 	ampdb(p5) * 15848.926 /  2800.0ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10i1 		= 	cpsoct(p4)ip6 		= 	.15i2 		= 	log(i1)/10.0 - ip6icosinetable = 	34if p3 > .06 then goto longenvelopep3 	= 	.06	longenvelope:; LOGGING; p1 = Instrument; p2 = Time; p3 = Duration; p4 = Octave; p5 = Decibels; p6 = Phase; p7 = X; p8 = Y; p9 = Z;		print 	p2, p3, p4, p5, p6, p7, p8, p9; KONTROL; Envelope.k1 	expseg  	.0001, .03, iamplitude, p3 - .03, .001k25 	linseg  	1, .03, 1, p3- .03, 3k1	= 	k25 * k1; Power to partials.k10 	linseg 	2.25, .03, 3, p3 - .03, 2; AUDIOa1 	gbuzz 	k1, i1, k10, 0, 35, icosinetablea2 	reson 	a1, 500, 50, 1a3 	reson 	a2, 1500, 100, 1a4 	reson 	a3, 2500, 150, 1a5 	reson 	a4, 3500, 150, 1a6 	balance 	a5, a1i6 	= 	ip6a7 	= 	a6 * ileftpana8 = 	a6 * irightpan	outs 	a7, a8endin
instr 48 ; Cook bowed string; INITIALIZATIONiattack 	= 	0.05isustain	=	p3irelease 	= 	0.05p3		=	iattack + isustain + irelease + 0.5ifrequency 	= 	cpsoct(p4); Normalize to 80 dB = ampdb(80).iamplitude 	= 	ampdb(p5) * 15848.926 / 59718844.0ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ip8		=	p8ip9		=	p9ijunk10		=	p10; Slightly randomize the following variables for using the instrument in choirs.ibowrand	iunirand 0.04ibowpressure	=	2.8 + ibowrandibowpointrand	iunirand 0.05ibowpoint	=	0.124 + ibowpointrandivibehzrand	iunirand 1.0ivibehz		=	4.25 + ivibehzrandivibeamprand	iunirand 0.002ivibeamp	=	0.01 + ivibeamprandifunction	=	42; Instrument decreases in virtual size with increasing pitch.ibodyhz		=	cpsoct(p4 / 2)ibodybandhz	=	ibodyhz ibighz		=	ibodyhz * 3.0ibigbandhz	=	ibighz ilittlehz	=	ibighz * 2.0ilittlebandhz	=	ilittlehz; LOGGING; p1 = Instrument; p2 = Time; p3 = Duration; p4 = Octave; p5 = Decibels; p6 = Phase; p7 = X; p8 = Y; p9 = Z;		print 	p2, p3, p4, p5, p6, p7, p8, p9; KONTROLkdamping	linseg	0, iattack, 1.0, isustain, 1.0, irelease, 0.0kvibeenv	linseg 	0, iattack, 0.5, isustain * 0.2, 1.0, isustain * 0.8, 1.0, irelease, 0.0; AUDIOasig1		wgbow	1.0, ifrequency, ibowpressure, ibowpoint, ivibehz, kvibeenv * ivibeamp, ifunctionaformant1	reson	asig1, ibodyhz, ibodybandhzaformant2	reson	asig1, ibighz, ibigbandhzaformant3	reson	asig1, ilittlehz, ilittlebandhzasig2		balance 2.0 * aformant1 + aformant2 + 3.0 * aformant3 + 2.0 * asig1, asig1asig3		=	asig2 * kdamping * iamplitude		outs 	ileftpan * asig3, irightpan * asig3endin
instr 49 ; Cook B3; INITIALIZATIONiattack 	= 	0.01isustain	=	p3irelease 	= 	0.18p3		=	iattack + isustain + ireleaseifrequency 	= 	cpsoct(p4); Normalize to 80 dB = ampdb(80).iamplitude 	= 	ampdb(p5) * 15848.926 / 2000.0ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle)) * iamplitudeirightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle)) * iamplitudeijunk8		=	p8ijunk9		=	p9ijunk10		=	p10iindex		=	2icrossfade	=	1.2ivibedepth	=	0.2iviberate	=	7ifn1		=	42ifn2		=	42ifn3		=	42ifn4		=	42ivibefn		=	42; LOGGING; p1 = Instrument; p2 = Time; p3 = Duration; p4 = Octave; p5 = Decibels; p6 = Phase; p7 = X; p8 = Y; p9 = Z;		print 	p2, p3, p4, p5, p6, p7, p8, p9; KONTROLkenvelope 	expseg 	.000001, iattack, 1.0, isustain, 1.0, irelease, .000001; AUDIOasignal		fmb3 	1.0, ifrequency, iindex, icrossfade, ivibedepth, iviberate, ifn1, ifn2, ifn3, ifn4, ivibefnaout		butterlp	asignal, ifrequency + cpsoct(5)aout1		balance	aout, asignal		outs 	ileftpan * aout1 * kenvelope, irightpan * aout1 * kenvelopeendin
instr 50 ; Kung Plucked Strings Chorused Pitch-Shifted Delayed Exponentially; Normalize to 80 dB = ampdb(80).iamplitude = 	ampdb(p5) * 15848.926 / 6375ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10ishift		=	8.0 / 1200.0ihz		=	cpsoct(p4)ioct		=	p4; LOGGING; p1 		= 	Instrument; p2 		= 	Start; p3 		= 	Length; p4 		= 	Octave; p5 		= 	Decibels; p6 		= 	Phase; p7		=	Pan;		print 	p2, p3, p4, p5, p6, p7; KONTROLkvib		oscil	1.0 / 120.0, ihz / 50.0, 41; AUDIOag		pluck	iamplitude, cpsoct(ioct + kvib), iamplitude / 2, 1, 1agleft		pluck	iamplitude, cpsoct(ioct + ishift), iamplitude / 2, 1, 1agright		pluck	iamplitude, cpsoct(ioct - ishift), iamplitude / 2, 1, 1kf1		expon 	.1, p3, 1.0	;exponential from 0.1 to 1.0kf2		expon	1.0, p3, .1	;exponential from 1.0 to 0.1adump		delayr	2.0		;set delay line of 2.0 sec		delayw	ag		;put ag signal into delay line.atap1		deltapi	kf1		;tap delay line with kf1 function.atap2		deltapi      kf2		;tap delay line with kf2 function.ad1		deltap	2.0		;delay 2 sec.ad2		deltap	1.1		;delay 1.1 sec.	outs	ileftpan * (agleft + atap1 + ad1), irightpan * (agright + atap2 + ad2)endin
instr 51 ; Kung Plucked String Chorused Pitch-Shifted Delayed; INITIALIZATIONiattack 	= 	0.015isustain 	= 	p3irelease 	= 	0.03p3 		= 	iattack + isustain + ireleaseioct 		= 	p4ihz		=	cpsoct(ioct); The shift should decrease with increasing pitch.ishift      	= 	(10.0 - p4) / 1200.0ihz1		= 	cpsoct(p4 + ishift)ihz2		=	cpsoct(p4 - ishift); Normalize to 80 dB = ampdb(80).iamplitude 	= 	ampdb(p5) * 15848.926 / 21856.9ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10iag		=	1isine		=	41icosine		=	42; LOGGING; p1 		= 	Instrument; p2 		= 	Start; p3 		= 	Length; p4 		= 	Octave; p5 		= 	Decibels; p6 		= 	Phase; p7		=	Pan;		print 	p2, p3, p4, p5, p6, p7; KONTROL; kvib 		oscili	1.0 / 120.0, ihz / 50.0, 41kvib 		oscili 	1.0 / 80.0, 4.0 + (p4 / 8.0), icosine; AUDIOadamping	linseg 	0.0, iattack, 1.0, isustain, 0.25, irelease, 0.0ag 		pluck 	iamplitude, ioct + kvib, 60.0, iag, 1agleft 		pluck 	iamplitude, ihz1, 60.0, isine, 1agright 	pluck 	iamplitude, ihz2, 60.0, icosine, 1abuffer		delayr 	0.5; Put ag signal into delay line.ad1 		deltapi	0.1ad2 		deltapi	0.21		delayw 	ag + 0.25 * ad2; Combine signals, and filter out low frequency that causes speaker cone excursions.asigleft0	=	agleft + ad1asigright0	=	agright + ad2asigleft1	butterhp	asigleft0, 30.0asigright1	butterhp	asigright0, 30.0asigleft2	balance	asigleft1, asigleft0asigright2	balance	asigright1, asigright0asignal		=	(asigleft2 + asigright2) * adamping		outs 	ileftpan * asignal, irightpan * asignalendin
instr 52 ; Nelson Marimba; INITIALIZATIONifrequency = 	cpsoct(p4)iattack 	= 	.02irelease 	= 	p3isustain 	= 	p3 - (iattack + irelease)	if isustain > 0 goto longenvelopeisustain 	= 	0p3 	= 	iattack + isustain + irelease	longenvelope:; Normalize to 80 dB = ampdb(80).iamplitude = 	ampdb(p5) * 15848.926 /  4185ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10kformant1 	= 	ifrequency / 2.1kformant2 	= 	kformant1 * 2.1kformant3 	= 	kformant2 * 2.1; LOGGING; p1 		= 	Instrument; p2 		= 	Start; p3 		= 	Length; p4 		= 	Octave; p5 		= 	Decibels; p6 		= 	Phase; p7		=	Pan;		print 	p2, p3, p4, p5, p6, p7; KONTROL; Amplitude envelopek1  	expseg  	.000001, iattack, iamplitude , irelease, .000001k25  	linseg 	1, iattack, 1, irelease,4k1 	=  	k25 * k1; Power to partials.k10 	linseg  	2.25, iattack, 3, irelease, 2a1 	gbuzz 	k1, ifrequency, k10, 0, 35, 42a2 	reson 	a1, kformant1, kformant1 * .05, 1a3 	reson 	a1, kformant2, kformant2 * .05, 1a4 	reson 	a1, kformant2, kformant2 * .05, 1a8 	balance 	a4, a1ga1 	= 	a8 * ileftpanga2 	= 	a8 * irightpan	outs  	ga1, ga2endin
instr 53 ; Kung FM Modulated Left and Right Detuned Chorusing; INITIALIZATIONipch        	=       cpsoct(p4)ioct        	=       p4iamplitude	= 	ampdb(p5) * 15848.926 / 5881.0ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10ip6 = 0.3ip7 = 1.2; The shift should decrease with increasing pitch.ishift      	= 	(14.0 - (p4 / 16.0) * 16.0) / 1200.0ifunction = 43icosine = 42isine = 41; LOGGING; p1 		= 	Instrument; p2 		= 	Start; p3 		= 	Length; p4 		= 	Octave; p5 		= 	Decibels; p6 		= 	Phase; p7		=	Pan;		print 	p2, p3, p4, p5, p6, p7;		print 	ishift; KONTROL; ADSR envelopekadsr       	linseg	0.0, p3 / 3.0, 1.0, p3 / 3.0, 1.0, p3 / 3.0, 0.0; ADSR envelope for Ikmodi       	linseg	0.0, p3 / 3.0, 5.0, p3 / 3.0, 3.0, p3 / 3.0, 0.0; r moves from ip6 to ip7 in p3 sec.kmodr       	linseg	ip6, p3, ip7; AUDIOa1          	=	kmodi * (kmodr - 1.0 / kmodr) / 2.0; a1 * 2 is normalized over [0, 1].a1ndx       	=	abs(a1 * 2.0 / 20.0)a2          	=	kmodi * (kmodr + 1.0 / kmodr) / 2.0; Lookup table with normal indexa3          	tablei      a1ndx, ifunction, 1ao1         	oscili      a1, ipch, icosinea4          	=           exp(-0.5 * a3 + ao1)ao2         	oscili      a2 * ipch, ipch, icosineaoutl       	oscili      iamplitude * kadsr * a4, ao2 + cpsoct(ioct + ishift), icosineaoutr       	oscili      iamplitude * kadsr * a4, ao2 + cpsoct(ioct - ishift), isine            	outs        ileftpan * aoutl, irightpan * aoutrendin
instr 54 ; Plucked String; INITIALIZATIONiattack 	= 	.012irelease 	= 	.075isustain 	= 	p3 - (iattack + irelease)	if isustain > 0 goto longenvelopeisustain 	= 	0p3 		= 	iattack + isustain + irelease	longenvelope:ifrequency 	= 	cpsoct(p4); Normalize to 80 dB = ampdb(80).iamplitude = 	ampdb(p5) * 15848.926 / 5398.0ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10; LOGGING; p1 		= 	Instrument; p2 		= 	Start; p3 		= 	Length; p4 		= 	Octave; p5 		= 	Decibels; p6 		= 	Pan		print 	p2, p3, p4, p5, p6, p7; KONTROLkenvelope 	expseg 	.00001, iattack, iamplitude, isustain, iamplitude, irelease, .00001; AUDIOasignal1 	pluck 	1, ifrequency, ifrequency * 1.002, 0, 1asignal2 	pluck 	1, ifrequency * 1.003, ifrequency, 0, 1apluckout 	= 	(asignal1 + asignal2) * kenvelope	outs 	ileftpan * apluckout, irightpan * apluckoutendin
instr 55 ; Nelson Shimmer; INITIALIZATIONiduration 	= 	p3ifrequency = 	cpsoct(p4); Normalize to 80 dB = ampdb(80).iamplitude = 	ampdb(p5) * 15848.926 / 2480.4ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10ipower 	= 	3; LOGGING; p1 	= 	Instrument; p2 	= 	Start; p3 	= 	Length; p4 	= 	Octave; p5 	= 	Decibels; p6 	= 	Pan	print p2, p3, p4, p5, p6, p7; KONTROLk1 	linseg 	0, iduration / 2, iamplitude, iduration / 2, 0k2 	randi 	2, 25k3 	oscili 	.03, 4 + k2, 1; AUDIOa1 	gbuzz 	.33 + k3, ifrequency, ipower, 1, 50, 4k4 	randi 	1.2, 15k5 	oscili 	.03, 4 + k2, 1a2 	gbuzz 	.33 + k5, ifrequency + (ifrequency *.02), ipower, 1, 50, 4k6 	randi 	1.5, 20k7 	oscili 	.03, 4 + k2, 1a3 	gbuzz 	.33 + k7, ifrequency - (ifrequency * .021), ipower, 1, 50, 4a4 	= 	(a1 + a2 + a3) * k1	outs 	a4 * ileftpan, a4 * irightpanendin
instr 56 ; Cook Wurlitzer; INITIALIZATIONiattack 	= 	0.001isustain	=	p3irelease 	= 	0.18p3		=	iattack + isustain + ireleaseifrequency 	= 	cpsoct(p4); Normalize to 80 dB = ampdb(80).iamplitude 	= 	ampdb(p5) * 15848.926 / 2000.0ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle)) * iamplitudeirightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle)) * iamplitudeijunk8		=	p8ijunk9		=	p9ijunk10		=	p10iindex		=	1icrossfade	=	1.2ivibedepth	=	0.2iviberate	=	8ifn1		=	42ifn2		=	42ifn3		=	42ifn4		=	182ivibefn		=	42; LOGGING; p1 = Instrument; p2 = Time; p3 = Duration; p4 = Octave; p5 = Decibels; p6 = Phase; p7 = X; p8 = Y; p9 = Z;		print 	p2, p3, p4, p5, p6, p7, p8, p9; KONTROLkenvelope 	expseg 	.000001, iattack, 1.0, isustain, 1.0, irelease, .000001; AUDIOasignal		fmwurlie 1.0, ifrequency, iindex, icrossfade, ivibedepth, iviberate, ifn1, ifn2, ifn3, ifn4, ivibefn		outs 	ileftpan * asignal * kenvelope, irightpan * asignal * kenvelopeendin
instr 57 ; Lyon Girth; Original score; f1 0 8192 10 1; f2 0 8192 10 1 .5 .3 .2 .1 .1 0 0 .1 0 .05; f3 0 8192 10 1 .2 .1; p1 	p2 	p3 	p4 	p5 	p6 	p7 	p8; i2 	0.000000 	6.151560 	82.500000 	0.400355 	4.708251 	5.450541 	2.014654ifreq	=  	cpsoct(p4)ivsp 	= 	1 * 2.014654igain	= 	ampdb(p5) * 15848.926 / 22862ijunk6		=	p6; Constant-power pan.; x location ranges from hard left = -1 through center = 0 to hard right = 1.; angle of pan ranges from hard left = - pi / 2 through center = 0 to hard right = pi / 2.ix 		=	p7iangle		=	ix * 3.14159265359 / 2.0ileftpan	=	sqrt(2.0) / 2.0 * (cos(iangle) + sin(iangle))irightpan	=	sqrt(2.0) / 2.0 * (cos(iangle) - sin(iangle))ijunk8		=	p8ijunk9		=	p9ijunk10		=	p10ivd1 	= 	.04/2ivd2 	= 	.01/2ivs1 	= 	4.708251ivs2 	= 	5.450541iatk1 	= 	.05iatk2 	= 	.4idk 	= 	1.3isust 	= 	p3p3 	=	isust + iatk1 + iatk2 + idkiddepth 	= 	.002kenv	linseg 	0, iatk1,  .1 * igain, iatk2, igain, idk, igain * .2, isust, 0kringenv 	linseg 	0, .02, igain * .5, 1.98, 0, p3 - 2, 0kvd	line 	ifreq * ivd1, p3, ifreq * ivd2kvibr	oscili 	kvd, ivsp,1	;sinekfreq 	= 	kvibr + ifreqkfadedown line 	1, p3, 0kfadeup	line 	0, p3, 1kfstvib1 	oscili 	ifreq * .02, ivs1, 1kfstvib2 	oscili 	ifreq * .02, ivs2, 1kfreq1 	= 	kfreq + kfstvib1kfreq2 	= 	kfreq + kfstvib2asig1	oscili 	kfadedown, kfreq1, 2	; rich waveasig2	oscili 	kfadeup, kfreq1, 3 ;	few harmonixamix1	= 	asig1 + asig2amod1	oscili 	1.0, kfreq1 * 2 + (kfreq1 * kfadeup * amix1 * 3), 1asig3	oscili 	kfadedown, kfreq2, 2	; rich waveasig4	oscili 	kfadeup, kfreq2, 3 ;	few harmonixamix2	= 	asig3 + asig4amod2	oscili 	1.0, kfreq2 * 2 + (kfreq2 * kfadeup * amix2 * 3), 1aring 	= 	amod1 * amod2 * kringenvaleft 	=  	(amix1 + amod1) * kenv + aringaright 	=  	(amix2 + amod2) * kenv + aring	outs 	aleft, arightendin
</CsInstruments>
<CsScore>
f0 1000
f 1 	0 	65537	10 	1 ; Sine wave.
f 2  	0 	4096 	10 	1 .2 .08 .07 ; Flute-like.
f 3  	0 	4096 	10 	1 .4 .2 .1 .1 .05
f 4  	0 	512 	7 	0 1 0 49 .2 90 .6 40 .99 25 .9 45 .5 50 .25 50 .12 50 .06 50 .02 62 0
f 5  	0 	512	7 	0 1 0 49 .2 100 .6 50 .99 150 .2 162 0
f 6  	0 	512 	7 	0 1 0 49 .2 200 .5 100 .2 162 0
f 7  	0 	512 	7 	0 1 0 79 .5 60 .5 20 .99 120 .4 140 .6 92 0
f 8 	0 	513 	5 	.001 513 1 ; Exponential rise.
f 12  	0 	512 	9 	1 .26 0
f 13  	0 	512 	9 	1 .3 0
f 20	0	8193	20	3  1 ; Triangle  window.
f 23  	0 	512 	9 	1 1 0
f 24  	0 	512 	-7 	3000 71 3000 168 2300 100 2100 71 2000 102 2000
f 25  	0 	512 	-7 	.025 71 .02 102 .025 71 .05 268 .06
f 26  	0 	512 	-7 	.25 71 .25 102 .08 .05 339 .05
f 27  	0 	512 	-7 	5 71 2.3 102 1.5 237 2.5 102 2.3
f 28  	0 	512 	-7 	5 512 6.5
f 30  	0 	8192 	10 	1
f 31  	0 	2048 	19 	.5 1 270 1
f 32  	0 	512 	-7 	-1 150 .1 110 0 252 0
f 33  	0 	1024 	10 	.3 0 0 0 .1 .1 .1 .1 .1 .1
f 34  	0  	8192  	9  	1 1 90 ; Cosine for Fitch instruments.
f 41  	0 	65537	10 	1  ; Sine wave.
f 42  	0 	65537	11 	1  ; Cosine wave. Get that noise down on the most widely used table!
f 43  	0 	8193 	-12 	20.0  ; Unscaled ln(I(x)) from 0 to 20.0.
f 44  	0 	4097 	10 	1 .25 .1 ; Kelley flute.
f 45  	0 	2049 	7 	-1 1800 1 249 -1 ; Kelley string.
f 46  	0 	2049	7 	-1 1024 1 1024 -1 ; Kelley harpsichord.
f 47  	0 	2049 	10 	1 0 1 0 1 ; Kelley oboe.
f 48  	0  	2049 	10 	3 1 0 .25 .3 .76 ; Nelson Chebyshev.
f 49  	0  	2049 	13 	1 1 .9 .8 .7 .6 .5 .4 .3 .2 .1 ; Nelson table lookup.
f 50  	0 	8193 	20 	2 1 ; Hanning window.
f 51  	0 	8193 	-10  	809 14581 2030 990 522 1545 2030 262 61 45 45 64 465  139 19 75 29 42 39 96 86 75 39 45 ; Horner Erhu
f 52  	0 	8193 	-10 	1567 910 870  3119 595 151 45  111 123 31 41 127  148 196 124 142 49 22 22 59 74 37 ; Horner Erhu
f 53  	0 	8193 	-10 	2411 1158 352 922 854 70 66 152 83 15 69 69 92 91 60 30  42 78 38 41 59 22 ; Horner Erhu
f 54  	0 	8193 	-10 	18607 805 771 832 115 166 115 21 66 22 135 165 18 41 85  27 93 23 8 15 23 7 ; Horner Erhu
f 55  	0 	8193 	7  	0 	819 1.1 819 1.2 820 1.4 819 1.2 819 1.15 820 0 8200 0 ; Horner Erhu
f 61  	0 	8193 	-10  	30 37 282 99 29 327 96 77 102 11 45 7 4 3 1 1; Horner Pipa
f 62  	0 	8193 	-10  	324 300 144 160 383 847 1311 1121 885 586 125 174 269  100 428 190 563 294 178 236 169 173 75 57 52 57 131 43 134 77 54 51  60 107 51 274 54 30 23 66 20 12 ; Horner Pipa
f 63  	0 	8193 	-10  	79 51 133 10 21 20 7 3 11 4 3 2 1 2 1 2 ; Horner Pipa
f 64  	0 	8193 	-10  	475 207 545 323 104 1890 1304 1031 350 269 245 180  200 43 45 14 13 8 13 34 16 28 16 3 3 ; Horner Pipa
f 65  	0 	8193 	-10  	8 24 10 14 35 30 19 31 16 16 11 6 2 7 8 9 13 11 3 2 3  1 4 2 2 2 1 2 2 1 3 3 1 4 2 3 1; Horner Pipa
f 66  	0  	2049 	13 	1 	1 .9 .8 .7 .6 .5 .4 .3 .2 .1 ;gen 13 table lookup (was 31)
f 67  	0  	2049 	13 	1 	1 .9 .8 .7 .6 .7 .8 .9 1 ;gen 13 table lookup (was 32)
f 68  	0 	8193  	20 	7 1 2 ; Semi-rectangular Kaiser window.
f 69  	0 	16384 	9 	.5 1 0 ; Half-sine window.
f 77  	0 	4096 	10 	.28 1 .74 .66 .78 .48 .05 .33 .12 .08 .01 .54 .19 .08 .05 .16 .01 .11 .3 .02 .2 ; Bergeman f1
f 100  	0 	2048 	-17 	0 101 575 102 625 103 675 104 725 105 775 106 825 107 875 108 925 109 975 110 1025 111  1075 112 1125  113 1175  114 ; Steinway octave : tablenumber
f 101  	0 	2048 	-17 	0 5.5  575      6 625  6.5 675      7 725  7.5 775      8 825  8.5  875     9 925  9.5833333333333  975   10 1025 10.5 1075   11 1125 11.5 1175     12 ; Steinway octave : baseoctave
f 121  	0  	4096 	10 	1
f 122  	0  	4096 	10 	.45 .31 .38 .9 .32 .28 0 0 .2 .18 0 0 0 0 .2 .3 .4 .24 .24 .24 .3
f 123  	0  	4096 	10 	.86 .9 .32 .2 0 0 0 0 0 0 0 0 0 .3 .5
f 124  	0  	4096 	10 	.34 .9 .88 .32 0 .32 0 .32 0 .22 .29 0 .29 0 .29 0 .52 0 .34 0 .49 0 .52
f 125  	0  	4096 	10 	.52 0 .86 0 .2 .156 0 .156 0 0 .156 0 .156 0 .28 0 .48 0 .4 0 .7 0 .22
f 126  	0  	4096 	10 	.3 .3 .44 .34 .56 .3 .06 .03
f 127  	0  	4096 	10 	.28 1 .74 .66 .78 .48 .05 .33 .12 .08 .01 .54 .19 .08 .05 .16 .01 .11 .3 .02 .2
f 128  	0  	4096 	10 	.6 .4 1 .22 .09 .24 .02 .06 .05
f 129  	0  	4096 	10 	1 .41 .95 .45 .18 0 .05
f 130  	0  	4096 	10 	1 1 .1 .2 .156 .02 .02 .02
f 131  	0  	4096 	10 	1 0 .5 .1 .6 .3 .5 .3 .1 .01
f 132  	0  	4096 	10 	1 .7 .12 .5 .08 0 0 .02 .05 0 0 .03
f 133  	0  	4096 	10 	.9 1 .2 .1 .3 .1 0 0 .05
f 134  	0  	4096 	10 	.3 .1 .6 .15
f 135  	0  	4096 	10 	1 0 0 0 0 0 1 0 0 0 1 0
f 136  	0  	512 	7 	0   128 1 128 .7 128 .7 128  0
f 137  	0  	512 	5 	.01 128 1 128 .7 128 .7 128 .01
f 138  	0  	512 	7 	1   128 .8 128  .6 128  .4  64  .2 64 0
f 139  	0  	512 	5 	1   128 .8 128  .4  64  .6  32  .2 32 .4 64 .2 64 .01
f 140  	0  	512 	7 	0 128 1 128 .7 128 .5 128 0
f 141  	0  	512 	7 	0  64 1 128 .8 64 .6 128 .4 128 0
f 142  	0  	512 	7 	0   128 .5 128 1 128 .7 128 0
f 143  	0  	9 	-2 	110 146.6 165  293 330 440 586.4 660 880
f 144  	0  	17 	-2 	27.5  41.25 55 73.3 82.5 110 146.6 165 220 293 330 440 586.4 660 880 1172.8 1320
f 145  	0   	8 	-2 	220 293 330 440 586.4 660 1172.8 1320
f 146  	0   	5 	-2 	27.5 36.65 41.25 55 73.3 82.5
f 151  	0   	2048 	10 	1 ; Pinkston wavestat
f 152  	0   	2048 	10 	0 1; Pinkston wavestat
f 153  	0   	2048 	10 	0 0 1; Pinkston wavestat
f 154  	0   	2048 	10 	0 0 0 1; Pinkston wavestat
f 155  	0   	513  	5 	.01 513 1; Pinkston wavestat
f 160  	0  	8192 	10 	8 8 8 4 0 5 0 3 0 0 0 0 0 0 0 8 ; Tone wheel organ drawbars
f 161  	0  	256 	7 	0 110 .3 18 1 18 .3 110 0 ; Tone wheel organ Leslie envelope 1
f 162  	0  	256 	7 	0 80 .5 16 1 64 1 16 .5 80 0 ; Tone wheel organ Leslie envelope 1
f 163	0 	1024 	8 	-.8 42 -.78 100 -.7 740 .7 100 .78 42 .8; Tone wheel organ Leslie envelope 1
f 164	0 	513 	5 	.0001 33 1 480 .000001; Pinkston ticker3
f 165 	0 	257 	7 	.5 128 1 129 .25; Pinkston ticker3
f 166 	0 	257 	7 	0 128 1 129 0; Pinkston ticker3
f 167 	0.0 	513 	7  	0 513 1; Pinkston koto linear rise
f 168 	0.0 	513 	7  	1 513 0; Pinkston koto linear fall
f 169 	0.0 	513 	5   	.001 513 1; Pinkston koto exponential rise
f 170 	0.0 	513 	5 	1 513 .001; Pinkston koto exponential fall
f 171 	0.0 	512 	10 	1 1 1 1 1 1 1 1 1; Pinkston koto buzz-like wave
f 172 	0 	257  	4  	4  1; Pinkston waveshaper normalizing function with midpoint bipolar offset:
f 173 	0 	513 	13  	1  1  0  1 -.8 0 .6  0  0  0 .4  0   0   0   0  .1 -.2 -.3  .5; Pinkston waveshaper transfer func1: h0 h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16
f 174 	0 	513 	13  	1  1  0  0  0 -.1 0 .3  0 -.5 0 .7   0 -.9   0   1   0  -1   0; transfer func2: h0 h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16
f 175 	0 	513 	13  	1  1  0  0  0  0  0  0  0 -1  0  1   0   0 -.1   0  .1   0 -.2  .3   0 -.7   0  .2   0 -.1; transfer func3: h0 h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17 h18 h19 h20 h21 h22 h23
f 176  	0  	129   	9  	.4 1   0; Pinkston Fazex phasing instrument envlpx attack function
f 177  	0  	512  	10   	1 .1  .4  .1  .2  .3  .4  .3  .2  .1; Pinkston Fazex fundamental timbre function A
f 178  	0  	512  	10   	0   0  .4   0   0  .2   0  .1  .2  .3  .4  .5  .6  .7  .8  .9; Pinkston Fazex fundamental timbre function B
f 179 	0  	129   	9  	.5   1   0; Pinkston Fazex attack envelope function
f 180  	0  	129   	7  	.4  50  .4  50 .15  29  .1; Pinkston Fazex vibrato scaling function
f 181  	0  	129   	7   	0  129  1; Pinkston Fazex transient removal gate function
f 182	0	513	10	0 ; Blank wavetable for some Cook FM opcodes
i  1.000000000 299.969000000 13.000000000 5.083333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 287.949000000 13.000000000 5.583333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 287.949000000 13.000000000 5.583333333 66.000000000 1.250000000 1.000000000
i  1.000000000 281.022000000 13.000000000 5.000000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 262.992000000 13.000000000 5.750000000 66.000000000 1.250000000 1.000000000
i  1.000000000 294.210000000 13.000000000 5.750000000 66.000000000 1.250000000 1.000000000
i  1.000000000 276.430000000 13.000000000 6.916666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 269.503000000 13.000000000 6.333333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 269.503000000 13.000000000 6.333333333 66.000000000 1.250000000 1.000000000
i  1.000000000 289.525000000 13.000000000 6.500000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 279.135000000 13.000000000 5.666666667 66.000000000 1.250000000 1.000000000
i  1.000000000 261.104000000 13.000000000 6.416666667 66.000000000 1.250000000 1.000000000
i  1.000000000 286.562000000 13.000000000 7.083333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 274.542000000 13.000000000 7.583333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 274.542000000 13.000000000 7.583333333 66.000000000 1.250000000 1.000000000
i  1.000000000 267.615000000 13.000000000 7.000000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 249.585000000 13.000000000 7.750000000 66.000000000 1.250000000 1.000000000
i  1.000000000 280.803000000 13.000000000 7.750000000 66.000000000 1.250000000 1.000000000
i  1.000000000 300.000000000 13.000000000 8.250000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 287.980000000 13.000000000 8.750000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 287.980000000 13.000000000 8.750000000 66.000000000 1.250000000 1.000000000
i  1.000000000 281.053000000 13.000000000 8.166666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 263.022000000 13.000000000 8.916666667 66.000000000 1.250000000 1.000000000
i  1.000000000 263.022000000 13.000000000 8.916666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 263.022000000 13.000000000 8.916666667 66.000000000 1.250000000 1.000000000
i  1.000000000 256.096000000 13.000000000 8.333333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 265.728000000 13.000000000 7.583333333 66.000000000 1.250000000 1.000000000
i  1.000000000 265.728000000 13.000000000 7.583333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 247.697000000 13.000000000 8.333333333 66.000000000 1.250000000 1.000000000
i  1.000000000 247.697000000 13.000000000 8.333333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 247.697000000 13.000000000 8.333333333 66.000000000 1.250000000 1.000000000
i  1.000000000 240.770000000 13.000000000 7.833333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 222.740000000 13.000000000 8.500000000 66.000000000 1.250000000 1.000000000
i  1.000000000 222.740000000 13.000000000 8.500000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 222.740000000 13.000000000 8.500000000 66.000000000 1.250000000 1.000000000
i  1.000000000 225.445000000 13.000000000 7.250000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 245.466000000 13.000000000 7.416666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 245.466000000 13.000000000 7.416666667 66.000000000 1.250000000 1.000000000
i  1.000000000 229.265000000 13.000000000 7.833333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 259.298000000 13.000000000 8.083333333 66.000000000 1.250000000 1.000000000
i  1.000000000 248.908000000 13.000000000 7.166666667 66.000000000 1.250000000 1.000000000
i  1.000000000 258.539000000 13.000000000 6.500000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 240.509000000 13.000000000 7.250000000 66.000000000 1.250000000 1.000000000
i  1.000000000 240.509000000 13.000000000 7.250000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 240.509000000 13.000000000 7.250000000 66.000000000 1.250000000 1.000000000
i  1.000000000 233.582000000 13.000000000 6.666666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 215.552000000 13.000000000 7.416666667 66.000000000 1.250000000 1.000000000
i  1.000000000 215.552000000 13.000000000 7.416666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 215.552000000 13.000000000 7.416666667 66.000000000 1.250000000 1.000000000
i  1.000000000 208.625000000 13.000000000 6.833333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 218.257000000 13.000000000 6.166666667 66.000000000 1.250000000 1.000000000
i  1.000000000 218.257000000 13.000000000 6.166666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 200.226000000 13.000000000 6.916666667 66.000000000 1.250000000 1.000000000
i  1.000000000 200.226000000 13.000000000 6.916666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 200.226000000 13.000000000 6.916666667 66.000000000 1.250000000 1.000000000
i  1.000000000 193.300000000 13.000000000 6.333333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 175.269000000 13.000000000 7.083333333 66.000000000 1.250000000 1.000000000
i  1.000000000 206.487000000 13.000000000 7.083333333 66.000000000 1.250000000 1.000000000
i  1.000000000 225.684000000 13.000000000 7.583333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 213.664000000 13.000000000 8.083333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 213.664000000 13.000000000 8.083333333 66.000000000 1.250000000 1.000000000
i  1.000000000 206.737000000 13.000000000 7.500000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 188.707000000 13.000000000 8.250000000 66.000000000 1.250000000 1.000000000
i  1.000000000 219.925000000 13.000000000 8.250000000 66.000000000 1.250000000 1.000000000
i  1.000000000 202.144000000 13.000000000 9.416666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 195.218000000 13.000000000 8.833333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 195.218000000 13.000000000 8.833333333 66.000000000 1.250000000 1.000000000
i  1.000000000 215.239000000 13.000000000 9.000000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 204.850000000 13.000000000 8.166666667 66.000000000 1.250000000 1.000000000
i  1.000000000 186.819000000 13.000000000 8.916666667 66.000000000 1.250000000 1.000000000
i  1.000000000 212.277000000 13.000000000 9.583333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 200.257000000 13.000000000 10.083333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 200.257000000 13.000000000 10.083333333 66.000000000 1.250000000 1.000000000
i  1.000000000 193.330000000 13.000000000 9.500000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 175.300000000 13.000000000 10.250000000 66.000000000 1.250000000 1.000000000
i  1.000000000 206.517000000 13.000000000 10.250000000 66.000000000 1.250000000 1.000000000
i  1.000000000 188.737000000 13.000000000 11.416666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 181.811000000 13.000000000 10.833333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 181.811000000 13.000000000 10.833333333 66.000000000 1.250000000 1.000000000
i  1.000000000 201.832000000 13.000000000 11.000000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 191.442000000 13.000000000 10.083333333 66.000000000 1.250000000 1.000000000
i  1.000000000 173.412000000 13.000000000 10.833333333 66.000000000 1.250000000 1.000000000
i  1.000000000 151.160000000 13.000000000 9.750000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 171.181000000 13.000000000 9.916666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 171.181000000 13.000000000 9.916666667 66.000000000 1.250000000 1.000000000
i  1.000000000 154.980000000 13.000000000 10.333333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 185.013000000 13.000000000 10.583333333 66.000000000 1.250000000 1.000000000
i  1.000000000 174.623000000 13.000000000 9.666666667 66.000000000 1.250000000 1.000000000
i  1.000000000 141.267000000 13.000000000 9.916666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 134.340000000 13.000000000 9.333333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 134.340000000 13.000000000 9.333333333 66.000000000 1.250000000 1.000000000
i  1.000000000 154.362000000 13.000000000 9.500000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 143.972000000 13.000000000 8.666666667 66.000000000 1.250000000 1.000000000
i  1.000000000 125.941000000 13.000000000 9.416666667 66.000000000 1.250000000 1.000000000
i  1.000000000 100.984000000 13.000000000 9.583333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 94.057200000 13.000000000 9.000000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 94.057200000 13.000000000 9.000000000 66.000000000 1.250000000 1.000000000
i  1.000000000 114.079000000 13.000000000 9.166666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 103.689000000 13.000000000 8.333333333 66.000000000 1.250000000 1.000000000
i  1.000000000 103.689000000 13.000000000 8.333333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 103.689000000 13.000000000 8.333333333 66.000000000 1.250000000 1.000000000
i  1.000000000 123.711000000 13.000000000 8.500000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 137.542000000 13.000000000 9.083333333 66.000000000 1.250000000 1.000000000
i  1.000000000 137.542000000 13.000000000 9.083333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 127.152000000 13.000000000 8.250000000 66.000000000 1.250000000 1.000000000
i  1.000000000 127.152000000 13.000000000 8.250000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 127.152000000 13.000000000 8.250000000 66.000000000 1.250000000 1.000000000
i  1.000000000 147.173000000 13.000000000 8.416666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 136.784000000 13.000000000 7.583333333 66.000000000 1.250000000 1.000000000
i  1.000000000 136.784000000 13.000000000 7.583333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 136.784000000 13.000000000 7.583333333 66.000000000 1.250000000 1.000000000
i  1.000000000 170.636000000 13.000000000 8.333333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 154.435000000 13.000000000 8.750000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 154.435000000 13.000000000 8.750000000 66.000000000 1.250000000 1.000000000
i  1.000000000 153.128000000 13.000000000 8.083333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 128.826000000 13.000000000 8.666666667 66.000000000 1.250000000 1.000000000
i  1.000000000 158.859000000 13.000000000 8.916666667 66.000000000 1.250000000 1.000000000
i  1.000000000 172.690000000 13.000000000 9.583333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 162.300000000 13.000000000 8.750000000 66.000000000 1.250000000 1.000000000
i  1.000000000 162.300000000 13.000000000 8.750000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 162.300000000 13.000000000 8.750000000 66.000000000 1.250000000 1.000000000
i  1.000000000 182.322000000 13.000000000 8.916666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 171.932000000 13.000000000 8.000000000 66.000000000 1.250000000 1.000000000
i  1.000000000 171.932000000 13.000000000 8.000000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 171.932000000 13.000000000 8.000000000 66.000000000 1.250000000 1.000000000
i  1.000000000 191.953000000 13.000000000 8.166666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 205.785000000 13.000000000 8.833333333 66.000000000 1.250000000 1.000000000
i  1.000000000 205.785000000 13.000000000 8.833333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 195.395000000 13.000000000 7.916666667 66.000000000 1.250000000 1.000000000
i  1.000000000 195.395000000 13.000000000 7.916666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 195.395000000 13.000000000 7.916666667 66.000000000 1.250000000 1.000000000
i  1.000000000 215.416000000 13.000000000 8.083333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 205.026000000 13.000000000 7.250000000 66.000000000 1.250000000 1.000000000
i  1.000000000 186.996000000 13.000000000 8.000000000 66.000000000 1.250000000 1.000000000
i  1.000000000 162.039000000 13.000000000 8.166666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 155.112000000 13.000000000 7.583333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 155.112000000 13.000000000 7.583333333 66.000000000 1.250000000 1.000000000
i  1.000000000 175.134000000 13.000000000 7.750000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 164.744000000 13.000000000 6.916666667 66.000000000 1.250000000 1.000000000
i  1.000000000 146.713000000 13.000000000 7.666666667 66.000000000 1.250000000 1.000000000
i  1.000000000 124.461000000 13.000000000 6.583333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 144.483000000 13.000000000 6.750000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 144.483000000 13.000000000 6.750000000 66.000000000 1.250000000 1.000000000
i  1.000000000 128.281000000 13.000000000 7.083333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 158.314000000 13.000000000 7.333333333 66.000000000 1.250000000 1.000000000
i  1.000000000 147.924000000 13.000000000 6.500000000 66.000000000 1.250000000 1.000000000
i  1.000000000 114.568000000 13.000000000 6.666666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 107.641000000 13.000000000 6.166666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 107.641000000 13.000000000 6.166666667 66.000000000 1.250000000 1.000000000
i  1.000000000 127.663000000 13.000000000 6.333333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 117.273000000 13.000000000 5.416666667 66.000000000 1.250000000 1.000000000
i  1.000000000 99.242300000 13.000000000 6.166666667 66.000000000 1.250000000 1.000000000
i  1.000000000 124.700000000 13.000000000 6.833333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 112.680000000 13.000000000 7.333333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 112.680000000 13.000000000 7.333333333 66.000000000 1.250000000 1.000000000
i  1.000000000 105.753000000 13.000000000 6.750000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 87.722900000 13.000000000 7.500000000 66.000000000 1.250000000 1.000000000
i  1.000000000 118.941000000 13.000000000 7.500000000 66.000000000 1.250000000 1.000000000
i  1.000000000 101.161000000 13.000000000 8.666666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 94.234000000 13.000000000 8.083333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 94.234000000 13.000000000 8.083333333 66.000000000 1.250000000 1.000000000
i  1.000000000 114.256000000 13.000000000 8.250000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 103.866000000 13.000000000 7.416666667 66.000000000 1.250000000 1.000000000
i  1.000000000 85.835100000 13.000000000 8.166666667 66.000000000 1.250000000 1.000000000
i  1.000000000 111.293000000 13.000000000 8.833333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 99.272900000 13.000000000 9.333333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 99.272900000 13.000000000 9.333333333 66.000000000 1.250000000 1.000000000
i  1.000000000 92.346300000 13.000000000 8.750000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 74.315700000 13.000000000 9.500000000 66.000000000 1.250000000 1.000000000
i  1.000000000 105.534000000 13.000000000 9.500000000 66.000000000 1.250000000 1.000000000
i  1.000000000 124.731000000 13.000000000 10.000000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 112.711000000 13.000000000 10.500000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 112.711000000 13.000000000 10.500000000 66.000000000 1.250000000 1.000000000
i  1.000000000 105.784000000 13.000000000 9.916666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 87.753400000 13.000000000 10.666666667 66.000000000 1.250000000 1.000000000
i  1.000000000 87.753400000 13.000000000 10.666666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 87.753400000 13.000000000 10.666666667 66.000000000 1.250000000 1.000000000
i  1.000000000 80.826800000 13.000000000 10.083333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 90.458600000 13.000000000 9.416666667 66.000000000 1.250000000 1.000000000
i  1.000000000 90.458600000 13.000000000 9.416666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 72.428000000 13.000000000 10.166666667 66.000000000 1.250000000 1.000000000
i  1.000000000 72.428000000 13.000000000 10.166666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 72.428000000 13.000000000 10.166666667 66.000000000 1.250000000 1.000000000
i  1.000000000 65.501400000 13.000000000 9.583333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 47.470800000 13.000000000 10.333333333 66.000000000 1.250000000 1.000000000
i  1.000000000 47.470800000 13.000000000 10.333333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 47.470800000 13.000000000 10.333333333 66.000000000 1.250000000 1.000000000
i  1.000000000 50.175900000 13.000000000 9.083333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 70.197500000 13.000000000 9.250000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 70.197500000 13.000000000 9.250000000 66.000000000 1.250000000 1.000000000
i  1.000000000 53.996200000 13.000000000 9.583333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 84.028700000 13.000000000 9.833333333 66.000000000 1.250000000 1.000000000
i  1.000000000 73.638800000 13.000000000 9.000000000 66.000000000 1.250000000 1.000000000
i  1.000000000 83.270500000 13.000000000 8.250000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 65.239900000 13.000000000 9.000000000 66.000000000 1.250000000 1.000000000
i  1.000000000 65.239900000 13.000000000 9.000000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 65.239900000 13.000000000 9.000000000 66.000000000 1.250000000 1.000000000
i  1.000000000 58.313300000 13.000000000 8.500000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 40.282700000 13.000000000 9.166666667 66.000000000 1.250000000 1.000000000
i  1.000000000 40.282700000 13.000000000 9.166666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 40.282700000 13.000000000 9.166666667 66.000000000 1.250000000 1.000000000
i  1.000000000 33.356100000 13.000000000 8.666666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 42.987800000 13.000000000 7.916666667 66.000000000 1.250000000 1.000000000
i  1.000000000 42.987800000 13.000000000 7.916666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 24.957200000 13.000000000 8.666666667 66.000000000 1.250000000 1.000000000
i  1.000000000 24.957200000 13.000000000 8.666666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 24.957200000 13.000000000 8.666666667 66.000000000 1.250000000 1.000000000
i  1.000000000 18.030600000 13.000000000 8.083333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 0.000000000 13.000000000 8.833333333 66.000000000 1.250000000 1.000000000
i  1.000000000 31.217900000 13.000000000 8.833333333 66.000000000 1.250000000 1.000000000
i  1.000000000 50.415300000 13.000000000 9.333333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 38.395000000 13.000000000 9.833333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 38.395000000 13.000000000 9.833333333 66.000000000 1.250000000 1.000000000
i  1.000000000 31.468300000 13.000000000 9.250000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 13.437800000 13.000000000 10.000000000 66.000000000 1.250000000 1.000000000
i  1.000000000 44.655600000 13.000000000 10.000000000 66.000000000 1.250000000 1.000000000
i  1.000000000 26.875500000 13.000000000 11.166666667 66.000000000 -0.250000000 1.000000000
i  1.000000000 19.948900000 13.000000000 10.583333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 19.948900000 13.000000000 10.583333333 66.000000000 1.250000000 1.000000000
i  1.000000000 39.970500000 13.000000000 10.750000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 29.580600000 13.000000000 9.916666667 66.000000000 1.250000000 1.000000000
i  1.000000000 11.550000000 13.000000000 10.666666667 66.000000000 1.250000000 1.000000000
i  1.000000000 37.008200000 13.000000000 11.333333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 24.987800000 13.000000000 11.833333333 66.000000000 -0.250000000 1.000000000
i  1.000000000 24.987800000 13.000000000 11.833333333 66.000000000 1.250000000 1.000000000
i  1.000000000 18.061200000 13.000000000 11.250000000 66.000000000 -0.250000000 1.000000000
i  1.000000000 0.030575500 13.000000000 12.000000000 66.000000000 1.250000000 1.000000000
i  1.000000000 31.248400000 13.000000000 12.000000000 66.000000000 1.250000000 1.000000000



</CsScore>
</CsoundSynthesizer>
