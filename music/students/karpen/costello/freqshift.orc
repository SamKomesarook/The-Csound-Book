
; FREQUENCYSHIFTER.ORC
;
; Sean Costello
; costello@seanet.com
; March 24, 1999
;
; AN IMPLEMENTATION OF SINGLE-SIDEBAND (SSB) AMPLITUDE MODULATION.
; ESSENTIALLY SIMILAR TO THE BODE/MOOG IMPLEMENTATION, BUT USING
; AN FIR HILBERT TRANSFORMER TO OBTAIN THE 90 DEGREE PHASE SHIFT,
; AS OPPOSED TO THE ALLPASS PHASE DIFFERENCING NETWORK ("DOME FILTER")
; USED BY BODE AND MOOG.  THE DRAWBACK OF THE FIR APPROACH IS THAT
; THE OUTPUT IS DELAYED WITH REGARDS TO THE INPUT, BUT IN THIS
; IMPLEMENTATION THE DELAY IS RELATIVELY MINOR (100 SAMPLES, OR
; ABOUT 2.3 MILLISECONDS).

sr        =         44100                                        ; Hilbert transformer designed to work at 44100.
kr        =         4410
ksmps     =         10
nchnls    =         2

          instr 1                                                ; Frequency Shifter, Attempt #4

idur      =         p3
ibegshift =         p4                                           ; Initial amount of frequency shift.  Can be positive or negative number.
iendshift =         p5                                           ; Final amount of frequency shift. Can be positive or negative number.

; I USE A SIMPLE LINEAR ENVELOPE TO CONTROL FREQUENCY SHIFT.  CAN BE MODIFIED TO BE
; CONTROLLED BY AN OSCILLATOR, RANDOM SIGNALS, ANOTHER SIGNAL, ETC.

kfreq     linseg    ibegshift, idur, iendshift

; I USE SOUNDIN FOR MY INPUT, BUT ANY INPUT SHOULD WORK.  MY PARTICULAR TEST FILE WAS A JOHN
; FAHEY SAMPLE, BUT I ALSO USED A SIMPLE SINE OSCILLATOR DURING THE TESTING OF THE 
; ORCHESTRA IN ORDER TO TEST HOW MUCH OF THE UNWANTED BAND WAS REJECTED.  YOU MIGHT WANT TO 
; TRY RUNNING SIGNALS GENERATED BY PLUCK THROUGH THE FREQUENCY SHIFTER, IN ORDER TO 
; GET DRUM-LIKE SOUNDS, AS THE FREQUENCY SHIFTER WILL "DETUNE" THE HARMONIC PARTIALS
; GENERATED BY PLUCK.  VOICE WORKS GREAT, TOO.

ain       soundin   "hellorcb.aif", 0

; GAIN HAS TO BE ADJUSTED TO COMPENSATE FOR LOSS OF THE FIR HILBERT TRANSFORMER.

ain2      =         ain / 1.570796327

; FIRST PART OF A 201 SAMPLE LENGTH FIR HILBERT TRANSFORMER.  I FOUND THAT THE LONGER THE HILBERT 
; TRANSFORMER, THE BETTER, AS YOU OBTAINED MORE ACCURACY THROUGHOUT THE FREQUENCY RANGE. WITH LOWER
; ORDER HILBERT TRANSFORMERS, YOU GET LESS REJECTION OF THE UNWANTED PASSBAND, DUE TO THE 
; HILBERT TRANSFORMER NOT COVERING THE ENTIRE FREQUENCY RANGE ACCURATELY (THERE IS UNACCEPTABLE
; ROLLOFF AT LOW AND HIGH FREQUENCIES).  A 201-TAP HILBERT TRANSFORMER WORKS NICELY, WITH QUITE
; ACCEPTABLE REJECTION OF THE UNWANTED PASSBAND. I AM USING FILTER2 TO IMPLEMENT THE TRANSFORMER, 
; AS PER THE RECOMMENDATION OF JENS GROH.  COEFFICIENTS OBTAINED FROM 
; HTTP://WWW.CS.YORK.AC.UK/~FISHER/MKFILTER/ (THANKS TO ROGER KLAVENESS FOR THE POINTER).

afilt1    filter2   ain2, 48, 0, +0.0000000000, +0.0008103736,\
+0.0000000000, +0.0008457886, +0.0000000000, +0.0009017196,\
+0.0000000000, +0.0009793364, +0.0000000000, +0.0010798341,\
+0.0000000000, +0.0012044365, +0.0000000000, +0.0013544008,\
+0.0000000000, +0.0015310235, +0.0000000000, +0.0017356466,\
+0.0000000000, +0.0019696659, +0.0000000000, +0.0022345404,\
+0.0000000000, +0.0025318040, +0.0000000000, +0.0028630784,\
+0.0000000000, +0.0032300896, +0.0000000000, +0.0036346867,\
+0.0000000000, +0.0040788644, +0.0000000000, +0.0045647903,\
+0.0000000000, +0.0050948365, +0.0000000000, +0.0056716186,\
+0.0000000000, +0.0062980419, +0.0000000000, +0.0069773575,\
+0.0000000000, +0.0077132300, +0.0000000000, +0.0085098208,\
+0.0000000000, +0.0093718901 

; UNFORTUNATELY, FILTER2 CAN ONLY ACCEPT 50 COEFFICIENTS FOR AN FIR FILTER. I CAME UP WITH A BIT
; OF A KLUDGY SOLUTION, BUT IT WORKS WELL: SEPERATE THE HILBERT TRANSFORMER INTO SEVERAL FIR
; FILTERS, AND DELAY THE ADDITIONAL FIR FILTERS BY THE AMOUNT THAT THEY WOULD BE DELAYED IF
; THEY WERE IN ONE CONTINUOUS FILTER, THEN ADD TOGETHER THE RESULTS.  FOR EXAMPLE, AFILT2 WOULD 
; ORIGINALLY BE TAPS #49-96 IN THE HILBERT TRANSFORMER, SO THE OUTPUT OF AFILT2 IS RUN THROUGH 
; A DELAY SET TO 49 SAMPLES.
 
afilt2    filter2   ain2, 48, 0,  +0.0000000000, +0.0103049226,\
+0.0000000000, +0.0113152847, +0.0000000000, +0.0124104218,\
+0.0000000000, +0.0135991079, +0.0000000000, +0.0148917649,\
+0.0000000000, +0.0163008758, +0.0000000000, +0.0178415242,\
+0.0000000000, +0.0195321089, +0.0000000000, +0.0213953037,\
+0.0000000000, +0.0234593652, +0.0000000000, +0.0257599469,\
+0.0000000000, +0.0283426636, +0.0000000000, +0.0312667947,\
+0.0000000000, +0.0346107648, +0.0000000000, +0.0384804823,\
+0.0000000000, +0.0430224431, +0.0000000000, +0.0484451086,\
+0.0000000000, +0.0550553725, +0.0000000000, +0.0633242001,\
+0.0000000000, +0.0740128560, +0.0000000000, +0.0884368322,\
+0.0000000000, +0.1090816773, +0.0000000000, +0.1412745301,\
+0.0000000000, +0.1988673273

; DELAY FOR afilt2.
adel2     delay     afilt2, 49/sr

; See above for explanation of afilt3, afilt4, afilt5, and adel3, adel4, adel5

afilt3    filter2   ain2, 48, 0,  +0.0000000000, +0.3326528346,\
+0.0000000000, +0.9997730178, +0.0000000000, -0.9997730178,\
+0.0000000000, -0.3326528346, +0.0000000000, -0.1988673273,\
+0.0000000000, -0.1412745301, +0.0000000000, -0.1090816773,\
+0.0000000000, -0.0884368322, +0.0000000000, -0.0740128560,\
+0.0000000000, -0.0633242001, +0.0000000000, -0.0550553725,\
+0.0000000000, -0.0484451086, +0.0000000000, -0.0430224431,\
+0.0000000000, -0.0384804823, +0.0000000000, -0.0346107648,\
+0.0000000000, -0.0312667947, +0.0000000000, -0.0283426636,\
+0.0000000000, -0.0257599469, +0.0000000000, -0.0234593652,\
+0.0000000000, -0.0213953037, +0.0000000000, -0.0195321089,\
+0.0000000000, -0.0178415242, +0.0000000000, -0.0163008758,\
+0.0000000000, -0.0148917649

adel3     delay     afilt3, 97/sr

afilt4    filter2   ain2, 48, 0,  +0.0000000000, -0.0135991079,\
+0.0000000000, -0.0124104218, +0.0000000000, -0.0113152847,\
+0.0000000000, -0.0103049226, +0.0000000000, -0.0093718901,\
+0.0000000000, -0.0085098208, +0.0000000000, -0.0077132300,\
+0.0000000000, -0.0069773575, +0.0000000000, -0.0062980419,\
+0.0000000000, -0.0056716186, +0.0000000000, -0.0050948365,\
+0.0000000000, -0.0045647903, +0.0000000000, -0.0040788644,\
+0.0000000000, -0.0036346867, +0.0000000000, -0.0032300896,\
+0.0000000000, -0.0028630784, +0.0000000000, -0.0025318040,\
+0.0000000000, -0.0022345404, +0.0000000000, -0.0019696659,\
+0.0000000000, -0.0017356466, +0.0000000000, -0.0015310235,\
+0.0000000000, -0.0013544008, +0.0000000000, -0.0012044365,\
+0.0000000000, -0.0010798341

adel4     delay     afilt4, 145/sr

afilt5    filter2   afilt4, 9, 0, +0.0000000000, -0.0009793364,\
+0.0000000000, -0.0009017196, +0.0000000000, -0.0008457886,\
+0.0000000000, -0.0008103736, +0.0000000000

adel5     delay     afilt5, 154/sr

; THE COMPLETE HILBERT TRANSFORMER IS THE SUM OF AFILT1, PLUS THE DELAYED OUTPUTS OF THE OTHER FILTERS.

ahilb     =         afilt1 + adel2 + adel3 + adel4 + adel5

; THE ORIGINAL INPUT SIGNAL IS DELAYED BY THE AMOUNT OF DELAY FOUND IN THE HILBERT TRANSFORMER.
adelay    delay     ain, 100/sr

; GENERATION OF SINE AND COSINE SIGNALS FOR FREQUENCY SHIFTING
asin      oscili    1, kfreq, 1
acos      oscili    1, kfreq, 1, .25

; HILBERT TRANSFORM MULTIPLIED BY SINE MODULATION SIGNAL, WHILE 
; DELAYED INPUT IS MULTIPLIED BY COSINE MODULATION SIGNAL.
amod1     =         ahilb * asin
amod2     =         adelay * acos

aout1     =         (amod1 + amod2) * 0.7    ; Upshift output (although this varies on sign of modulation signal). 
aout2     =         (amod1 - amod2) * 0.7    ; Downshift output (although this varies on sign of modulation signal).
                                             ; Gains vary with shifting amount, so adjust as needed.  Gains of .7 
                                             ; to .9 should provide unity gain with most settings.

          outs      aout1, aout1             ; Try small shifting amounts (0-6 Hz), with aout1 in one channel,
                                             ; and aout2 in another.  Makes for nice stereo effects.

          endin
