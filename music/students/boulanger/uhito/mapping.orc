sr	=	44100kr	=	4410ksmps	=	10nchnls	=	2;==PlayBack==		instr	001	idur		=	p3iamp		=	ampdb(p4)ipch		=	cpspch(p5)iatk		=	p6			;----------irel		=	p7			;----------iasn		=	p8			;----------itim		=	p9			;time modulation valuekmod		=	p10			;pitch modulation valueibln		=	p11			;balanceifun		=	p12			;----------ktim		line	0, itim, 1a001		pvoc	ktim, kmod, "fatlittlesound2.pvc"a002		=	a001 * iamp		out	a002*ibln, a002*(1-ibln)		endin;==Vocoder==		instr	002	idur		=	p3iamp		=	ampdb(p4)ipch		=	cpspch(p5)iatk		=	p6			;band discrete qualityirel		=	p7			;--------------iasn		=	p8			;mode selectionitim		=	p9			;time modulation valuekmod		=	p10			;--------------ibln		=	p11			;balanceifun		=	p12			;f-table numberktim		line	0, itim, 1kfrq1, kamp1	pvread	ktim, "fatlittlesound2.pvc", iatk*1kfrq2, kamp2	pvread	ktim, "fatlittlesound2.pvc", iatk*2kfrq3, kamp3	pvread	ktim, "fatlittlesound2.pvc", iatk*3kfrq4, kamp4	pvread	ktim, "fatlittlesound2.pvc", iatk*4kfrq5, kamp5	pvread	ktim, "fatlittlesound2.pvc", iatk*5kfrq6, kamp6	pvread	ktim, "fatlittlesound2.pvc", iatk*6kfrq7, kamp7	pvread	ktim, "fatlittlesound2.pvc", iatk*7kfrq8, kamp8	pvread	ktim, "fatlittlesound2.pvc", iatk*8kfrq9, kamp9	pvread	ktim, "fatlittlesound2.pvc", iatk*9kfrq10, kamp10	pvread	ktim, "fatlittlesound2.pvc", iatk*10kfrq11, kamp11	pvread	ktim, "fatlittlesound2.pvc", iatk*11kfrq12, kamp12	pvread	ktim, "fatlittlesound2.pvc", iatk*12kfrq13, kamp13	pvread	ktim, "fatlittlesound2.pvc", iatk*13kfrq14, kamp14	pvread	ktim, "fatlittlesound2.pvc", iatk*14kfrq15, kamp15	pvread	ktim, "fatlittlesound2.pvc", iatk*15kfrq16, kamp16	pvread	ktim, "fatlittlesound2.pvc", iatk*16if (iasn == 1)	igoto	crossif (iasn == 2)	kgoto	pitchif (iasn == 3)	kgoto	noisecross:a101		oscil	kamp1 * iamp, kfrq1, ifuna102		oscil	kamp2 * iamp, kfrq2, ifuna103		oscil	kamp3 * iamp, kfrq3, ifuna104		oscil	kamp4 * iamp, kfrq4, ifuna105		oscil	kamp5 * iamp, kfrq5, ifuna106		oscil	kamp6 * iamp, kfrq6, ifuna107		oscil	kamp7 * iamp, kfrq7, ifuna108		oscil	kamp8 * iamp, kfrq8, ifuna109		oscil	kamp9 * iamp, kfrq9, ifuna110		oscil	kamp10 * iamp, kfrq10, ifuna111		oscil	kamp11 * iamp, kfrq11, ifuna112		oscil	kamp12 * iamp, kfrq12, ifuna113		oscil	kamp13 * iamp, kfrq13, ifuna114		oscil	kamp14 * iamp, kfrq14, ifuna115		oscil	kamp15 * iamp, kfrq15, ifuna116		oscil	kamp16 * iamp, kfrq16, ifun		kgoto	contipitch:a101		oscil	kamp1 * iamp, ipch*1, ifuna102		oscil	kamp2 * iamp, ipch*2, ifuna103		oscil	kamp3 * iamp, ipch*3, ifuna104		oscil	kamp4 * iamp, ipch*4, ifuna105		oscil	kamp5 * iamp, ipch*5, ifuna106		oscil	kamp6 * iamp, ipch*6, ifuna107		oscil	kamp7 * iamp, ipch*7, ifuna108		oscil	kamp8 * iamp, ipch*8, ifuna109		oscil	kamp9 * iamp, ipch*9, ifuna110		oscil	kamp10 * iamp, ipch*10, ifuna111		oscil	kamp11 * iamp, ipch*11, ifuna112		oscil	kamp12 * iamp, ipch*12, ifuna113		oscil	kamp13 * iamp, ipch*13, ifuna114		oscil	kamp14 * iamp, ipch*14, ifuna115		oscil	kamp15 * iamp, ipch*15, ifuna116		oscil	kamp16 * iamp, ipch*16, ifun		kgoto	continoise:a101		randh	kamp1 * iamp, ipch*1, ifuna102		randh	kamp2 * iamp, ipch*2, ifuna103		randh	kamp3 * iamp, ipch*3, ifuna104		randh	kamp4 * iamp, ipch*4, ifuna105		randh	kamp5 * iamp, ipch*5, ifuna106		randh	kamp6 * iamp, ipch*6, ifuna107		randh	kamp7 * iamp, ipch*7, ifuna108		randh	kamp8 * iamp, ipch*8, ifuna109		randh	kamp9 * iamp, ipch*9, ifuna110		randh	kamp10 * iamp, ipch*10, ifuna111		randh	kamp11 * iamp, ipch*11, ifuna112		randh	kamp12 * iamp, ipch*12, ifuna113		randh	kamp13 * iamp, ipch*13, ifuna114		randh	kamp14 * iamp, ipch*14, ifuna115		randh	kamp15 * iamp, ipch*15, ifuna116		randh	kamp16 * iamp, ipch*16, ifun		kgoto	conticonti:a001		=	a101 + a102 + a103 + a104 + a105 + a106 + a107 + a108 + a109 + a110 + a111 + a112 + a113 + a114 + a115 + a116		out 	a001*ibln, a001*(1-ibln)iasn		=	0		endin;==Randam Sound==		instr	003	idur		=	p3iamp		=	ampdb(p4)ipch		=	cpspch(p5)iatk		=	p6			;band discrete qualityirel		=	p7			;noise frequencyiasn		=	p8			;mode selectionitim		=	p9			;envelope selectionkmod		=	p10			;pitch modulation valueibln		=	p11			;balanceifun		=	p12			;f-table numberkrnd		randh	1, irelif (iasn == 1)	igoto	randaif (iasn == 2)	kgoto	pitchranda:a002		randh	krnd, irela001		pvoc	krnd*krnd, kmod, "fatlittlesound2.pvc"a004		=	a002 * a001 * iampif (itim == 1)	igoto	contnif (itim == 2)	kgoto	expntcontn:		kgoto	contiexpnt:kexp		expon	9, idur/2, 1a004		=	a004*kexp		kgoto	contipitch:kfrq1, kamp1	pvread	krnd*krnd, "fatlittlesound2.pvc", iatk*1kfrq2, kamp2	pvread	krnd*krnd, "fatlittlesound2.pvc", iatk*2kfrq3, kamp3	pvread	krnd*krnd, "fatlittlesound2.pvc", iatk*3kfrq4, kamp4	pvread	krnd*krnd, "fatlittlesound2.pvc", iatk*4kfrq5, kamp5	pvread	krnd*krnd, "fatlittlesound2.pvc", iatk*5kfrq6, kamp6	pvread	krnd*krnd, "fatlittlesound2.pvc", iatk*6kfrq7, kamp7	pvread	krnd*krnd, "fatlittlesound2.pvc", iatk*7kfrq8, kamp8	pvread	krnd*krnd, "fatlittlesound2.pvc", iatk*8kfrq9, kamp9	pvread	krnd*krnd, "fatlittlesound2.pvc", iatk*9kfrq10, kamp10	pvread	krnd*krnd, "fatlittlesound2.pvc", iatk*10kfrq11, kamp11	pvread	krnd*krnd, "fatlittlesound2.pvc", iatk*11kfrq12, kamp12	pvread	krnd*krnd, "fatlittlesound2.pvc", iatk*12kfrq13, kamp13	pvread	krnd*krnd, "fatlittlesound2.pvc", iatk*13kfrq14, kamp14	pvread	krnd*krnd, "fatlittlesound2.pvc", iatk*14kfrq15, kamp15	pvread	krnd*krnd, "fatlittlesound2.pvc", iatk*15kfrq16, kamp16	pvread	krnd*krnd, "fatlittlesound2.pvc", iatk*16a101		oscil	kamp1 * iamp, ipch*1, ifuna102		oscil	kamp2 * iamp, ipch*2, ifuna103		oscil	kamp3 * iamp, ipch*3, ifuna104		oscil	kamp4 * iamp, ipch*4, ifuna105		oscil	kamp5 * iamp, ipch*5, ifuna106		oscil	kamp6 * iamp, ipch*6, ifuna107		oscil	kamp7 * iamp, ipch*7, ifuna108		oscil	kamp8 * iamp, ipch*8, ifuna109		oscil	kamp9 * iamp, ipch*9, ifuna110		oscil	kamp10 * iamp, ipch*10, ifuna111		oscil	kamp11 * iamp, ipch*11, ifuna112		oscil	kamp12 * iamp, ipch*12, ifuna113		oscil	kamp13 * iamp, ipch*13, ifuna114		oscil	kamp14 * iamp, ipch*14, ifuna115		oscil	kamp15 * iamp, ipch*15, ifuna116		oscil	kamp16 * iamp, ipch*16, ifuna004		= 	a101 + a102 + a103 + a104 + a105 + a106 + a107 + a108 + a109 + a110 + a111 + a112 + a113 + a114 + a115 + a116		kgoto	conticonti:		out	a004*ibln, a004*(1-ibln)iasn		=	0itim		=	0		endin