<!doctype html public "-//W3C//DTD HTML 3.2//EN">
<!-- The HTML Edition of the Canonical Csound Manual maintained by David M. Boothe. Email: csound@lakewoodsound.com-->
<!--This is Version 4.16.-->
<html>
<head>
   <title>Adding your own Cmodules to Csound</title>
	 <LINK REL="stylesheet" TYPE="text/css" HREF="../manual.css" TITLE="formal">
</head>
<body bgcolor="white">
<table  align="right" cellpadding="1" cellspacing="1" border="0">
	<tr>
		<td width="45" align="right">
			<a href="../manual2.htm#contents" target="_parent"><img src="../toc.gif" width="38" height="18" alt="Use Non-Frames Version" border="0"></a>
		</td>
		<td width="10"></td>
		<td width="45" align="right">
			<a href="../cscore/compile.htm"><img src="../prev.gif" width="38" height="18" alt="Previous Page" border="0"></a>
		</td>
		<td width="45" align="right">
			<a href="../appendix/top.htm"><img src="../next.gif" width="38" height="18" alt="Next Page" border="0"></a>
		</td>
	</tr>
</table>
<font size="-2" color="black" face="Verdana, Arial, Helvetica, Century Gothic">
Adding Your Own Modules</font>

<hr size="1" color="#A9A9A9" noshade>

<h1>Adding your own Cmodules to Csound</h1>
<hr size="2" color="#A9A9A9" noshade>
<p>If the existing Csound generators do not suit your needs, you can write your own modules in C and add them to the run-time system. When you invoke Csound on an orchestra and score file, the orchestra is first read by a table-driven translator 'otran' and the instrument blocks converted to coded templates ready for loading into memory by 'oload' on request by the score reader. To use your own C-modules within a standard orchestra you need only add an entry in otran's table and relink Csound with your own code.
</p>
<p>The translator, loader, and run-time monitor will treat your module just like any other provided you follow some conventions. You need a <em>structure</em> defining the inputs, outputs and workspace, plus some <em>initialization code</em> and some <em>perf-time code</em>. Let's put an example of these in two new files, <strong>newgen.h</strong> and <strong>newgen.c</strong>:
</p>
<pre>
  typedef struct {         /*  newgen.h  -  define a structure     */
    OPDS
    h;                 /* required header  */
    float   *result, *istrt, *incr, *itime, *icontin;  /* addr outarg, inargs                    */
    float   curval, vincr;   /* private dataspace  */
    long    countdown;       /* ditto              */
  }  RMP;
  #include &quot;cs.h&quot;         /*  newgen.c -  init and perf code     */
  #include &quot;newgen.h&quot;
  void rampset(RMP *p)    /* at note initialization:  */
  {
    if  (*p-icontin == 0.)
    p-curval = *p-istrt;  /* optionally get new start value */
    p-vincr = *p-incr / esr;      /* set s-rate increment per sec.  */
    p-countdown = *p-itime * esr; /* counter for itime seconds      */
  }
  void ramp(RMP *p)       /* during note performance:     */
  {
    float *rsltp = p-result;  /* init an output array pointer  */
    int nn = ksmps;            /* array size from orchestra    */
      do {
      *rsltp++ = p-curval;      /* copy current value to output */
      if (--p-countdown = 0)    /* for the first itime seconds, */
      p-curval += p-vincr;    /* ramp the value  */
    } while (--nn);
  }
  </pre>
<p>Now we add this module to the translator table <strong>entry.c</strong>, under the opcode name <strong>rampt</strong>:
</p>
<pre>
  #include &quot;newgen.h&quot;
  
  void rampset(), ramp();
  
  /*   opcode    dspace  thread    outarg    inargs      isub       ksub     asub    */
  
    { &quot;rampt&quot;,  S(RMP),  5,        &quot;a&quot;,      &quot;iiio&quot;,     rampset,   NULL,    ramp  },
</pre>
<p>Finally we relink Csound to include the new module. If your Csound installation has created a libcsound.a, you can do this by typing
</p>
<pre>
  cc  -o mycsound  newgen.c  entry.c  -lcsound -lX11 -lm (X11 if included at installation)
</pre>
<p>Else copy <em>*.c, *.h </em>and Makefile from the Csound sources, add <strong>newgen.o </strong>to the Makefile list OBJS, add <strong>newgen.h</strong> as a dependency for entry.o, and a new dependency '<strong>newgen.o: newgen.h'</strong>, then run '<em>make CSound</em>'. If your host is a Macintosh, simply add <strong>newgen.h and newgen.c</strong> to one of the segments in the Csound Project, and invoke the <strong>C</strong> compiler.
</p>
<p>The above actions have added a new generator to the Csound language. It is an audio-rate linear ramp function which modifies an input value at a user-defined slope for some period. A ramp can optionally continue from the previous note's last value. The Csound manual entry would look like:
</p>

<pre>  ar   rampt     istart,  islope, itime [,  icontin]</pre>

<p><em>istart</em> &#8211; beginning value of an audio-rate linear ramp. Optionally overridden by a continue flag.
</p>
<p><em>islope</em> &#8211; slope of ramp, expressed as the y-interval change per second.
</p>
<p><em>itime</em> &#8211; ramp time in seconds, after which the value is held for the remainder of the note.
</p>
<p><em>icontin</em> (optional) &#8211; continue flag. If zero, ramping will proceed from input <em>istart</em> . If non-zero, ramping will proceed from the last value of the previous note. The default value is zero.
</p>
<p>The file <em>newgen.h</em> includes a one-line list of output and input parameters. These are the ports through which the new generator will communicate with the other generators in an instrument. Communication is by <em>address</em>, not <em>value</em>, and this is a list of pointers to floats. There are no restrictions on names, but the input-output argument types are further defined by character strings in entry.c (inargs, outargs). Inarg types are commonly <strong>x</strong>, <strong>a</strong>, <strong>k</strong>, and <strong>i</strong>, in the normal Csound manual conventions; also available are o (optional, defaulting to 0), p (optional, defaulting to 1). Outarg types include <strong>a</strong>, <strong>k</strong>, <strong>i</strong> and <strong>s</strong> (asig or ksig). It is important that all listed argument names be assigned a corresponding argument type in entry.c. Also, i-type args are valid only at initialization time, and other-type args are available only at perf time. Subsequent lines in the RMP structure declare the work space needed to keep the code re-entrant. These enable the module to be used multiple times in multiple instrument copies while preserving all data.
</p>
<p>The file <strong>newgen.c</strong> contains two subroutines, each called with a pointer to the uniquely allocated RMP structure and its data. The subroutines can be of three types: note initialization, k-rate signal generation, a-rate signal generation. A module normally requires two of these initialization, and either k-rate or a-rate subroutines which become inserted in various threaded lists of runnable tasks when an instrument is activated. The thread-types appear in entry.c in two forms: <em>isub</em>, <em>ksub</em> and <em>asub</em> names; and a threading index which is the sum of isub=1, ksub=2, asub=4. The code itself may reference global variables defined in <strong>cs.h</strong> and <strong>oload.c</strong>, the most useful of which are:
</p>
<pre>
  extern  OPARMS  O ;          float   esr
      user-defined sampling rate   float   ekr
      user-defined control rate    float   ensmps
      user-defined ksmps           int     ksmps
      user-defined ksmps           int     nchnls
      user-defined nchnls          int     O.odebug
      command-line -v flag         int     O.msglevel
      command-line -m level        float   pi, twopi    obvious
      constants                    float   tpidsr    twopi / esr float
      sstrcod                      special code for string arguments
</pre>
<h3>Function tables</h3>
<p>To access stored function tables, special help is available. The newly defined structure should include a pointer
</p>
<pre>
                    FUNC        *ftp;
</pre>
<p>initialized by the statement
</p>
<pre>
                    ftp = ftpfind(p-ifuncno);
</pre>
<p>where float *ifuncno is an i-type input argument containing the ftable number. The stored table is then at ftp-ftable, and other data such as length, phase masks, cps-to-incr converters, are also accessed from this pointer. See the FUNC structure in cs.h, the ftfind() code in fgens.c, and the code for oscset() and koscil() in opcodes2.c.
</p>
<h3>Additional space</h3>
<p>Sometimes the space requirement of a module is too large to be part of a structure (upper limit 65535 bytes), or it is dependent on an i-arg value which is not known until initialization. Additional space can be dynamically allocated and properly managed by including the line
</p>
<pre>
                    AUXCH      auxch;
</pre>
<p>in the defined structure (*p), then using the following style of code in the init module:
</p>
<pre>
               if (p-auxch.auxp == NULL)
                    auxalloc(npoints * sizeof(float), &amp;p-auxch);
</pre>
<p>The address of this auxiliary space is kept in a chain of such spaces belonging to this instrument, and is automatically managed while the instrument is being duplicated or garbage-collected during performance. The assignment
</p>

<pre>
               char *auxp = p-auxch.auxp;
</pre>
<p>will find the allocated space for init-time and perf-time use. See the LINSEG structure in opcodes1.h and the code for lsgset() and klnseg() in opcodes1.c.
</p>
<h3>File sharing</h3>
<p>When accessing an external file often, or doing it from multiple places, it is often efficient to read the entire file into memory. This is accomplished by including the line
</p>
<pre>
                    MEMFIL    *mfp;
</pre>
<p>in the defined structure (*p), then using the following style of code in the init module:
</p>
<pre>
               if (p-mfp == NULL)
                    p-mfp = ldmemfile(filname);
</pre>

<p>where char *filname is a string name of the file requested. The data read will be found between
</p>
<pre>
     (char *)  p-mfp-beginp; and (char *) p-mfp-endp;
</pre>
<p>Loaded files do not belong to a particular instrument, but are automatically shared for multiple access. See the ADSYN structure in opcodes3.h and the code for adset() and adsyn() in opcodes3.c.
</p>
<h3>String arguments</h3>
<p>To permit a quoted string input argument (float *ifilnam, say) in our defined structure (*p), assign it the argtype <strong>S</strong> in entry.c, include another member char *strarg in the structure, insert a line
</p>
<pre>
                    TSTRARG( &quot;rampt&quot;, RMP) \
</pre>
<p>in the file <strong>oload.h</strong>, and include the following code in the init module:
</p>
<pre>
               if (*p-ifilnam == sstrcod)
                    strcpy(filename, unquote(p-strarg));
</pre>
<p>See the code for adset() in opcodes3.c, lprdset() in opcodes5.c, and pvset() in opcodes8.c.
</p>

<hr size="2" color="#A9A9A9" noshade>
<table  align="right" cellpadding="1" cellspacing="1" border="0">
	<tr>
		<td width="45" align="right">
			<a href="../manual2.htm#contents" target="_parent"><img src="../toc.gif" width="38" height="18" alt="Use Non-Frames Version" border="0"></a>
		</td>
		<td width="10"></td>
		<td width="45" align="right">
			<a href="../cscore/compile.htm"><img src="../prev.gif" width="38" height="18" alt="Previous Page" border="0"></a>
		</td>
		<td width="45" align="right">
			<a href="../appendix/top.htm"><img src="../next.gif" width="38" height="18" alt="Next Page" border="0"></a>
		</td>
	</tr>
</table>
<font size="-2" color="black" face="Verdana, Arial, Helvetica, Century Gothic">
Adding Your Own Modules</font>
</body>

</html>
