<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">

<!-- This  particular HTML Edition of the Csound Manual is maintained by David M. Boothe. Email: csound@lakewoodsound.com-->
<!--This is Version 4.16.-->
<html>
<head>
	<title>phaser1, phaser2</title>
	 <LINK REL="stylesheet" TYPE="text/css" HREF="../manual.css" TITLE="formal">
</head>

<body bgcolor="white">
<table  align="right" cellpadding="1" cellspacing="1" border="0">
	<tr>
		<td width="45" align="right">
			<a href="../manual2.htm#contents" target="_parent"><img src="../toc.gif" width="38" height="18" alt="Use Non-Frames Version" border="0"></a>
		</td>
		<td width="10"></td>
		<td width="45" align="right">
			<a href="distort1.htm"><img src="../prev.gif" width="38" height="18" alt="Previous Page" border="0"></a>
		</td>
		<td width="45" align="right">
			<a href="waveset.htm"><img src="../next.gif" width="38" height="18" alt="Next Page" border="0"></a>
		</td>
	</tr>
</table>
<a class="toqr" href="../qr/sigmod.htm#effects" class="toqr">
Signal Modifiers: Special Effects</a>

<hr size="1" color="#A9A9A9" noshade>

<h2>phaser1, phaser2</h2>
<pre>
  ar      <strong>phaser1</strong>    asig, kfreq, iord, kfeedback[, iskip]
  ar      <strong>phaser2</strong>    asig, kfreq, kq, iord, imode, ksep, kfeedback
</pre>
<hr size="2" color="#A9A9A9" noshade>

<h3>Description</h3>
<p>An implementation of <em>iord</em> number of first-order (<strong>phaser1</strong>) or second-order (<strong>phaser2</strong>) allpass filters in series.</p>

<h3>Initialization</h3>

<p><em>iord</em> &#8211; the number of allpass stages in series. For <strong>phaser1</strong>, these are first-order filters, and iord can range from 1 to 4999. For <strong>phaser2</strong>, these are second-order filters, and iord can range from 1 to 2499. With higher orders, the computation time increases.</p>

<p><em>iskip</em> &#8211; used to control initial disposition of internal data space. Since filtering incorporates a feedback loop of previous output, the initial status of the storage space used is significant. A zero value will clear the space; a non-zero value will allow previous information to remain. The default value is 0.</p>

<p><em>imode</em> &#8211; used in calculation of notch frequencies.</p>

<h3>Performance</h3>
<p><em>kfreq</em> &#8211; frequency (in Hz) of the filter(s). For <strong>phaser1</strong>, this is the frequency at which each filter in the series shifts its input by 90 degrees. For <strong>phaser2</strong>, this is the center frequency of the notch of the first allpass filter in the series. This frequency is used as the base frequency from which the frequencies of the other notches are derived.</p>

<p><em>kq</em> &#8211; Q of each notch. Higher Q values result in narrow notches. A Q between 0.5 and 1 results in the strongest &quot;phasing&quot; effect, but higher Q values can be used for special effects.</p>

<p><em>kfeedback</em> &#8211; amount of the output which is fed back into the input of the allpass chain. With larger amounts of feedback, more prominent notches appear in the spectrum of the output. <em>kfeedback</em> must be between -1 and +1. for stability.</p>

<p>ksep - scaling factor used, in conjunction with <em>imode</em>, to determine the frequencies of the additional notches in the output spectrum.</p>

<p><strong>phaser1</strong> implements <em>iord</em> number of first-order allpass sections, serially connected, all sharing the same coefficient. Each allpass section can be represented by the following difference equation:</p>
<pre>  y(n) = C * x(n) + x(n-1) - C * y(n-1)</pre>
<p>where x(n) is the input, x(n-1) is the previous input, y(n) is the output, y(n-1) is the previous output, and C is a coefficient which is calculated from the value of <em>kfreq</em>, using the bilinear z-transform.</p>

<p>By slowly varying <em>kfreq</em>, and mixing the output of the allpass chain with the input, the classic &quot;phase shifter&quot; effect is created, with notches moving up and down in frequency. This works best with <em>iord</em> between 4 and 16. When the input to the allpass chain is mixed with the output, 1 notch is generated for every 2 allpass stages, so that with <em>iord</em> = 6, there will be 3 notches in the output. With higher values for <em>iord</em>, modulating <em>kfreq</em> will result in a form of nonlinear pitch modulation.</p>

<p><strong>phaser2</strong> implements <em>iord</em> number of second-order allpass sections, connected in series. The use of second-order allpass sections allows for the precise placement of the frequency, width, and depth of notches in the frequency spectrum. <em>iord</em> is used to directly determine the number of notches in the spectrum; e.g. for <em>iord</em> = 6, there will be 6 notches in the output spectrum.</p>

<p>There are two possible modes for determining the notch frequencies. When <em>imode</em> = 1, the notch frequencies are determined the following function:</p>
<em>  frequency of notch N = kbf + (ksep * kbf * N-1)</em>
<p>For example, with <em>imode</em> = 1 and <em>ksep</em> = 1, the notches will be in harmonic relationship with the notch frequency determined by <em>kfreq</em> (i.e. if there are 8 notches, with the first at 100 Hz, the next notches will be at 200, 300, 400, 500, 600, 700, and 800 Hz). This is useful for generating a &quot;comb filtering&quot; effect, with the number of notches determined by <em>iord</em>. Different values of <em>ksep</em> allow for inharmonic notch frequencies and other special effects. <em>ksep</em> can be swept to create an expansion or contraction of the notch frequencies. A useful visual analogy for the effect of sweeping <em>ksep</em> would be the bellows of an accordion as it is being played - the notches will be seperated, then compressed together, as <em>ksep</em> changes.</p>

<p>When <em>imode</em> = 2, the subsequent notches are powers of the input parameter <em>ksep</em> times the initial notch frequency specified by <em>kfreq</em>. This can be used to set the notch frequencies to octaves and other musical intervals. For example, the following lines will generate 8 notches in the output spectrum, with the notches spaced at octaves of <em>kfreq</em>:</p>
<pre>
  aphs    <strong>phaser2</strong>    ain, kfreq, 0.5, 8, 2, 2, 0
  aout    <strong>=</strong>          ain + aphs
</pre>

<p>When <em>imode</em> = 2, the value of <em>ksep</em> must be greater than 0. <em>ksep</em> can be swept to create a compression and expansion of notch frequencies (with more dramatic effects than when <em>imode</em> = 1).</p>

<h3>Examples</h3>
<pre>
; Orchestra for demonstration of phaser1 and phaser2
  <strong>sr</strong>      = 44100
  <strong>kr</strong>      = 4410
  <strong>ksmps</strong>   = 10
  <strong>nchnls</strong>  = 1

          <strong>instr</strong> 1 		                          ; demonstration of phase shifting abilities of phaser1.
                                                          ; Input mixed with output of phaser1 to generate notches.
                                                          ; Shows the effects of different iorder values on the sound
  idur    =         p3 
  iamp    =         p4 * .05
  iorder  =         p5                                    ; number of 1st-order stages in phaser1 network.
                                                          ; Divide iorder by 2 to get the number of notches.
  ifreq   =         p6                                    ; frequency of modulation of phaser1
  ifeed   =         p7                                    ; amount of feedback for phaser1

  kamp    <strong>linseg</strong>    0, .2, iamp, idur - .2, iamp, .2, 0

  iharms  =         (sr*.4) / 100

  asig    <strong>gbuzz</strong>      1, 100, iharms, 1, .95, 2            ; &quot;Sawtooth&quot; waveform modulation oscillator for phaser1 ugen.
  kfreq   <strong>oscili</strong>    5500, ifreq, 1
  kmod    =         kfreq + 5600

  aphs    <strong>phaser1</strong>   asig, kmod, iorder, ifeed
          <strong>out</strong>       (asig + aphs) * iamp

          <strong>endin</strong>

          <strong>instr</strong> 2                                         ; demonstration of phase shifting abilities of phaser2. 
                                                          ; Input mixed with output of phaser2 to generate notches. 
                                                          ; Demonstrates the interaction of imode and ksep.
  idur    =         p3 
  iamp    =         p4 * .04
  iorder  =         p5                                    ; number of 2nd-order stages in phaser2 network
  ifreq   =         p6                                    ; not used
  ifeed   =         p7                                    ; amount of feedback for phaser2
  imode   =         p8                                    ; mode for frequency scaling
  isep    =         p9                                    ; used with imode to determine notch frequencies
  kamp    <strong>linseg</strong>    0, .2, iamp, idur - .2, iamp, .2, 0
  iharms  =         (sr*.4) / 100

  asig    <strong>gbuzz</strong>     1, 100, iharms, 1, .95, 2             ; &quot;Sawtooth&quot; waveform exponentially decaying function, to control notch frequencies
  kline   <strong>expseg</strong>    1, idur, .005
  aphs    <strong>phaser2</strong>   asig, kline * 2000, .5, iorder, imode, isep, ifeed
          <strong>out</strong>       (asig + aphs) * iamp
          <strong>endin</strong>

; score file for above
	f1 0  16384 9 .5 -1 0         ; inverted half-sine, used for modulating phaser1 frequency
	f2 0  8192 9 1 1 .25          ; cosine wave for gbuzz

	
; phaser1
	i1 0  5 7000 4 .2 .9
	i1 6  5 7000 6 .2 .9
	i1 12 5 7000 8 .2 .9
	i1 18 5 7000 16 .2 .9
	i1 24 5 7000 32 .2 .9
	i1 30 5 7000 64 .2 .9

	; phaser2, imode=1
	i2 37 10 7000 8 .2 .9 1 .33
	i2 48 10 7000 8 .2 .9 1 2 
	
	; phaser2, imode=2
	i2 60 10 7000 8 .2 .9 2 .33
	i2 72 10 7000 8 .2 .9 2 2
	<strong>e</strong>
</pre>	
<h3>Technical History</h3>
<p>A general description of the differences between flanging and phasing can be found in Hartmann [1]. An early implementation of first-order allpass filters connected in series can be found in Beigel [2], where the bilinear z-transform is used for determining the phase shift frequency of each stage. Cronin [3] presents a similar implementation for a four-stage phase shifting network. Chamberlin [4] and Smith [5] both discuss using second-order allpass sections for greater control over notch depth, width, and frequency.</p>

<h3>References</h3>
<ol>
	<li>Hartmann, W.M. &quot;Flanging and Phasers.&quot; Journal of the Audio Engineering Society, Vol. 26, No. 6, pp. 439-443, June 1978. 
	<li>Beigel, Michael I. &quot;A Digital 'Phase Shifter' for Musical Applications, Using the Bell Labs (Alles-Fischer) Digital Filter Module.&quot; Journal of the Audio Engineering Society, Vol. 27, No. 9, pp. 673-676,September 1979. 
	<li>Cronin, Dennis. &quot;Examining Audio DSP Algorithms.&quot; Dr. Dobb's Journal, July 1994, p. 78-83.
	<li>Chamberlin, Hal. Musical Applications of Microprocessors. Second edition. Indianapolis, Indiana: Hayden Books, 1985.
	<li>Smith, Julius O. &quot;An Allpass Approach to Digital Phasing and Flanging.&quot; Proceedings of the 1984 ICMC, p. 103-108.
</ol>
<h3>Author</h3>
<p>Sean Costello<br>
Seattle, Washington<br>
1999<br>
New in Csound version 4.0
</p>

<hr size="2" color="#A9A9A9" noshade>
<table  align="right" cellpadding="1" cellspacing="1" border="0">
	<tr>
		<td width="45" align="right">
			<a href="../manual2.htm#contents" target="_parent"><img src="../toc.gif" width="38" height="18" alt="Use Non-Frames Version" border="0"></a>
		</td>
		<td width="10"></td>
		<td width="45" align="right">
			<a href="distort1.htm"><img src="../prev.gif" width="38" height="18" alt="Previous Page" border="0"></a>
		</td>
		<td width="45" align="right">
			<a href="waveset.htm"><img src="../next.gif" width="38" height="18" alt="Next Page" border="0"></a>
		</td>
	</tr>
</table>
<a class="toqr" href="../qr/sigmod.htm#effects" class="toqr">
Signal Modifiers: Special Effects</font></a>
</body>

</html>
